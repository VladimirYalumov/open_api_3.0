"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bundle = exports.bundleToFile = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _config = require("./config");

var _traverse = _interopRequireDefault(require("./traverse"));

var _context = _interopRequireDefault(require("./context"));

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bundleToFile = (fName, outputFile, force) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const doc = _fs.default.readFileSync(resolvedFileName, 'utf-8');

  let document;

  try {
    document = _jsYaml.default.safeLoad(doc);
  } catch (ex) {
    throw new Error("Can't load yaml file");
  }

  if (!document.openapi) {
    return [];
  }

  const lintConfig = (0, _config.getLintConfig)({}); // config.customRules = [];

  lintConfig.rules = { ...lintConfig.rules,
    bundler: { ...(lintConfig.rules && typeof lintConfig.rules.bundler === 'object' ? lintConfig.rules.bundler : null),
      output: outputFile,
      ignoreErrors: force
    }
  };
  const ctx = (0, _context.default)(document, doc, resolvedFileName, lintConfig);
  (0, _traverse.default)(document, _types.OpenAPIRoot, ctx);
  return ctx.result;
};

exports.bundleToFile = bundleToFile;

const bundle = (fName, force, options) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const doc = _fs.default.readFileSync(resolvedFileName, 'utf-8');

  let document;

  try {
    document = _jsYaml.default.safeLoad(doc);
  } catch (ex) {
    throw new Error("Can't load yaml file");
  }

  if (!document.openapi) {
    return [];
  }

  const config = (0, _config.getLintConfig)(options);
  config.rules = { ...config.rules,
    bundler: { ...(config.rules && typeof config.rules.bundler === 'object' ? config.rules.bundler : null),
      outputObject: true,
      ignoreErrors: force
    }
  };
  const ctx = (0, _context.default)(document, doc, resolvedFileName, config);
  (0, _traverse.default)(document, _types.OpenAPIRoot, ctx);
  return {
    bundle: ctx.bundlingResult,
    result: ctx.result,
    fileDependencies: ctx.fileDependencies
  };
};

exports.bundle = bundle;
var _default = bundleToFile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9idW5kbGUuanMiXSwibmFtZXMiOlsiYnVuZGxlVG9GaWxlIiwiZk5hbWUiLCJvdXRwdXRGaWxlIiwiZm9yY2UiLCJyZXNvbHZlZEZpbGVOYW1lIiwiZG9jIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJkb2N1bWVudCIsInlhbWwiLCJzYWZlTG9hZCIsImV4IiwiRXJyb3IiLCJvcGVuYXBpIiwibGludENvbmZpZyIsInJ1bGVzIiwiYnVuZGxlciIsIm91dHB1dCIsImlnbm9yZUVycm9ycyIsImN0eCIsIk9wZW5BUElSb290IiwicmVzdWx0IiwiYnVuZGxlIiwib3B0aW9ucyIsImNvbmZpZyIsIm91dHB1dE9iamVjdCIsImJ1bmRsaW5nUmVzdWx0IiwiZmlsZURlcGVuZGVuY2llcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBRU8sTUFBTUEsWUFBWSxHQUFHLENBQUNDLEtBQUQsRUFBUUMsVUFBUixFQUFvQkMsS0FBcEIsS0FBOEI7QUFDeEQsUUFBTUMsZ0JBQWdCLEdBQUdILEtBQXpCLENBRHdELENBQ3hCOztBQUNoQyxRQUFNSSxHQUFHLEdBQUdDLFlBQUdDLFlBQUgsQ0FBZ0JILGdCQUFoQixFQUFrQyxPQUFsQyxDQUFaOztBQUNBLE1BQUlJLFFBQUo7O0FBRUEsTUFBSTtBQUNGQSxJQUFBQSxRQUFRLEdBQUdDLGdCQUFLQyxRQUFMLENBQWNMLEdBQWQsQ0FBWDtBQUNELEdBRkQsQ0FFRSxPQUFPTSxFQUFQLEVBQVc7QUFDWCxVQUFNLElBQUlDLEtBQUosQ0FBVSxzQkFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDSixRQUFRLENBQUNLLE9BQWQsRUFBdUI7QUFBRSxXQUFPLEVBQVA7QUFBWTs7QUFFckMsUUFBTUMsVUFBVSxHQUFHLDJCQUFjLEVBQWQsQ0FBbkIsQ0Fid0QsQ0FjeEQ7O0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0MsS0FBWCxHQUFtQixFQUNqQixHQUFHRCxVQUFVLENBQUNDLEtBREc7QUFFakJDLElBQUFBLE9BQU8sRUFBRSxFQUNQLElBQUlGLFVBQVUsQ0FBQ0MsS0FBWCxJQUFvQixPQUFPRCxVQUFVLENBQUNDLEtBQVgsQ0FBaUJDLE9BQXhCLEtBQW9DLFFBQXhELEdBQW1FRixVQUFVLENBQUNDLEtBQVgsQ0FBaUJDLE9BQXBGLEdBQThGLElBQWxHLENBRE87QUFFUEMsTUFBQUEsTUFBTSxFQUFFZixVQUZEO0FBR1BnQixNQUFBQSxZQUFZLEVBQUVmO0FBSFA7QUFGUSxHQUFuQjtBQVNBLFFBQU1nQixHQUFHLEdBQUcsc0JBQWNYLFFBQWQsRUFBd0JILEdBQXhCLEVBQTZCRCxnQkFBN0IsRUFBK0NVLFVBQS9DLENBQVo7QUFFQSx5QkFBYU4sUUFBYixFQUF1Qlksa0JBQXZCLEVBQW9DRCxHQUFwQztBQUNBLFNBQU9BLEdBQUcsQ0FBQ0UsTUFBWDtBQUNELENBNUJNOzs7O0FBOEJBLE1BQU1DLE1BQU0sR0FBRyxDQUFDckIsS0FBRCxFQUFRRSxLQUFSLEVBQWVvQixPQUFmLEtBQTJCO0FBQy9DLFFBQU1uQixnQkFBZ0IsR0FBR0gsS0FBekIsQ0FEK0MsQ0FDZjs7QUFDaEMsUUFBTUksR0FBRyxHQUFHQyxZQUFHQyxZQUFILENBQWdCSCxnQkFBaEIsRUFBa0MsT0FBbEMsQ0FBWjs7QUFDQSxNQUFJSSxRQUFKOztBQUVBLE1BQUk7QUFDRkEsSUFBQUEsUUFBUSxHQUFHQyxnQkFBS0MsUUFBTCxDQUFjTCxHQUFkLENBQVg7QUFDRCxHQUZELENBRUUsT0FBT00sRUFBUCxFQUFXO0FBQ1gsVUFBTSxJQUFJQyxLQUFKLENBQVUsc0JBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUksQ0FBQ0osUUFBUSxDQUFDSyxPQUFkLEVBQXVCO0FBQUUsV0FBTyxFQUFQO0FBQVk7O0FBRXJDLFFBQU1XLE1BQU0sR0FBRywyQkFBY0QsT0FBZCxDQUFmO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ1QsS0FBUCxHQUFlLEVBQ2IsR0FBR1MsTUFBTSxDQUFDVCxLQURHO0FBRWJDLElBQUFBLE9BQU8sRUFBRSxFQUNQLElBQUlRLE1BQU0sQ0FBQ1QsS0FBUCxJQUFnQixPQUFPUyxNQUFNLENBQUNULEtBQVAsQ0FBYUMsT0FBcEIsS0FBZ0MsUUFBaEQsR0FBMkRRLE1BQU0sQ0FBQ1QsS0FBUCxDQUFhQyxPQUF4RSxHQUFrRixJQUF0RixDQURPO0FBRVBTLE1BQUFBLFlBQVksRUFBRSxJQUZQO0FBR1BQLE1BQUFBLFlBQVksRUFBRWY7QUFIUDtBQUZJLEdBQWY7QUFTQSxRQUFNZ0IsR0FBRyxHQUFHLHNCQUFjWCxRQUFkLEVBQXdCSCxHQUF4QixFQUE2QkQsZ0JBQTdCLEVBQStDb0IsTUFBL0MsQ0FBWjtBQUVBLHlCQUFhaEIsUUFBYixFQUF1Qlksa0JBQXZCLEVBQW9DRCxHQUFwQztBQUVBLFNBQU87QUFBRUcsSUFBQUEsTUFBTSxFQUFFSCxHQUFHLENBQUNPLGNBQWQ7QUFBOEJMLElBQUFBLE1BQU0sRUFBRUYsR0FBRyxDQUFDRSxNQUExQztBQUFrRE0sSUFBQUEsZ0JBQWdCLEVBQUVSLEdBQUcsQ0FBQ1E7QUFBeEUsR0FBUDtBQUNELENBNUJNOzs7ZUE4QlEzQixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuXG5pbXBvcnQgeyBnZXRMaW50Q29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHRyYXZlcnNlTm9kZSBmcm9tICcuL3RyYXZlcnNlJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJy4vY29udGV4dCc7XG5cbmltcG9ydCB7IE9wZW5BUElSb290IH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBidW5kbGVUb0ZpbGUgPSAoZk5hbWUsIG91dHB1dEZpbGUsIGZvcmNlKSA9PiB7XG4gIGNvbnN0IHJlc29sdmVkRmlsZU5hbWUgPSBmTmFtZTsgLy8gcGF0aC5yZXNvbHZlKGZOYW1lKTtcbiAgY29uc3QgZG9jID0gZnMucmVhZEZpbGVTeW5jKHJlc29sdmVkRmlsZU5hbWUsICd1dGYtOCcpO1xuICBsZXQgZG9jdW1lbnQ7XG5cbiAgdHJ5IHtcbiAgICBkb2N1bWVudCA9IHlhbWwuc2FmZUxvYWQoZG9jKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBsb2FkIHlhbWwgZmlsZVwiKTtcbiAgfVxuXG4gIGlmICghZG9jdW1lbnQub3BlbmFwaSkgeyByZXR1cm4gW107IH1cblxuICBjb25zdCBsaW50Q29uZmlnID0gZ2V0TGludENvbmZpZyh7fSk7XG4gIC8vIGNvbmZpZy5jdXN0b21SdWxlcyA9IFtdO1xuICBsaW50Q29uZmlnLnJ1bGVzID0ge1xuICAgIC4uLmxpbnRDb25maWcucnVsZXMsXG4gICAgYnVuZGxlcjoge1xuICAgICAgLi4uKGxpbnRDb25maWcucnVsZXMgJiYgdHlwZW9mIGxpbnRDb25maWcucnVsZXMuYnVuZGxlciA9PT0gJ29iamVjdCcgPyBsaW50Q29uZmlnLnJ1bGVzLmJ1bmRsZXIgOiBudWxsKSxcbiAgICAgIG91dHB1dDogb3V0cHV0RmlsZSxcbiAgICAgIGlnbm9yZUVycm9yczogZm9yY2UsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBjdHggPSBjcmVhdGVDb250ZXh0KGRvY3VtZW50LCBkb2MsIHJlc29sdmVkRmlsZU5hbWUsIGxpbnRDb25maWcpO1xuXG4gIHRyYXZlcnNlTm9kZShkb2N1bWVudCwgT3BlbkFQSVJvb3QsIGN0eCk7XG4gIHJldHVybiBjdHgucmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1bmRsZSA9IChmTmFtZSwgZm9yY2UsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcmVzb2x2ZWRGaWxlTmFtZSA9IGZOYW1lOyAvLyBwYXRoLnJlc29sdmUoZk5hbWUpO1xuICBjb25zdCBkb2MgPSBmcy5yZWFkRmlsZVN5bmMocmVzb2x2ZWRGaWxlTmFtZSwgJ3V0Zi04Jyk7XG4gIGxldCBkb2N1bWVudDtcblxuICB0cnkge1xuICAgIGRvY3VtZW50ID0geWFtbC5zYWZlTG9hZChkb2MpO1xuICB9IGNhdGNoIChleCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGxvYWQgeWFtbCBmaWxlXCIpO1xuICB9XG5cbiAgaWYgKCFkb2N1bWVudC5vcGVuYXBpKSB7IHJldHVybiBbXTsgfVxuXG4gIGNvbnN0IGNvbmZpZyA9IGdldExpbnRDb25maWcob3B0aW9ucyk7XG4gIGNvbmZpZy5ydWxlcyA9IHtcbiAgICAuLi5jb25maWcucnVsZXMsXG4gICAgYnVuZGxlcjoge1xuICAgICAgLi4uKGNvbmZpZy5ydWxlcyAmJiB0eXBlb2YgY29uZmlnLnJ1bGVzLmJ1bmRsZXIgPT09ICdvYmplY3QnID8gY29uZmlnLnJ1bGVzLmJ1bmRsZXIgOiBudWxsKSxcbiAgICAgIG91dHB1dE9iamVjdDogdHJ1ZSxcbiAgICAgIGlnbm9yZUVycm9yczogZm9yY2UsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBjdHggPSBjcmVhdGVDb250ZXh0KGRvY3VtZW50LCBkb2MsIHJlc29sdmVkRmlsZU5hbWUsIGNvbmZpZyk7XG5cbiAgdHJhdmVyc2VOb2RlKGRvY3VtZW50LCBPcGVuQVBJUm9vdCwgY3R4KTtcblxuICByZXR1cm4geyBidW5kbGU6IGN0eC5idW5kbGluZ1Jlc3VsdCwgcmVzdWx0OiBjdHgucmVzdWx0LCBmaWxlRGVwZW5kZW5jaWVzOiBjdHguZmlsZURlcGVuZGVuY2llcyB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYnVuZGxlVG9GaWxlO1xuIl19