"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getReferencedFrom", {
  enumerable: true,
  get: function () {
    return _default2.getReferencedFrom;
  }
});
exports.createYAMLParseError = exports.default = exports.messageHelpers = void 0;

var _path = require("path");

var _default2 = _interopRequireWildcard(require("./default"));

var _yaml = require("../yaml");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const mutuallyExclusiveFieldsMessageHelper = fieldNames => `Fields ${fieldNames.map(el => `'${el}'`).join(', ')} are mutually exclusive.`;

const fieldTypeMismatchMessageHelper = desiredType => `This field must be of ${desiredType} type.`;

const missingRequiredField = fieldName => `The field '${fieldName}' must be present on this level.`;

const fieldNotAllowedMessageHelper = (fieldName, definitionName) => `The field '${fieldName}' is not allowed in ${definitionName}. Use "x-" prefix or custom types to override this behavior.`;

const messageHelpers = {
  mutuallyExclusiveFieldsMessageHelper,
  fieldTypeMismatchMessageHelper,
  missingRequiredField,
  fieldNotAllowedMessageHelper
};
exports.messageHelpers = messageHelpers;
var _default = _default2.default;
exports.default = _default;

const createYAMLParseError = (e, ctx, resolvedPath, source, root = false) => ({
  message: `${e.name}: ${e.reason}`,
  path: root ? [] : Array.from(ctx.path),
  referencedFrom: root ? null : (0, _default2.getReferencedFrom)(ctx),
  location: {
    startLine: e.mark.line + 1,
    startCol: e.mark.column
  },
  codeFrame: (0, _yaml.getCodeFrameForLocation)(e.mark.position - 1, e.mark.position, source, e.mark.line + 1),
  value: null,
  file: (0, _path.relative)(process.cwd(), resolvedPath),
  severity: 4,
  enableCodeframe: ctx.enableCodeframe !== undefined ? ctx.enableCodeframe : true
});

exports.createYAMLParseError = createYAMLParseError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9pbmRleC5qcyJdLCJuYW1lcyI6WyJtdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc01lc3NhZ2VIZWxwZXIiLCJmaWVsZE5hbWVzIiwibWFwIiwiZWwiLCJqb2luIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwiZGVzaXJlZFR5cGUiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZCIsImZpZWxkTmFtZSIsImZpZWxkTm90QWxsb3dlZE1lc3NhZ2VIZWxwZXIiLCJkZWZpbml0aW9uTmFtZSIsIm1lc3NhZ2VIZWxwZXJzIiwiY3JlYXRlRXJyb3IiLCJjcmVhdGVZQU1MUGFyc2VFcnJvciIsImUiLCJjdHgiLCJyZXNvbHZlZFBhdGgiLCJzb3VyY2UiLCJyb290IiwibWVzc2FnZSIsIm5hbWUiLCJyZWFzb24iLCJwYXRoIiwiQXJyYXkiLCJmcm9tIiwicmVmZXJlbmNlZEZyb20iLCJsb2NhdGlvbiIsInN0YXJ0TGluZSIsIm1hcmsiLCJsaW5lIiwic3RhcnRDb2wiLCJjb2x1bW4iLCJjb2RlRnJhbWUiLCJwb3NpdGlvbiIsInZhbHVlIiwiZmlsZSIsInByb2Nlc3MiLCJjd2QiLCJzZXZlcml0eSIsImVuYWJsZUNvZGVmcmFtZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxvQ0FBb0MsR0FBSUMsVUFBRCxJQUFpQixVQUFTQSxVQUFVLENBQUNDLEdBQVgsQ0FBZ0JDLEVBQUQsSUFBUyxJQUFHQSxFQUFHLEdBQTlCLEVBQWtDQyxJQUFsQyxDQUF1QyxJQUF2QyxDQUE2QywwQkFBcEg7O0FBQ0EsTUFBTUMsOEJBQThCLEdBQUlDLFdBQUQsSUFBa0IseUJBQXdCQSxXQUFZLFFBQTdGOztBQUNBLE1BQU1DLG9CQUFvQixHQUFJQyxTQUFELElBQWdCLGNBQWFBLFNBQVUsa0NBQXBFOztBQUNBLE1BQU1DLDRCQUE0QixHQUFHLENBQUNELFNBQUQsRUFBWUUsY0FBWixLQUFnQyxjQUFhRixTQUFVLHVCQUFzQkUsY0FBZSw4REFBakk7O0FBRU8sTUFBTUMsY0FBYyxHQUFHO0FBQzVCWCxFQUFBQSxvQ0FENEI7QUFFNUJLLEVBQUFBLDhCQUY0QjtBQUc1QkUsRUFBQUEsb0JBSDRCO0FBSTVCRSxFQUFBQTtBQUo0QixDQUF2Qjs7ZUFPUUcsaUI7OztBQUdSLE1BQU1DLG9CQUFvQixHQUFHLENBQUNDLENBQUQsRUFBSUMsR0FBSixFQUFTQyxZQUFULEVBQXVCQyxNQUF2QixFQUErQkMsSUFBSSxHQUFHLEtBQXRDLE1BQWlEO0FBQ25GQyxFQUFBQSxPQUFPLEVBQUcsR0FBRUwsQ0FBQyxDQUFDTSxJQUFLLEtBQUlOLENBQUMsQ0FBQ08sTUFBTyxFQURtRDtBQUVuRkMsRUFBQUEsSUFBSSxFQUFFSixJQUFJLEdBQUcsRUFBSCxHQUFRSyxLQUFLLENBQUNDLElBQU4sQ0FBV1QsR0FBRyxDQUFDTyxJQUFmLENBRmlFO0FBR25GRyxFQUFBQSxjQUFjLEVBQUVQLElBQUksR0FBRyxJQUFILEdBQVUsaUNBQWtCSCxHQUFsQixDQUhxRDtBQUluRlcsRUFBQUEsUUFBUSxFQUFFO0FBQ1JDLElBQUFBLFNBQVMsRUFBRWIsQ0FBQyxDQUFDYyxJQUFGLENBQU9DLElBQVAsR0FBYyxDQURqQjtBQUVSQyxJQUFBQSxRQUFRLEVBQUVoQixDQUFDLENBQUNjLElBQUYsQ0FBT0c7QUFGVCxHQUp5RTtBQVFuRkMsRUFBQUEsU0FBUyxFQUFFLG1DQUF3QmxCLENBQUMsQ0FBQ2MsSUFBRixDQUFPSyxRQUFQLEdBQWtCLENBQTFDLEVBQTZDbkIsQ0FBQyxDQUFDYyxJQUFGLENBQU9LLFFBQXBELEVBQThEaEIsTUFBOUQsRUFBc0VILENBQUMsQ0FBQ2MsSUFBRixDQUFPQyxJQUFQLEdBQWMsQ0FBcEYsQ0FSd0U7QUFTbkZLLEVBQUFBLEtBQUssRUFBRSxJQVQ0RTtBQVVuRkMsRUFBQUEsSUFBSSxFQUFFLG9CQUFTQyxPQUFPLENBQUNDLEdBQVIsRUFBVCxFQUF3QnJCLFlBQXhCLENBVjZFO0FBV25Gc0IsRUFBQUEsUUFBUSxFQUFFLENBWHlFO0FBWW5GQyxFQUFBQSxlQUFlLEVBQUV4QixHQUFHLENBQUN3QixlQUFKLEtBQXdCQyxTQUF4QixHQUFvQ3pCLEdBQUcsQ0FBQ3dCLGVBQXhDLEdBQTBEO0FBWlEsQ0FBakQsQ0FBN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWxhdGl2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IGNyZWF0ZUVycm9yLCB7IGdldFJlZmVyZW5jZWRGcm9tIH0gZnJvbSAnLi9kZWZhdWx0JztcbmltcG9ydCB7IGdldENvZGVGcmFtZUZvckxvY2F0aW9uIH0gZnJvbSAnLi4veWFtbCc7XG5cbmNvbnN0IG11dHVhbGx5RXhjbHVzaXZlRmllbGRzTWVzc2FnZUhlbHBlciA9IChmaWVsZE5hbWVzKSA9PiBgRmllbGRzICR7ZmllbGROYW1lcy5tYXAoKGVsKSA9PiBgJyR7ZWx9J2ApLmpvaW4oJywgJyl9IGFyZSBtdXR1YWxseSBleGNsdXNpdmUuYDtcbmNvbnN0IGZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciA9IChkZXNpcmVkVHlwZSkgPT4gYFRoaXMgZmllbGQgbXVzdCBiZSBvZiAke2Rlc2lyZWRUeXBlfSB0eXBlLmA7XG5jb25zdCBtaXNzaW5nUmVxdWlyZWRGaWVsZCA9IChmaWVsZE5hbWUpID0+IGBUaGUgZmllbGQgJyR7ZmllbGROYW1lfScgbXVzdCBiZSBwcmVzZW50IG9uIHRoaXMgbGV2ZWwuYDtcbmNvbnN0IGZpZWxkTm90QWxsb3dlZE1lc3NhZ2VIZWxwZXIgPSAoZmllbGROYW1lLCBkZWZpbml0aW9uTmFtZSkgPT4gYFRoZSBmaWVsZCAnJHtmaWVsZE5hbWV9JyBpcyBub3QgYWxsb3dlZCBpbiAke2RlZmluaXRpb25OYW1lfS4gVXNlIFwieC1cIiBwcmVmaXggb3IgY3VzdG9tIHR5cGVzIHRvIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3IuYDtcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VIZWxwZXJzID0ge1xuICBtdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc01lc3NhZ2VIZWxwZXIsXG4gIGZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcixcbiAgbWlzc2luZ1JlcXVpcmVkRmllbGQsXG4gIGZpZWxkTm90QWxsb3dlZE1lc3NhZ2VIZWxwZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVFcnJvcjtcbmV4cG9ydCB7IGdldFJlZmVyZW5jZWRGcm9tIH0gZnJvbSAnLi9kZWZhdWx0JztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVlBTUxQYXJzZUVycm9yID0gKGUsIGN0eCwgcmVzb2x2ZWRQYXRoLCBzb3VyY2UsIHJvb3QgPSBmYWxzZSkgPT4gKHtcbiAgbWVzc2FnZTogYCR7ZS5uYW1lfTogJHtlLnJlYXNvbn1gLFxuICBwYXRoOiByb290ID8gW10gOiBBcnJheS5mcm9tKGN0eC5wYXRoKSxcbiAgcmVmZXJlbmNlZEZyb206IHJvb3QgPyBudWxsIDogZ2V0UmVmZXJlbmNlZEZyb20oY3R4KSxcbiAgbG9jYXRpb246IHtcbiAgICBzdGFydExpbmU6IGUubWFyay5saW5lICsgMSxcbiAgICBzdGFydENvbDogZS5tYXJrLmNvbHVtbixcbiAgfSxcbiAgY29kZUZyYW1lOiBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbihlLm1hcmsucG9zaXRpb24gLSAxLCBlLm1hcmsucG9zaXRpb24sIHNvdXJjZSwgZS5tYXJrLmxpbmUgKyAxKSxcbiAgdmFsdWU6IG51bGwsXG4gIGZpbGU6IHJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIHJlc29sdmVkUGF0aCksXG4gIHNldmVyaXR5OiA0LFxuICBlbmFibGVDb2RlZnJhbWU6IGN0eC5lbmFibGVDb2RlZnJhbWUgIT09IHVuZGVmaW5lZCA/IGN0eC5lbmFibGVDb2RlZnJhbWUgOiB0cnVlLFxufSk7XG4iXX0=