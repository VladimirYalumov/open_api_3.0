"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fromError = exports.createErrorFlat = exports.getReferencedFrom = exports.getMsgLevelFromString = exports.messageLevels = void 0;

var _path = _interopRequireDefault(require("path"));

var _yaml = require("../yaml");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const messageLevels = {
  ERROR: 4,
  WARNING: 3,
  INFO: 2,
  DEBUG: 1
};
exports.messageLevels = messageLevels;

const getLocationForPath = (fName, nodePath, target, {
  filePath,
  source
}) => (0, _yaml.getLocationByPath)(Array.from(nodePath), {
  filePath,
  source
}, target).startLine;

const getMsgLevelFromString = severityString => {
  switch (severityString.toLowerCase()) {
    case 'debug':
      return 1;

    case 'info':
      return 2;

    case 'warning':
      return 3;

    case 'error':
    default:
      return 4;
  }
};

exports.getMsgLevelFromString = getMsgLevelFromString;

const getReferencedFrom = ctx => {
  const lastRef = ctx.pathStack[ctx.pathStack.length - 1];
  if (!lastRef) return null;
  return {
    file: _path.default.relative(process.cwd(), lastRef.file),
    startLine: getLocationForPath(lastRef.file, [...lastRef.path, '$ref'], 'key', {
      source: lastRef.source,
      filePath: lastRef.file
    }),
    path: Array.from(lastRef.path)
  };
};

exports.getReferencedFrom = getReferencedFrom;

const createError = (msg, node, ctx, options) => {
  const {
    target,
    possibleAlternate,
    fromRule
  } = options;
  let {
    severity = messageLevels.ERROR
  } = options;

  if (typeof severity === 'string') {
    severity = getMsgLevelFromString(severity);
  }

  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  return {
    message: msg,
    path: Array.from(ctx.path),
    referencedFrom: getReferencedFrom(ctx),
    location,
    codeFrame: ctx.enableCodeframe && location ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source, location.startLine) : null,
    value: node,
    file: _path.default.relative(process.cwd(), ctx.filePath),
    severity,
    enableCodeframe: ctx.enableCodeframe,
    possibleAlternate,
    fromRule,
    target
  };
};

const createErrorFlat = (node, ctx, fromRule, severity, msg, target, possibleAlternate) => createError(msg, node, ctx, {
  target,
  fromRule,
  severity,
  possibleAlternate
});

exports.createErrorFlat = createErrorFlat;

const fromError = (error, ctx) => ( // let location = getLocationByPath(Array.from(ctx.path), ctx, error.target);
// if (!location) location = getLocationByPath(Array.from(ctx.path), ctx);
{ ...error,
  ...ctx,
  document: null,
  source: null,
  path: error.path,
  referencedFrom: getReferencedFrom(ctx)
});

exports.fromError = fromError;
var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,