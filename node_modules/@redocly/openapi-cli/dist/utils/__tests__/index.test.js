"use strict";

var _index = require("../index");

describe('isUrl', () => {
  test('https valid url', () => {
    expect((0, _index.isUrl)('https://redoc.ly')).toEqual(true);
    expect((0, _index.isFullyQualifiedUrl)('https://redoc.ly')).toEqual(true);
  });
  test('http valid url', () => {
    expect((0, _index.isUrl)('http://redoc.ly')).toEqual(true);
    expect((0, _index.isFullyQualifiedUrl)('http://redoc.ly')).toEqual(true);
  });
  test('https valid url with query params', () => {
    expect((0, _index.isUrl)('https://redoc.ly/index.php?some_param=21313&other=false')).toEqual(true);
    expect((0, _index.isFullyQualifiedUrl)('https://redoc.ly/index.php?some_param=21313&other=false')).toEqual(true);
  });
  test('https valid url with custom port', () => {
    expect((0, _index.isUrl)('https://redoc.ly:443')).toEqual(true);
    expect((0, _index.isFullyQualifiedUrl)('https://redoc.ly:443')).toEqual(true);
  });
  test('invalid url', () => {
    expect((0, _index.isUrl)('not-a-valid-site:21')).toEqual(false);
    expect((0, _index.isFullyQualifiedUrl)('not-a-valid-site:21')).toEqual(false);
  });
  test('url without protocol', () => {
    expect((0, _index.isUrl)('site.com')).toEqual(true);
    expect((0, _index.isFullyQualifiedUrl)('site.com')).toEqual(false);
  });
});
describe('matchesJsonSchemaType', () => {
  test('string', () => {
    expect((0, _index.matchesJsonSchemaType)('test', 'string')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(35, 'string')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(1, 'integer')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(1.5, 'integer')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('string', 'integer')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(1, 'number')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(1.5, 'number')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)({}, 'number')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(true, 'boolean')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(false, 'boolean')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(25, 'boolean')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(null, 'null')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(0, 'null')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('', 'null')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)({}, 'null')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)({}, 'object')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)([], 'object')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)(null, 'object')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('string', 'object')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)([], 'array')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)({}, 'array')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)(null, 'array')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('string', 'array')).toEqual(false);
  });
});
describe('getClosestString', () => {
  const names = ['apple', 'banana', 'apple inc'];
  expect((0, _index.getClosestString)('apple nc', names)).toEqual('apple inc');
  expect((0, _index.getClosestString)('apple', names)).toEqual('apple');
  expect((0, _index.getClosestString)('Apple', names)).toEqual('apple');
  expect((0, _index.getClosestString)('firefox', names)).toEqual(null);
  expect((0, _index.getClosestString)('firefox', [])).toEqual(null);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,