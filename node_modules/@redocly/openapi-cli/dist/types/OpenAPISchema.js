"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _OpenAPIExternalDocumentation = _interopRequireDefault(require("./OpenAPIExternalDocumentation"));

var _OpenAPISchemaMap = _interopRequireDefault(require("./OpenAPISchemaMap"));

var _OpenAPIDiscriminator = _interopRequireDefault(require("./OpenAPIDiscriminator"));

var _OpenAPIXML = _interopRequireDefault(require("./OpenAPIXML"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-check

/* eslint-disable import/no-cycle */
const OpenAPISchemaObject = {
  name: 'OpenAPISchema',
  isIdempotent: true,
  properties: {
    allOf() {
      return OpenAPISchemaObject;
    },

    anyOf() {
      return OpenAPISchemaObject;
    },

    oneOf() {
      return OpenAPISchemaObject;
    },

    not() {
      return OpenAPISchemaObject;
    },

    items() {
      return OpenAPISchemaObject;
    },

    properties: _OpenAPISchemaMap.default,
    discriminator: _OpenAPIDiscriminator.default,
    externalDocs: _OpenAPIExternalDocumentation.default,
    xml: _OpenAPIXML.default,
    title: null,
    description: null,
    multipleOf: null,
    maximum: null,
    exclusiveMaximum: null,
    minimum: null,
    exclusiveMinimum: null,
    maxLength: null,
    minLength: null,
    pattern: null,
    maxItems: null,
    minItems: null,
    uniqueItems: null,
    maxProperties: null,
    minProperties: null,
    required: null,
    enum: null,
    type: null,
    additionalProperties: null,
    format: null,
    nullable: null,
    readOnly: null,
    writeOnly: null,
    deprecated: null,
    example: null,
    default: null
  },
  resolvableScalars: ['description']
};
var _default = OpenAPISchemaObject;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9PcGVuQVBJU2NoZW1hLmpzIl0sIm5hbWVzIjpbIk9wZW5BUElTY2hlbWFPYmplY3QiLCJuYW1lIiwiaXNJZGVtcG90ZW50IiwicHJvcGVydGllcyIsImFsbE9mIiwiYW55T2YiLCJvbmVPZiIsIm5vdCIsIml0ZW1zIiwiT3BlbkFQSVNjaGVtYU1hcCIsImRpc2NyaW1pbmF0b3IiLCJPcGVuQVBJRGlzY3JpbWluYXRvciIsImV4dGVybmFsRG9jcyIsIk9wZW5BUElFeHRlcm5hbERvY3VtZW50YXRpb24iLCJ4bWwiLCJPcGVuQVBJWE1MIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIm11bHRpcGxlT2YiLCJtYXhpbXVtIiwiZXhjbHVzaXZlTWF4aW11bSIsIm1pbmltdW0iLCJleGNsdXNpdmVNaW5pbXVtIiwibWF4TGVuZ3RoIiwibWluTGVuZ3RoIiwicGF0dGVybiIsIm1heEl0ZW1zIiwibWluSXRlbXMiLCJ1bmlxdWVJdGVtcyIsIm1heFByb3BlcnRpZXMiLCJtaW5Qcm9wZXJ0aWVzIiwicmVxdWlyZWQiLCJlbnVtIiwidHlwZSIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwiZm9ybWF0IiwibnVsbGFibGUiLCJyZWFkT25seSIsIndyaXRlT25seSIsImRlcHJlY2F0ZWQiLCJleGFtcGxlIiwiZGVmYXVsdCIsInJlc29sdmFibGVTY2FsYXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFOQTs7QUFDQTtBQU9BLE1BQU1BLG1CQUFtQixHQUFHO0FBQzFCQyxFQUFBQSxJQUFJLEVBQUUsZUFEb0I7QUFFMUJDLEVBQUFBLFlBQVksRUFBRSxJQUZZO0FBRzFCQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsS0FBSyxHQUFHO0FBQ04sYUFBT0osbUJBQVA7QUFDRCxLQUhTOztBQUlWSyxJQUFBQSxLQUFLLEdBQUc7QUFDTixhQUFPTCxtQkFBUDtBQUNELEtBTlM7O0FBT1ZNLElBQUFBLEtBQUssR0FBRztBQUNOLGFBQU9OLG1CQUFQO0FBQ0QsS0FUUzs7QUFVVk8sSUFBQUEsR0FBRyxHQUFHO0FBQ0osYUFBT1AsbUJBQVA7QUFDRCxLQVpTOztBQWFWUSxJQUFBQSxLQUFLLEdBQUc7QUFDTixhQUFPUixtQkFBUDtBQUNELEtBZlM7O0FBZ0JWRyxJQUFBQSxVQUFVLEVBQUVNLHlCQWhCRjtBQWlCVkMsSUFBQUEsYUFBYSxFQUFFQyw2QkFqQkw7QUFrQlZDLElBQUFBLFlBQVksRUFBRUMscUNBbEJKO0FBbUJWQyxJQUFBQSxHQUFHLEVBQUVDLG1CQW5CSztBQXFCVkMsSUFBQUEsS0FBSyxFQUFFLElBckJHO0FBc0JWQyxJQUFBQSxXQUFXLEVBQUUsSUF0Qkg7QUF1QlZDLElBQUFBLFVBQVUsRUFBRSxJQXZCRjtBQXdCVkMsSUFBQUEsT0FBTyxFQUFFLElBeEJDO0FBeUJWQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQXpCUjtBQTBCVkMsSUFBQUEsT0FBTyxFQUFFLElBMUJDO0FBMkJWQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQTNCUjtBQTRCVkMsSUFBQUEsU0FBUyxFQUFFLElBNUJEO0FBNkJWQyxJQUFBQSxTQUFTLEVBQUUsSUE3QkQ7QUE4QlZDLElBQUFBLE9BQU8sRUFBRSxJQTlCQztBQStCVkMsSUFBQUEsUUFBUSxFQUFFLElBL0JBO0FBZ0NWQyxJQUFBQSxRQUFRLEVBQUUsSUFoQ0E7QUFpQ1ZDLElBQUFBLFdBQVcsRUFBRSxJQWpDSDtBQWtDVkMsSUFBQUEsYUFBYSxFQUFFLElBbENMO0FBbUNWQyxJQUFBQSxhQUFhLEVBQUUsSUFuQ0w7QUFvQ1ZDLElBQUFBLFFBQVEsRUFBRSxJQXBDQTtBQXFDVkMsSUFBQUEsSUFBSSxFQUFFLElBckNJO0FBc0NWQyxJQUFBQSxJQUFJLEVBQUUsSUF0Q0k7QUF1Q1ZDLElBQUFBLG9CQUFvQixFQUFFLElBdkNaO0FBd0NWQyxJQUFBQSxNQUFNLEVBQUUsSUF4Q0U7QUF5Q1ZDLElBQUFBLFFBQVEsRUFBRSxJQXpDQTtBQTBDVkMsSUFBQUEsUUFBUSxFQUFFLElBMUNBO0FBMkNWQyxJQUFBQSxTQUFTLEVBQUUsSUEzQ0Q7QUE0Q1ZDLElBQUFBLFVBQVUsRUFBRSxJQTVDRjtBQTZDVkMsSUFBQUEsT0FBTyxFQUFFLElBN0NDO0FBOENWQyxJQUFBQSxPQUFPLEVBQUU7QUE5Q0MsR0FIYztBQW1EMUJDLEVBQUFBLGlCQUFpQixFQUFFLENBQ2pCLGFBRGlCO0FBbkRPLENBQTVCO2VBd0RlMUMsbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1jeWNsZSAqL1xuXG5pbXBvcnQgT3BlbkFQSUV4dGVybmFsRG9jdW1lbnRhdGlvbiBmcm9tICcuL09wZW5BUElFeHRlcm5hbERvY3VtZW50YXRpb24nO1xuaW1wb3J0IE9wZW5BUElTY2hlbWFNYXAgZnJvbSAnLi9PcGVuQVBJU2NoZW1hTWFwJztcbmltcG9ydCBPcGVuQVBJRGlzY3JpbWluYXRvciBmcm9tICcuL09wZW5BUElEaXNjcmltaW5hdG9yJztcbmltcG9ydCBPcGVuQVBJWE1MIGZyb20gJy4vT3BlbkFQSVhNTCc7XG5cbmNvbnN0IE9wZW5BUElTY2hlbWFPYmplY3QgPSB7XG4gIG5hbWU6ICdPcGVuQVBJU2NoZW1hJyxcbiAgaXNJZGVtcG90ZW50OiB0cnVlLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgYWxsT2YoKSB7XG4gICAgICByZXR1cm4gT3BlbkFQSVNjaGVtYU9iamVjdDtcbiAgICB9LFxuICAgIGFueU9mKCkge1xuICAgICAgcmV0dXJuIE9wZW5BUElTY2hlbWFPYmplY3Q7XG4gICAgfSxcbiAgICBvbmVPZigpIHtcbiAgICAgIHJldHVybiBPcGVuQVBJU2NoZW1hT2JqZWN0O1xuICAgIH0sXG4gICAgbm90KCkge1xuICAgICAgcmV0dXJuIE9wZW5BUElTY2hlbWFPYmplY3Q7XG4gICAgfSxcbiAgICBpdGVtcygpIHtcbiAgICAgIHJldHVybiBPcGVuQVBJU2NoZW1hT2JqZWN0O1xuICAgIH0sXG4gICAgcHJvcGVydGllczogT3BlbkFQSVNjaGVtYU1hcCxcbiAgICBkaXNjcmltaW5hdG9yOiBPcGVuQVBJRGlzY3JpbWluYXRvcixcbiAgICBleHRlcm5hbERvY3M6IE9wZW5BUElFeHRlcm5hbERvY3VtZW50YXRpb24sXG4gICAgeG1sOiBPcGVuQVBJWE1MLFxuXG4gICAgdGl0bGU6IG51bGwsXG4gICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAgbXVsdGlwbGVPZjogbnVsbCxcbiAgICBtYXhpbXVtOiBudWxsLFxuICAgIGV4Y2x1c2l2ZU1heGltdW06IG51bGwsXG4gICAgbWluaW11bTogbnVsbCxcbiAgICBleGNsdXNpdmVNaW5pbXVtOiBudWxsLFxuICAgIG1heExlbmd0aDogbnVsbCxcbiAgICBtaW5MZW5ndGg6IG51bGwsXG4gICAgcGF0dGVybjogbnVsbCxcbiAgICBtYXhJdGVtczogbnVsbCxcbiAgICBtaW5JdGVtczogbnVsbCxcbiAgICB1bmlxdWVJdGVtczogbnVsbCxcbiAgICBtYXhQcm9wZXJ0aWVzOiBudWxsLFxuICAgIG1pblByb3BlcnRpZXM6IG51bGwsXG4gICAgcmVxdWlyZWQ6IG51bGwsXG4gICAgZW51bTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBudWxsLFxuICAgIGZvcm1hdDogbnVsbCxcbiAgICBudWxsYWJsZTogbnVsbCxcbiAgICByZWFkT25seTogbnVsbCxcbiAgICB3cml0ZU9ubHk6IG51bGwsXG4gICAgZGVwcmVjYXRlZDogbnVsbCxcbiAgICBleGFtcGxlOiBudWxsLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gIH0sXG4gIHJlc29sdmFibGVTY2FsYXJzOiBbXG4gICAgJ2Rlc2NyaXB0aW9uJyxcbiAgXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9wZW5BUElTY2hlbWFPYmplY3Q7XG4iXX0=