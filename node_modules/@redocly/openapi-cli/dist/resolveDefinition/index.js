"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.loadDefinitions = void 0;

var defaultDefinitionsMap = _interopRequireWildcard(require("../types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const applyMutations = (defaultDefs, definitionReducer) => {
  const mutatedDefinitionsMap = definitionReducer(defaultDefs);
  return mutatedDefinitionsMap;
};

const loadDefinitions = config => {
  const customTypesNames = [];
  const t = applyMutations({}, config.definitionResolver);
  Object.keys(t).forEach(typeDefName => {
    if (!t[typeDefName].name) {
      customTypesNames.push(typeDefName);
    }
  });
  const mutatedDefinitionsMap = applyMutations({ ...defaultDefinitionsMap
  }, config.definitionResolver);
  customTypesNames.forEach(typeDefName => {
    mutatedDefinitionsMap[typeDefName].name = typeDefName;
  });
  return mutatedDefinitionsMap;
};

exports.loadDefinitions = loadDefinitions;

const resolveDefinition = (definition, ctx, node) => {
  if (!ctx.config.definitionResolver && typeof definition !== 'string') return definition;
  const definitionName = typeof definition === 'string' ? definition : definition.name;
  const resolvedDefinition = ctx.definitions[definitionName] && ctx.definitions[definitionName].resolveType && ctx.definitions[definitionName].resolveType(node) !== ctx.definitions[definitionName].name ? ctx.definitions[ctx.definitions[definitionName].resolveType(node)] : ctx.definitions[definitionName];
  return resolvedDefinition;
};

var _default = resolveDefinition;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvbHZlRGVmaW5pdGlvbi9pbmRleC5qcyJdLCJuYW1lcyI6WyJhcHBseU11dGF0aW9ucyIsImRlZmF1bHREZWZzIiwiZGVmaW5pdGlvblJlZHVjZXIiLCJtdXRhdGVkRGVmaW5pdGlvbnNNYXAiLCJsb2FkRGVmaW5pdGlvbnMiLCJjb25maWciLCJjdXN0b21UeXBlc05hbWVzIiwidCIsImRlZmluaXRpb25SZXNvbHZlciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwidHlwZURlZk5hbWUiLCJuYW1lIiwicHVzaCIsImRlZmF1bHREZWZpbml0aW9uc01hcCIsInJlc29sdmVEZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsImN0eCIsIm5vZGUiLCJkZWZpbml0aW9uTmFtZSIsInJlc29sdmVkRGVmaW5pdGlvbiIsImRlZmluaXRpb25zIiwicmVzb2x2ZVR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBR0EsTUFBTUEsY0FBYyxHQUFHLENBQUNDLFdBQUQsRUFBY0MsaUJBQWQsS0FBb0M7QUFDekQsUUFBTUMscUJBQXFCLEdBQUdELGlCQUFpQixDQUFDRCxXQUFELENBQS9DO0FBQ0EsU0FBT0UscUJBQVA7QUFDRCxDQUhEOztBQUtPLE1BQU1DLGVBQWUsR0FBSUMsTUFBRCxJQUFZO0FBQ3pDLFFBQU1DLGdCQUFnQixHQUFHLEVBQXpCO0FBQ0EsUUFBTUMsQ0FBQyxHQUFHUCxjQUFjLENBQUMsRUFBRCxFQUFLSyxNQUFNLENBQUNHLGtCQUFaLENBQXhCO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxDQUFaLEVBQWVJLE9BQWYsQ0FBd0JDLFdBQUQsSUFBaUI7QUFDdEMsUUFBSSxDQUFDTCxDQUFDLENBQUNLLFdBQUQsQ0FBRCxDQUFlQyxJQUFwQixFQUEwQjtBQUN4QlAsTUFBQUEsZ0JBQWdCLENBQUNRLElBQWpCLENBQXNCRixXQUF0QjtBQUNEO0FBQ0YsR0FKRDtBQU1BLFFBQU1ULHFCQUFxQixHQUFHSCxjQUFjLENBQzFDLEVBQUUsR0FBR2U7QUFBTCxHQUQwQyxFQUNaVixNQUFNLENBQUNHLGtCQURLLENBQTVDO0FBR0FGLEVBQUFBLGdCQUFnQixDQUFDSyxPQUFqQixDQUEwQkMsV0FBRCxJQUFpQjtBQUN4Q1QsSUFBQUEscUJBQXFCLENBQUNTLFdBQUQsQ0FBckIsQ0FBbUNDLElBQW5DLEdBQTBDRCxXQUExQztBQUNELEdBRkQ7QUFHQSxTQUFPVCxxQkFBUDtBQUNELENBaEJNOzs7O0FBbUJQLE1BQU1hLGlCQUFpQixHQUFHLENBQUNDLFVBQUQsRUFBYUMsR0FBYixFQUFrQkMsSUFBbEIsS0FBMkI7QUFDbkQsTUFBSSxDQUFDRCxHQUFHLENBQUNiLE1BQUosQ0FBV0csa0JBQVosSUFBa0MsT0FBT1MsVUFBUCxLQUFzQixRQUE1RCxFQUFzRSxPQUFPQSxVQUFQO0FBQ3RFLFFBQU1HLGNBQWMsR0FBRyxPQUFPSCxVQUFQLEtBQXNCLFFBQXRCLEdBQWlDQSxVQUFqQyxHQUE4Q0EsVUFBVSxDQUFDSixJQUFoRjtBQUVBLFFBQU1RLGtCQUFrQixHQUFHSCxHQUFHLENBQUNJLFdBQUosQ0FBZ0JGLGNBQWhCLEtBQ3BCRixHQUFHLENBQUNJLFdBQUosQ0FBZ0JGLGNBQWhCLEVBQWdDRyxXQURaLElBRXBCTCxHQUFHLENBQUNJLFdBQUosQ0FBZ0JGLGNBQWhCLEVBQWdDRyxXQUFoQyxDQUE0Q0osSUFBNUMsTUFBc0RELEdBQUcsQ0FBQ0ksV0FBSixDQUFnQkYsY0FBaEIsRUFBZ0NQLElBRmxFLEdBR3ZCSyxHQUFHLENBQUNJLFdBQUosQ0FBZ0JKLEdBQUcsQ0FBQ0ksV0FBSixDQUFnQkYsY0FBaEIsRUFBZ0NHLFdBQWhDLENBQTRDSixJQUE1QyxDQUFoQixDQUh1QixHQUl2QkQsR0FBRyxDQUFDSSxXQUFKLENBQWdCRixjQUFoQixDQUpKO0FBTUEsU0FBT0Msa0JBQVA7QUFDRCxDQVhEOztlQWFlTCxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRlZmF1bHREZWZpbml0aW9uc01hcCBmcm9tICcuLi90eXBlcyc7XG5cblxuY29uc3QgYXBwbHlNdXRhdGlvbnMgPSAoZGVmYXVsdERlZnMsIGRlZmluaXRpb25SZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IG11dGF0ZWREZWZpbml0aW9uc01hcCA9IGRlZmluaXRpb25SZWR1Y2VyKGRlZmF1bHREZWZzKTtcbiAgcmV0dXJuIG11dGF0ZWREZWZpbml0aW9uc01hcDtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkRGVmaW5pdGlvbnMgPSAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IGN1c3RvbVR5cGVzTmFtZXMgPSBbXTtcbiAgY29uc3QgdCA9IGFwcGx5TXV0YXRpb25zKHt9LCBjb25maWcuZGVmaW5pdGlvblJlc29sdmVyKTtcbiAgT2JqZWN0LmtleXModCkuZm9yRWFjaCgodHlwZURlZk5hbWUpID0+IHtcbiAgICBpZiAoIXRbdHlwZURlZk5hbWVdLm5hbWUpIHtcbiAgICAgIGN1c3RvbVR5cGVzTmFtZXMucHVzaCh0eXBlRGVmTmFtZSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBtdXRhdGVkRGVmaW5pdGlvbnNNYXAgPSBhcHBseU11dGF0aW9ucyhcbiAgICB7IC4uLmRlZmF1bHREZWZpbml0aW9uc01hcCB9LCBjb25maWcuZGVmaW5pdGlvblJlc29sdmVyLFxuICApO1xuICBjdXN0b21UeXBlc05hbWVzLmZvckVhY2goKHR5cGVEZWZOYW1lKSA9PiB7XG4gICAgbXV0YXRlZERlZmluaXRpb25zTWFwW3R5cGVEZWZOYW1lXS5uYW1lID0gdHlwZURlZk5hbWU7XG4gIH0pO1xuICByZXR1cm4gbXV0YXRlZERlZmluaXRpb25zTWFwO1xufTtcblxuXG5jb25zdCByZXNvbHZlRGVmaW5pdGlvbiA9IChkZWZpbml0aW9uLCBjdHgsIG5vZGUpID0+IHtcbiAgaWYgKCFjdHguY29uZmlnLmRlZmluaXRpb25SZXNvbHZlciAmJiB0eXBlb2YgZGVmaW5pdGlvbiAhPT0gJ3N0cmluZycpIHJldHVybiBkZWZpbml0aW9uO1xuICBjb25zdCBkZWZpbml0aW9uTmFtZSA9IHR5cGVvZiBkZWZpbml0aW9uID09PSAnc3RyaW5nJyA/IGRlZmluaXRpb24gOiBkZWZpbml0aW9uLm5hbWU7XG5cbiAgY29uc3QgcmVzb2x2ZWREZWZpbml0aW9uID0gY3R4LmRlZmluaXRpb25zW2RlZmluaXRpb25OYW1lXVxuICAgICAgJiYgY3R4LmRlZmluaXRpb25zW2RlZmluaXRpb25OYW1lXS5yZXNvbHZlVHlwZVxuICAgICAgJiYgY3R4LmRlZmluaXRpb25zW2RlZmluaXRpb25OYW1lXS5yZXNvbHZlVHlwZShub2RlKSAhPT0gY3R4LmRlZmluaXRpb25zW2RlZmluaXRpb25OYW1lXS5uYW1lXG4gICAgPyBjdHguZGVmaW5pdGlvbnNbY3R4LmRlZmluaXRpb25zW2RlZmluaXRpb25OYW1lXS5yZXNvbHZlVHlwZShub2RlKV1cbiAgICA6IGN0eC5kZWZpbml0aW9uc1tkZWZpbml0aW9uTmFtZV07XG5cbiAgcmV0dXJuIHJlc29sdmVkRGVmaW5pdGlvbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVEZWZpbml0aW9uO1xuIl19