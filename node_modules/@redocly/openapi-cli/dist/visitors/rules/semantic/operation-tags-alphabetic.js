"use strict";

class OperationsTagsAlpabetical {
  static get rule() {
    return 'operations-tags-alpabetical';
  }

  OpenAPIOperation() {
    return {
      onEnter: (node, _, ctx) => {
        if (!node.tags) return [];
        if (!Array.isArray(node.tags)) return [];
        const errors = [];
        ctx.path.push('tags');

        for (let i = 0; i < node.tags.length - 1; i++) {
          if (node.tags[i] > node.tags[i + 1]) {
            errors.push(ctx.createError('The operations\' tags array should be in alphabetical order', 'key'));
          }
        }

        ctx.path.pop();
        return errors;
      }
    };
  }

}

module.exports = OperationsTagsAlpabetical;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zZW1hbnRpYy9vcGVyYXRpb24tdGFncy1hbHBoYWJldGljLmpzIl0sIm5hbWVzIjpbIk9wZXJhdGlvbnNUYWdzQWxwYWJldGljYWwiLCJydWxlIiwiT3BlbkFQSU9wZXJhdGlvbiIsIm9uRW50ZXIiLCJub2RlIiwiXyIsImN0eCIsInRhZ3MiLCJBcnJheSIsImlzQXJyYXkiLCJlcnJvcnMiLCJwYXRoIiwicHVzaCIsImkiLCJsZW5ndGgiLCJjcmVhdGVFcnJvciIsInBvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEseUJBQU4sQ0FBZ0M7QUFDOUIsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLDZCQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLGdCQUFnQixHQUFHO0FBQ2pCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxFQUFVQyxHQUFWLEtBQWtCO0FBQ3pCLFlBQUksQ0FBQ0YsSUFBSSxDQUFDRyxJQUFWLEVBQWdCLE9BQU8sRUFBUDtBQUNoQixZQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjTCxJQUFJLENBQUNHLElBQW5CLENBQUwsRUFBK0IsT0FBTyxFQUFQO0FBRS9CLGNBQU1HLE1BQU0sR0FBRyxFQUFmO0FBQ0FKLFFBQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTQyxJQUFULENBQWMsTUFBZDs7QUFDQSxhQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdULElBQUksQ0FBQ0csSUFBTCxDQUFVTyxNQUFWLEdBQW1CLENBQXZDLEVBQTBDRCxDQUFDLEVBQTNDLEVBQStDO0FBQzdDLGNBQUlULElBQUksQ0FBQ0csSUFBTCxDQUFVTSxDQUFWLElBQWVULElBQUksQ0FBQ0csSUFBTCxDQUFVTSxDQUFDLEdBQUcsQ0FBZCxDQUFuQixFQUFxQztBQUNuQ0gsWUFBQUEsTUFBTSxDQUFDRSxJQUFQLENBQVlOLEdBQUcsQ0FBQ1MsV0FBSixDQUFnQiw2REFBaEIsRUFBK0UsS0FBL0UsQ0FBWjtBQUNEO0FBQ0Y7O0FBQ0RULFFBQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTSyxHQUFUO0FBQ0EsZUFBT04sTUFBUDtBQUNEO0FBZEksS0FBUDtBQWdCRDs7QUF0QjZCOztBQXlCaENPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmxCLHlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE9wZXJhdGlvbnNUYWdzQWxwYWJldGljYWwge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvcGVyYXRpb25zLXRhZ3MtYWxwYWJldGljYWwnO1xuICB9XG5cbiAgT3BlbkFQSU9wZXJhdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIF8sIGN0eCkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUudGFncykgcmV0dXJuIFtdO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobm9kZS50YWdzKSkgcmV0dXJuIFtdO1xuXG4gICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgICBjdHgucGF0aC5wdXNoKCd0YWdzJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS50YWdzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgIGlmIChub2RlLnRhZ3NbaV0gPiBub2RlLnRhZ3NbaSArIDFdKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChjdHguY3JlYXRlRXJyb3IoJ1RoZSBvcGVyYXRpb25zXFwnIHRhZ3MgYXJyYXkgc2hvdWxkIGJlIGluIGFscGhhYmV0aWNhbCBvcmRlcicsICdrZXknKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5wYXRoLnBvcCgpO1xuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT3BlcmF0aW9uc1RhZ3NBbHBhYmV0aWNhbDtcbiJdfQ==