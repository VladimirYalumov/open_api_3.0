"use strict";

var _OpenAPIOperation = _interopRequireDefault(require("../../../types/OpenAPIOperation"));

var _OpenAPIPath = _interopRequireDefault(require("../../../types/OpenAPIPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class UniqueParameterNames {
  static get rule() {
    return 'unique-parameter-names';
  }

  constructor(config) {
    this.config = config;
    this.currentOperationParameters = [];
    this.currentPathParameters = [];
  }

  OpenAPIComponents() {
    return {
      onExit: () => {
        this.currentOperationParameters = [];
        this.currentPathParameters = [];
      }
    };
  }

  OpenAPIOperation() {
    return {
      onExit: () => {
        this.currentOperationParameters = [];
      }
    };
  }

  OpenAPIPath() {
    return {
      onExit: () => {
        this.currentPathParameters = [];
      }
    };
  }

  OpenAPIParameter() {
    return {
      onEnter: (node, _, ctx) => {
        let error;
        let paramsList = [];

        if (ctx.definitionStack.includes(_OpenAPIOperation.default)) {
          paramsList = this.currentOperationParameters;
        } else if (ctx.definitionStack.includes(_OpenAPIPath.default)) {
          paramsList = this.currentPathParameters;
        } else {
          return [];
        }

        if (node.name && paramsList.includes(node.name)) {
          ctx.path.push('name');
          error = ctx.createError('Duplicate parameters are not allowed. This name is already used on this level.', 'value');
          ctx.path.pop();
        }

        if (node.name) {
          paramsList.push(node.name);
        }

        return error ? [error] : [];
      }
    };
  }

}

module.exports = UniqueParameterNames;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zZW1hbnRpYy91bmlxdWVQYXJhbWV0ZXJOYW1lcy5qcyJdLCJuYW1lcyI6WyJVbmlxdWVQYXJhbWV0ZXJOYW1lcyIsInJ1bGUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImN1cnJlbnRPcGVyYXRpb25QYXJhbWV0ZXJzIiwiY3VycmVudFBhdGhQYXJhbWV0ZXJzIiwiT3BlbkFQSUNvbXBvbmVudHMiLCJvbkV4aXQiLCJPcGVuQVBJT3BlcmF0aW9uIiwiT3BlbkFQSVBhdGgiLCJPcGVuQVBJUGFyYW1ldGVyIiwib25FbnRlciIsIm5vZGUiLCJfIiwiY3R4IiwiZXJyb3IiLCJwYXJhbXNMaXN0IiwiZGVmaW5pdGlvblN0YWNrIiwiaW5jbHVkZXMiLCJuYW1lIiwicGF0aCIsInB1c2giLCJjcmVhdGVFcnJvciIsInBvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxvQkFBTixDQUEyQjtBQUN6QixhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sd0JBQVA7QUFDRDs7QUFFREMsRUFBQUEsV0FBVyxDQUFDQyxNQUFELEVBQVM7QUFDbEIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsMEJBQUwsR0FBa0MsRUFBbEM7QUFDQSxTQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNEOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQixXQUFPO0FBQ0xDLE1BQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osYUFBS0gsMEJBQUwsR0FBa0MsRUFBbEM7QUFDQSxhQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNEO0FBSkksS0FBUDtBQU1EOztBQUVERyxFQUFBQSxnQkFBZ0IsR0FBRztBQUNqQixXQUFPO0FBQ0xELE1BQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osYUFBS0gsMEJBQUwsR0FBa0MsRUFBbEM7QUFDRDtBQUhJLEtBQVA7QUFLRDs7QUFFREssRUFBQUEsV0FBVyxHQUFHO0FBQ1osV0FBTztBQUNMRixNQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNaLGFBQUtGLHFCQUFMLEdBQTZCLEVBQTdCO0FBQ0Q7QUFISSxLQUFQO0FBS0Q7O0FBRURLLEVBQUFBLGdCQUFnQixHQUFHO0FBQ2pCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxFQUFVQyxHQUFWLEtBQWtCO0FBQ3pCLFlBQUlDLEtBQUo7QUFFQSxZQUFJQyxVQUFVLEdBQUcsRUFBakI7O0FBRUEsWUFBSUYsR0FBRyxDQUFDRyxlQUFKLENBQW9CQyxRQUFwQixDQUE2QlYseUJBQTdCLENBQUosRUFBb0Q7QUFDbERRLFVBQUFBLFVBQVUsR0FBRyxLQUFLWiwwQkFBbEI7QUFDRCxTQUZELE1BRU8sSUFBSVUsR0FBRyxDQUFDRyxlQUFKLENBQW9CQyxRQUFwQixDQUE2QlQsb0JBQTdCLENBQUosRUFBK0M7QUFDcERPLFVBQUFBLFVBQVUsR0FBRyxLQUFLWCxxQkFBbEI7QUFDRCxTQUZNLE1BRUE7QUFDTCxpQkFBTyxFQUFQO0FBQ0Q7O0FBRUQsWUFBSU8sSUFBSSxDQUFDTyxJQUFMLElBQWFILFVBQVUsQ0FBQ0UsUUFBWCxDQUFvQk4sSUFBSSxDQUFDTyxJQUF6QixDQUFqQixFQUFpRDtBQUMvQ0wsVUFBQUEsR0FBRyxDQUFDTSxJQUFKLENBQVNDLElBQVQsQ0FBYyxNQUFkO0FBQ0FOLFVBQUFBLEtBQUssR0FBR0QsR0FBRyxDQUFDUSxXQUFKLENBQWdCLGdGQUFoQixFQUFrRyxPQUFsRyxDQUFSO0FBQ0FSLFVBQUFBLEdBQUcsQ0FBQ00sSUFBSixDQUFTRyxHQUFUO0FBQ0Q7O0FBQ0QsWUFBSVgsSUFBSSxDQUFDTyxJQUFULEVBQWU7QUFDYkgsVUFBQUEsVUFBVSxDQUFDSyxJQUFYLENBQWdCVCxJQUFJLENBQUNPLElBQXJCO0FBQ0Q7O0FBQ0QsZUFBT0osS0FBSyxHQUFHLENBQUNBLEtBQUQsQ0FBSCxHQUFhLEVBQXpCO0FBQ0Q7QUF2QkksS0FBUDtBQXlCRDs7QUE5RHdCOztBQWlFM0JTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnpCLG9CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPcGVuQVBJT3BlcmF0aW9uIGZyb20gJy4uLy4uLy4uL3R5cGVzL09wZW5BUElPcGVyYXRpb24nO1xuaW1wb3J0IE9wZW5BUElQYXRoIGZyb20gJy4uLy4uLy4uL3R5cGVzL09wZW5BUElQYXRoJztcblxuY2xhc3MgVW5pcXVlUGFyYW1ldGVyTmFtZXMge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICd1bmlxdWUtcGFyYW1ldGVyLW5hbWVzJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuY3VycmVudE9wZXJhdGlvblBhcmFtZXRlcnMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYXRoUGFyYW1ldGVycyA9IFtdO1xuICB9XG5cbiAgT3BlbkFQSUNvbXBvbmVudHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRXhpdDogKCkgPT4ge1xuICAgICAgICB0aGlzLmN1cnJlbnRPcGVyYXRpb25QYXJhbWV0ZXJzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudFBhdGhQYXJhbWV0ZXJzID0gW107XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElPcGVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRXhpdDogKCkgPT4ge1xuICAgICAgICB0aGlzLmN1cnJlbnRPcGVyYXRpb25QYXJhbWV0ZXJzID0gW107XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElQYXRoKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkV4aXQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGF0aFBhcmFtZXRlcnMgPSBbXTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgT3BlbkFQSVBhcmFtZXRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIF8sIGN0eCkgPT4ge1xuICAgICAgICBsZXQgZXJyb3I7XG5cbiAgICAgICAgbGV0IHBhcmFtc0xpc3QgPSBbXTtcblxuICAgICAgICBpZiAoY3R4LmRlZmluaXRpb25TdGFjay5pbmNsdWRlcyhPcGVuQVBJT3BlcmF0aW9uKSkge1xuICAgICAgICAgIHBhcmFtc0xpc3QgPSB0aGlzLmN1cnJlbnRPcGVyYXRpb25QYXJhbWV0ZXJzO1xuICAgICAgICB9IGVsc2UgaWYgKGN0eC5kZWZpbml0aW9uU3RhY2suaW5jbHVkZXMoT3BlbkFQSVBhdGgpKSB7XG4gICAgICAgICAgcGFyYW1zTGlzdCA9IHRoaXMuY3VycmVudFBhdGhQYXJhbWV0ZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlLm5hbWUgJiYgcGFyYW1zTGlzdC5pbmNsdWRlcyhub2RlLm5hbWUpKSB7XG4gICAgICAgICAgY3R4LnBhdGgucHVzaCgnbmFtZScpO1xuICAgICAgICAgIGVycm9yID0gY3R4LmNyZWF0ZUVycm9yKCdEdXBsaWNhdGUgcGFyYW1ldGVycyBhcmUgbm90IGFsbG93ZWQuIFRoaXMgbmFtZSBpcyBhbHJlYWR5IHVzZWQgb24gdGhpcyBsZXZlbC4nLCAndmFsdWUnKTtcbiAgICAgICAgICBjdHgucGF0aC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5uYW1lKSB7XG4gICAgICAgICAgcGFyYW1zTGlzdC5wdXNoKG5vZGUubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycm9yID8gW2Vycm9yXSA6IFtdO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVW5pcXVlUGFyYW1ldGVyTmFtZXM7XG4iXX0=