"use strict";

class ValidateImplicitOpenAPIFlow {
  static get rule() {
    return 'oas3-schema/implicit-flow';
  }

  get validators() {
    return {
      authorizationUrl(node, ctx) {
        if (!node.authorizationUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('authorizationUrl'), 'key');
        if (typeof node.authorizationUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      refreshUrl(node, ctx) {
        if (node.refreshUrl && typeof node.refreshUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      scopes(node, ctx) {
        if (!node.scopes) return ctx.createError(ctx.messageHelpers.missingRequiredField('scopes'), 'key');
        const wrongFormatMap = Object.keys(node.scopes).filter(scope => typeof scope !== 'string' || typeof node.scopes[scope] !== 'string').length > 0;
        if (wrongFormatMap) return ctx.createError('The scopes field must be a Map[string, string] in the OpenAPI Flow Object', 'value');
        return null;
      }

    };
  }

  ImplicitOpenAPIFlow() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateImplicitOpenAPIFlow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlSW1wbGljaXRPcGVuQVBJRmxvdy5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZUltcGxpY2l0T3BlbkFQSUZsb3ciLCJydWxlIiwidmFsaWRhdG9ycyIsImF1dGhvcml6YXRpb25VcmwiLCJub2RlIiwiY3R4IiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlSGVscGVycyIsIm1pc3NpbmdSZXF1aXJlZEZpZWxkIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwicmVmcmVzaFVybCIsInNjb3BlcyIsIndyb25nRm9ybWF0TWFwIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsInNjb3BlIiwibGVuZ3RoIiwiSW1wbGljaXRPcGVuQVBJRmxvdyIsIm9uRW50ZXIiLCJkZWZpbml0aW9uIiwidmFsaWRhdGVGaWVsZHMiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLDJCQUFOLENBQWtDO0FBQ2hDLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTywyQkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLGdCQUFnQixDQUFDQyxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUMxQixZQUFJLENBQUNELElBQUksQ0FBQ0QsZ0JBQVYsRUFBNEIsT0FBT0UsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJDLG9CQUFuQixDQUF3QyxrQkFBeEMsQ0FBaEIsRUFBNkUsS0FBN0UsQ0FBUDtBQUM1QixZQUFJLE9BQU9KLElBQUksQ0FBQ0QsZ0JBQVosS0FBaUMsUUFBckMsRUFBK0MsT0FBT0UsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQy9DLGVBQU8sSUFBUDtBQUNELE9BTEk7O0FBTUxDLE1BQUFBLFVBQVUsQ0FBQ04sSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDcEIsWUFBSUQsSUFBSSxDQUFDTSxVQUFMLElBQW1CLE9BQU9OLElBQUksQ0FBQ00sVUFBWixLQUEyQixRQUFsRCxFQUE0RCxPQUFPTCxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDNUQsZUFBTyxJQUFQO0FBQ0QsT0FUSTs7QUFVTEUsTUFBQUEsTUFBTSxDQUFDUCxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNoQixZQUFJLENBQUNELElBQUksQ0FBQ08sTUFBVixFQUFrQixPQUFPTixHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsb0JBQW5CLENBQXdDLFFBQXhDLENBQWhCLEVBQW1FLEtBQW5FLENBQVA7QUFDbEIsY0FBTUksY0FBYyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWVYsSUFBSSxDQUFDTyxNQUFqQixFQUNwQkksTUFEb0IsQ0FDWkMsS0FBRCxJQUFXLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsT0FBT1osSUFBSSxDQUFDTyxNQUFMLENBQVlLLEtBQVosQ0FBUCxLQUE4QixRQUR6RCxFQUVwQkMsTUFGb0IsR0FFWCxDQUZaO0FBR0EsWUFBSUwsY0FBSixFQUFvQixPQUFPUCxHQUFHLENBQUNDLFdBQUosQ0FBZ0IsMkVBQWhCLEVBQTZGLE9BQTdGLENBQVA7QUFDcEIsZUFBTyxJQUFQO0FBQ0Q7O0FBakJJLEtBQVA7QUFtQkQ7O0FBRURZLEVBQUFBLG1CQUFtQixHQUFHO0FBQ3BCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNmLElBQUQsRUFBT2dCLFVBQVAsRUFBbUJmLEdBQW5CLEtBQTJCQSxHQUFHLENBQUNnQixjQUFKLENBQ2xDLEtBQUtDLE1BRDZCLEVBQ3JCLEtBQUtyQixJQURnQixFQUNWLEtBQUtDLFVBREs7QUFEL0IsS0FBUDtBQUtEOztBQWpDK0I7O0FBb0NsQ3FCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLDJCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFZhbGlkYXRlSW1wbGljaXRPcGVuQVBJRmxvdyB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ29hczMtc2NoZW1hL2ltcGxpY2l0LWZsb3cnO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF1dGhvcml6YXRpb25Vcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZS5hdXRob3JpemF0aW9uVXJsKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5taXNzaW5nUmVxdWlyZWRGaWVsZCgnYXV0aG9yaXphdGlvblVybCcpLCAna2V5Jyk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5hdXRob3JpemF0aW9uVXJsICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hVcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlLnJlZnJlc2hVcmwgJiYgdHlwZW9mIG5vZGUucmVmcmVzaFVybCAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzY29wZXMobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZS5zY29wZXMpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm1pc3NpbmdSZXF1aXJlZEZpZWxkKCdzY29wZXMnKSwgJ2tleScpO1xuICAgICAgICBjb25zdCB3cm9uZ0Zvcm1hdE1hcCA9IE9iamVjdC5rZXlzKG5vZGUuc2NvcGVzKVxuICAgICAgICAgIC5maWx0ZXIoKHNjb3BlKSA9PiB0eXBlb2Ygc2NvcGUgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlLnNjb3Blc1tzY29wZV0gIT09ICdzdHJpbmcnKVxuICAgICAgICAgIC5sZW5ndGggPiAwO1xuICAgICAgICBpZiAod3JvbmdGb3JtYXRNYXApIHJldHVybiBjdHguY3JlYXRlRXJyb3IoJ1RoZSBzY29wZXMgZmllbGQgbXVzdCBiZSBhIE1hcFtzdHJpbmcsIHN0cmluZ10gaW4gdGhlIE9wZW5BUEkgRmxvdyBPYmplY3QnLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBJbXBsaWNpdE9wZW5BUElGbG93KCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4KSA9PiBjdHgudmFsaWRhdGVGaWVsZHMoXG4gICAgICAgIHRoaXMuY29uZmlnLCB0aGlzLnJ1bGUsIHRoaXMudmFsaWRhdG9ycyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRlSW1wbGljaXRPcGVuQVBJRmxvdztcbiJdfQ==