"use strict";

class ValidatePasswordOpenAPIFlow {
  static get rule() {
    return 'oas3-schema/password-flow';
  }

  get validators() {
    return {
      tokenUrl(node, ctx) {
        if (!node.tokenUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('tokenUrl'), 'key');
        if (typeof node.tokenUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      refreshUrl(node, ctx) {
        if (node.refreshUrl && typeof node.refreshUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      scopes(node, ctx) {
        const wrongFormatMap = Object.keys(node.scopes).filter(scope => typeof scope !== 'string' || typeof node.scopes[scope] !== 'string').length > 0;
        if (wrongFormatMap) return ctx.createError('The scopes field must be a Map[string, string] in the OpenAPI Flow Object', 'value');
        return null;
      }

    };
  }

  PasswordOpenAPIFlow() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidatePasswordOpenAPIFlow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlUGFzc3dvcmRPcGVuQVBJRmxvdy5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZVBhc3N3b3JkT3BlbkFQSUZsb3ciLCJydWxlIiwidmFsaWRhdG9ycyIsInRva2VuVXJsIiwibm9kZSIsImN0eCIsImNyZWF0ZUVycm9yIiwibWVzc2FnZUhlbHBlcnMiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZCIsImZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciIsInJlZnJlc2hVcmwiLCJzY29wZXMiLCJ3cm9uZ0Zvcm1hdE1hcCIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJzY29wZSIsImxlbmd0aCIsIlBhc3N3b3JkT3BlbkFQSUZsb3ciLCJvbkVudGVyIiwiZGVmaW5pdGlvbiIsInZhbGlkYXRlRmllbGRzIiwiY29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSwyQkFBTixDQUFrQztBQUNoQyxhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sMkJBQVA7QUFDRDs7QUFFRCxNQUFJQyxVQUFKLEdBQWlCO0FBQ2YsV0FBTztBQUNMQyxNQUFBQSxRQUFRLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ2xCLFlBQUksQ0FBQ0QsSUFBSSxDQUFDRCxRQUFWLEVBQW9CLE9BQU9FLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyxvQkFBbkIsQ0FBd0MsVUFBeEMsQ0FBaEIsRUFBcUUsS0FBckUsQ0FBUDtBQUNwQixZQUFJLE9BQU9KLElBQUksQ0FBQ0QsUUFBWixLQUF5QixRQUE3QixFQUF1QyxPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDdkMsZUFBTyxJQUFQO0FBQ0QsT0FMSTs7QUFNTEMsTUFBQUEsVUFBVSxDQUFDTixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNwQixZQUFJRCxJQUFJLENBQUNNLFVBQUwsSUFBbUIsT0FBT04sSUFBSSxDQUFDTSxVQUFaLEtBQTJCLFFBQWxELEVBQTRELE9BQU9MLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CRSw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUM1RCxlQUFPLElBQVA7QUFDRCxPQVRJOztBQVVMRSxNQUFBQSxNQUFNLENBQUNQLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ2hCLGNBQU1PLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlWLElBQUksQ0FBQ08sTUFBakIsRUFDcEJJLE1BRG9CLENBQ1pDLEtBQUQsSUFBVyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLElBQTZCLE9BQU9aLElBQUksQ0FBQ08sTUFBTCxDQUFZSyxLQUFaLENBQVAsS0FBOEIsUUFEekQsRUFFcEJDLE1BRm9CLEdBRVgsQ0FGWjtBQUdBLFlBQUlMLGNBQUosRUFBb0IsT0FBT1AsR0FBRyxDQUFDQyxXQUFKLENBQWdCLDJFQUFoQixFQUE2RixPQUE3RixDQUFQO0FBQ3BCLGVBQU8sSUFBUDtBQUNEOztBQWhCSSxLQUFQO0FBa0JEOztBQUVEWSxFQUFBQSxtQkFBbUIsR0FBRztBQUNwQixXQUFPO0FBQ0xDLE1BQUFBLE9BQU8sRUFBRSxDQUFDZixJQUFELEVBQU9nQixVQUFQLEVBQW1CZixHQUFuQixLQUEyQkEsR0FBRyxDQUFDZ0IsY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLckIsSUFEZ0IsRUFDVixLQUFLQyxVQURLO0FBRC9CLEtBQVA7QUFLRDs7QUFoQytCOztBQW1DbENxQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QiwyQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBWYWxpZGF0ZVBhc3N3b3JkT3BlbkFQSUZsb3cge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMzLXNjaGVtYS9wYXNzd29yZC1mbG93JztcbiAgfVxuXG4gIGdldCB2YWxpZGF0b3JzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlblVybChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlLnRva2VuVXJsKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5taXNzaW5nUmVxdWlyZWRGaWVsZCgndG9rZW5VcmwnKSwgJ2tleScpO1xuICAgICAgICBpZiAodHlwZW9mIG5vZGUudG9rZW5VcmwgIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgcmVmcmVzaFVybChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUucmVmcmVzaFVybCAmJiB0eXBlb2Ygbm9kZS5yZWZyZXNoVXJsICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHNjb3Blcyhub2RlLCBjdHgpIHtcbiAgICAgICAgY29uc3Qgd3JvbmdGb3JtYXRNYXAgPSBPYmplY3Qua2V5cyhub2RlLnNjb3BlcylcbiAgICAgICAgICAuZmlsdGVyKChzY29wZSkgPT4gdHlwZW9mIHNjb3BlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZS5zY29wZXNbc2NvcGVdICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAubGVuZ3RoID4gMDtcbiAgICAgICAgaWYgKHdyb25nRm9ybWF0TWFwKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKCdUaGUgc2NvcGVzIGZpZWxkIG11c3QgYmUgYSBNYXBbc3RyaW5nLCBzdHJpbmddIGluIHRoZSBPcGVuQVBJIEZsb3cgT2JqZWN0JywgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgUGFzc3dvcmRPcGVuQVBJRmxvdygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIGRlZmluaXRpb24sIGN0eCkgPT4gY3R4LnZhbGlkYXRlRmllbGRzKFxuICAgICAgICB0aGlzLmNvbmZpZywgdGhpcy5ydWxlLCB0aGlzLnZhbGlkYXRvcnMsXG4gICAgICApLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0ZVBhc3N3b3JkT3BlbkFQSUZsb3c7XG4iXX0=