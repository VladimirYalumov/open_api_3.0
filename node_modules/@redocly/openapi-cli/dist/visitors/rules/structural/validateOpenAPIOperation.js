"use strict";

class ValidateOpenAPIOperation {
  static get rule() {
    return 'oas3-schema/operation';
  }

  get validators() {
    return {
      tags(node, ctx) {
        if (!node || !node.tags) return null;
        const errors = [];

        if (node && node.tags && !Array.isArray(node.tags)) {
          return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('array'), 'value');
        }

        for (let i = 0; i < node.tags.length; i++) {
          if (typeof node.tags[i] !== 'string') {
            ctx.path.push(i);
            errors.push(ctx.createError('Items of the tags array must be strings in the OpenAPI Operation object.', 'value'));
            ctx.path.pop();
          }
        }

        return errors;
      },

      summary(node, ctx) {
        if (node && node.summary && typeof node.summary !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      description(node, ctx) {
        if (node && node.description && typeof node.description !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      operationId(node, ctx) {
        if (node && node.operationId && typeof node.operationId !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      responses: (node, ctx) => !node.responses ? ctx.createError(ctx.messageHelpers.missingRequiredField('responses'), 'key') : null,

      deprecated(node, ctx) {
        if (node && node.deprecated && typeof node.deprecated !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      }

    };
  }

  OpenAPIOperation() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSU9wZXJhdGlvbi5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZU9wZW5BUElPcGVyYXRpb24iLCJydWxlIiwidmFsaWRhdG9ycyIsInRhZ3MiLCJub2RlIiwiY3R4IiwiZXJyb3JzIiwiQXJyYXkiLCJpc0FycmF5IiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlSGVscGVycyIsImZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciIsImkiLCJsZW5ndGgiLCJwYXRoIiwicHVzaCIsInBvcCIsInN1bW1hcnkiLCJkZXNjcmlwdGlvbiIsIm9wZXJhdGlvbklkIiwicmVzcG9uc2VzIiwibWlzc2luZ1JlcXVpcmVkRmllbGQiLCJkZXByZWNhdGVkIiwiT3BlbkFQSU9wZXJhdGlvbiIsIm9uRW50ZXIiLCJkZWZpbml0aW9uIiwidmFsaWRhdGVGaWVsZHMiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLHdCQUFOLENBQStCO0FBQzdCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyx1QkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLElBQUksQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDZCxZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNELElBQW5CLEVBQXlCLE9BQU8sSUFBUDtBQUV6QixjQUFNRyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxZQUFJRixJQUFJLElBQUlBLElBQUksQ0FBQ0QsSUFBYixJQUFxQixDQUFDSSxLQUFLLENBQUNDLE9BQU4sQ0FBY0osSUFBSSxDQUFDRCxJQUFuQixDQUExQixFQUFvRDtBQUNsRCxpQkFBT0UsR0FBRyxDQUFDSSxXQUFKLENBQWdCSixHQUFHLENBQUNLLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxPQUFs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O0FBS0Q7O0FBcEQ0Qjs7QUF1RC9CMEIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isd0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmFsaWRhdGVPcGVuQVBJT3BlcmF0aW9uIHtcbiAgc3RhdGljIGdldCBydWxlKCkge1xuICAgIHJldHVybiAnb2FzMy1zY2hlbWEvb3BlcmF0aW9uJztcbiAgfVxuXG4gIGdldCB2YWxpZGF0b3JzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0YWdzKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAoIW5vZGUgfHwgIW5vZGUudGFncykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS50YWdzICYmICFBcnJheS5pc0FycmF5KG5vZGUudGFncykpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ2FycmF5JyksICd2YWx1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5vZGUudGFnc1tpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGN0eC5wYXRoLnB1c2goaSk7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChjdHguY3JlYXRlRXJyb3IoJ0l0ZW1zIG9mIHRoZSB0YWdzIGFycmF5IG11c3QgYmUgc3RyaW5ncyBpbiB0aGUgT3BlbkFQSSBPcGVyYXRpb24gb2JqZWN0LicsICd2YWx1ZScpKTtcbiAgICAgICAgICAgIGN0eC5wYXRoLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICB9LFxuICAgICAgc3VtbWFyeShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5zdW1tYXJ5ICYmIHR5cGVvZiBub2RlLnN1bW1hcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb24obm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZGVzY3JpcHRpb24gJiYgdHlwZW9mIG5vZGUuZGVzY3JpcHRpb24gIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgb3BlcmF0aW9uSWQobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUub3BlcmF0aW9uSWQgJiYgdHlwZW9mIG5vZGUub3BlcmF0aW9uSWQgIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2VzOiAobm9kZSwgY3R4KSA9PiAoIW5vZGUucmVzcG9uc2VzID8gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5taXNzaW5nUmVxdWlyZWRGaWVsZCgncmVzcG9uc2VzJyksICdrZXknKSA6IG51bGwpLFxuICAgICAgZGVwcmVjYXRlZChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5kZXByZWNhdGVkICYmIHR5cGVvZiBub2RlLmRlcHJlY2F0ZWQgIT09ICdib29sZWFuJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgT3BlbkFQSU9wZXJhdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIGRlZmluaXRpb24sIGN0eCkgPT4gY3R4LnZhbGlkYXRlRmllbGRzKFxuICAgICAgICB0aGlzLmNvbmZpZywgdGhpcy5ydWxlLCB0aGlzLnZhbGlkYXRvcnMsXG4gICAgICApLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0ZU9wZW5BUElPcGVyYXRpb247XG4iXX0=