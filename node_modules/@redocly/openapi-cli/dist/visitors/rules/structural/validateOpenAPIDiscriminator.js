"use strict";

class ValidateOpenAPIDiscriminator {
  static get rule() {
    return 'oas3-schema/discriminator';
  }

  get validators() {
    return {
      propertyName(node, ctx) {
        if (!(node && node.propertyName)) return ctx.createError(ctx.messageHelpers.missingRequiredField('propertyName'), 'key');
        if (typeof node.propertyName !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      mapping(node, ctx) {
        if (node && node.mapping && typeof node.mapping !== 'object') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('Map[string, string]'), 'value');
        if (node && node.mapping && Object.keys(node.mapping).filter(key => typeof node.mapping[key] !== 'string').length !== 0) return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('Map[string, string]'), 'value');
        return null;
      }

    };
  }

  OpenAPIDiscriminator() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIDiscriminator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSURpc2NyaW1pbmF0b3IuanMiXSwibmFtZXMiOlsiVmFsaWRhdGVPcGVuQVBJRGlzY3JpbWluYXRvciIsInJ1bGUiLCJ2YWxpZGF0b3JzIiwicHJvcGVydHlOYW1lIiwibm9kZSIsImN0eCIsImNyZWF0ZUVycm9yIiwibWVzc2FnZUhlbHBlcnMiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZCIsImZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciIsIm1hcHBpbmciLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwibGVuZ3RoIiwiT3BlbkFQSURpc2NyaW1pbmF0b3IiLCJvbkVudGVyIiwiZGVmaW5pdGlvbiIsInZhbGlkYXRlRmllbGRzIiwiY29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSw0QkFBTixDQUFtQztBQUNqQyxhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sMkJBQVA7QUFDRDs7QUFFRCxNQUFJQyxVQUFKLEdBQWlCO0FBQ2YsV0FBTztBQUNMQyxNQUFBQSxZQUFZLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ3RCLFlBQUksRUFBRUQsSUFBSSxJQUFJQSxJQUFJLENBQUNELFlBQWYsQ0FBSixFQUFrQyxPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsb0JBQW5CLENBQXdDLGNBQXhDLENBQWhCLEVBQXlFLEtBQXpFLENBQVA7QUFDbEMsWUFBSSxPQUFPSixJQUFJLENBQUNELFlBQVosS0FBNkIsUUFBakMsRUFBMkMsT0FBT0UsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQzNDLGVBQU8sSUFBUDtBQUNELE9BTEk7O0FBTUxDLE1BQUFBLE9BQU8sQ0FBQ04sSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDakIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE9BQWIsSUFBd0IsT0FBT04sSUFBSSxDQUFDTSxPQUFaLEtBQXdCLFFBQXBELEVBQThELE9BQU9MLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CRSw4QkFBbkIsQ0FBa0QscUJBQWxELENBQWhCLEVBQTBGLE9BQTFGLENBQVA7QUFDOUQsWUFBSUwsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE9BQWIsSUFBd0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUixJQUFJLENBQUNNLE9BQWpCLEVBQTBCRyxNQUExQixDQUFrQ0MsR0FBRCxJQUFTLE9BQU9WLElBQUksQ0FBQ00sT0FBTCxDQUFhSSxHQUFiLENBQVAsS0FBNkIsUUFBdkUsRUFBaUZDLE1BQWpGLEtBQTRGLENBQXhILEVBQTJILE9BQU9WLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CRSw4QkFBbkIsQ0FBa0QscUJBQWxELENBQWhCLEVBQTBGLE9BQTFGLENBQVA7QUFDM0gsZUFBTyxJQUFQO0FBQ0Q7O0FBVkksS0FBUDtBQVlEOztBQUVETyxFQUFBQSxvQkFBb0IsR0FBRztBQUNyQixXQUFPO0FBQ0xDLE1BQUFBLE9BQU8sRUFBRSxDQUFDYixJQUFELEVBQU9jLFVBQVAsRUFBbUJiLEdBQW5CLEtBQTJCQSxHQUFHLENBQUNjLGNBQUosQ0FDbEMsS0FBS0MsTUFENkIsRUFDckIsS0FBS25CLElBRGdCLEVBQ1YsS0FBS0MsVUFESztBQUQvQixLQUFQO0FBS0Q7O0FBMUJnQzs7QUE2Qm5DbUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsNEJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmFsaWRhdGVPcGVuQVBJRGlzY3JpbWluYXRvciB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ29hczMtc2NoZW1hL2Rpc2NyaW1pbmF0b3InO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3BlcnR5TmFtZShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCEobm9kZSAmJiBub2RlLnByb3BlcnR5TmFtZSkpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm1pc3NpbmdSZXF1aXJlZEZpZWxkKCdwcm9wZXJ0eU5hbWUnKSwgJ2tleScpO1xuICAgICAgICBpZiAodHlwZW9mIG5vZGUucHJvcGVydHlOYW1lICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIG1hcHBpbmcobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUubWFwcGluZyAmJiB0eXBlb2Ygbm9kZS5tYXBwaW5nICE9PSAnb2JqZWN0JykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdNYXBbc3RyaW5nLCBzdHJpbmddJyksICd2YWx1ZScpO1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLm1hcHBpbmcgJiYgT2JqZWN0LmtleXMobm9kZS5tYXBwaW5nKS5maWx0ZXIoKGtleSkgPT4gdHlwZW9mIG5vZGUubWFwcGluZ1trZXldICE9PSAnc3RyaW5nJykubGVuZ3RoICE9PSAwKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ01hcFtzdHJpbmcsIHN0cmluZ10nKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgT3BlbkFQSURpc2NyaW1pbmF0b3IoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlLCBkZWZpbml0aW9uLCBjdHgpID0+IGN0eC52YWxpZGF0ZUZpZWxkcyhcbiAgICAgICAgdGhpcy5jb25maWcsIHRoaXMucnVsZSwgdGhpcy52YWxpZGF0b3JzLFxuICAgICAgKSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGVPcGVuQVBJRGlzY3JpbWluYXRvcjtcbiJdfQ==