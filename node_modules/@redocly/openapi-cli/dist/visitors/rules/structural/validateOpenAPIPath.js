"use strict";

class ValidateOpenAPIPath {
  static get rule() {
    return 'oas3-schema/path';
  }

  get validators() {
    return {
      summary(node, ctx) {
        return node && node.summary && typeof node.summary !== 'string' ? ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value') : null;
      },

      description(node, ctx) {
        return node && node.description && typeof node.description !== 'string' ? ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value') : null;
      },

      servers(node, ctx) {
        return node && node.servers && !Array.isArray(node.servers) ? ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('array'), 'value') : null;
      },

      parameters(node, ctx) {
        if (!node || !node.parameters) return null;

        if (!Array.isArray(node.parameters)) {
          return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('array'), 'value');
        }

        if (new Set(node.parameters).size !== node.parameters.length) {
          return ctx.createError('parameters must be unique in the Path Item object', 'value');
        }

        return null;
      }

    };
  }

  OpenAPIPath() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSVBhdGguanMiXSwibmFtZXMiOlsiVmFsaWRhdGVPcGVuQVBJUGF0aCIsInJ1bGUiLCJ2YWxpZGF0b3JzIiwic3VtbWFyeSIsIm5vZGUiLCJjdHgiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2VIZWxwZXJzIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwiZGVzY3JpcHRpb24iLCJzZXJ2ZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwicGFyYW1ldGVycyIsIlNldCIsInNpemUiLCJsZW5ndGgiLCJPcGVuQVBJUGF0aCIsIm9uRW50ZXIiLCJkZWZpbml0aW9uIiwidmFsaWRhdGVGaWVsZHMiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLG1CQUFOLENBQTBCO0FBQ3hCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyxrQkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDakIsZUFBT0QsSUFBSSxJQUFJQSxJQUFJLENBQUNELE9BQWIsSUFBd0IsT0FBT0MsSUFBSSxDQUFDRCxPQUFaLEtBQXdCLFFBQWhELEdBQ0hFLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FERyxHQUNxRixJQUQ1RjtBQUVELE9BSkk7O0FBS0xDLE1BQUFBLFdBQVcsQ0FBQ0wsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDckIsZUFBT0QsSUFBSSxJQUFJQSxJQUFJLENBQUNLLFdBQWIsSUFBNEIsT0FBT0wsSUFBSSxDQUFDSyxXQUFaLEtBQTRCLFFBQXhELEdBQ0hKLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FERyxHQUNxRixJQUQ1RjtBQUVELE9BUkk7O0FBU0xFLE1BQUFBLE9BQU8sQ0FBQ04sSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDakIsZUFBT0QsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE9BQWIsSUFBd0IsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFOLENBQWNSLElBQUksQ0FBQ00sT0FBbkIsQ0FBekIsR0FDSEwsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxPQUFsRCxDQUFoQixFQUE0RSxPQUE1RSxDQURHLEdBQ29GLElBRDNGO0FBRUQsT0FaSTs7QUFhTEssTUFBQUEsVUFBVSxDQUFDVCxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNwQixZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNTLFVBQW5CLEVBQStCLE9BQU8sSUFBUDs7QUFDL0IsWUFBSSxDQUFDRixLQUFLLENBQUNDLE9BQU4sQ0FBY1IsSUFBSSxDQUFDUyxVQUFuQixDQUFMLEVBQXFDO0FBQ25DLGlCQUFPUixHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsOEJBQW5CLENBQWtELE9BQWxELENBQWhCLEVBQTRFLE9BQTVFLENBQVA7QUFDRDs7QUFDRCxZQUFLLElBQUlNLEdBQUosQ0FBUVYsSUFBSSxDQUFDUyxVQUFiLENBQUQsQ0FBMkJFLElBQTNCLEtBQW9DWCxJQUFJLENBQUNTLFVBQUwsQ0FBZ0JHLE1BQXhELEVBQWdFO0FBQzlELGlCQUFPWCxHQUFHLENBQUNDLFdBQUosQ0FBZ0IsbURBQWhCLEVBQXFFLE9BQXJFLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRDs7QUF0QkksS0FBUDtBQXdCRDs7QUFFRFcsRUFBQUEsV0FBVyxHQUFHO0FBQ1osV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ2QsSUFBRCxFQUFPZSxVQUFQLEVBQW1CZCxHQUFuQixLQUEyQkEsR0FBRyxDQUFDZSxjQUFKLENBQ2xDLEtBQUtDLE1BRDZCLEVBQ3JCLEtBQUtwQixJQURnQixFQUNWLEtBQUtDLFVBREs7QUFEL0IsS0FBUDtBQUtEOztBQXRDdUI7O0FBeUMxQm9CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLG1CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFZhbGlkYXRlT3BlbkFQSVBhdGgge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMzLXNjaGVtYS9wYXRoJztcbiAgfVxuXG4gIGdldCB2YWxpZGF0b3JzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdW1tYXJ5KG5vZGUsIGN0eCkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnN1bW1hcnkgJiYgdHlwZW9mIG5vZGUuc3VtbWFyeSAhPT0gJ3N0cmluZydcbiAgICAgICAgICA/IGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJykgOiBudWxsO1xuICAgICAgfSxcbiAgICAgIGRlc2NyaXB0aW9uKG5vZGUsIGN0eCkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLmRlc2NyaXB0aW9uICYmIHR5cGVvZiBub2RlLmRlc2NyaXB0aW9uICE9PSAnc3RyaW5nJ1xuICAgICAgICAgID8gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgc2VydmVycyhub2RlLCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5zZXJ2ZXJzICYmICFBcnJheS5pc0FycmF5KG5vZGUuc2VydmVycylcbiAgICAgICAgICA/IGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdhcnJheScpLCAndmFsdWUnKSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVycyhub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLnBhcmFtZXRlcnMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobm9kZS5wYXJhbWV0ZXJzKSkge1xuICAgICAgICAgIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYXJyYXknKSwgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChuZXcgU2V0KG5vZGUucGFyYW1ldGVycykpLnNpemUgIT09IG5vZGUucGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKCdwYXJhbWV0ZXJzIG11c3QgYmUgdW5pcXVlIGluIHRoZSBQYXRoIEl0ZW0gb2JqZWN0JywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBPcGVuQVBJUGF0aCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIGRlZmluaXRpb24sIGN0eCkgPT4gY3R4LnZhbGlkYXRlRmllbGRzKFxuICAgICAgICB0aGlzLmNvbmZpZywgdGhpcy5ydWxlLCB0aGlzLnZhbGlkYXRvcnMsXG4gICAgICApLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0ZU9wZW5BUElQYXRoO1xuIl19