"use strict";

class ValidateOpenAPIEncoding {
  static get rule() {
    return 'oas3-schema/encoding';
  }

  get validators() {
    return {
      contentType(node, ctx) {
        if (node && node.contentType && typeof node.contentType !== 'string') {
          ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        }

        return null;
      },

      style(node, ctx) {
        if (node && node.style && typeof node.style !== 'string') {
          ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        }

        return null;
      },

      explode(node, ctx) {
        if (node && node.explode && typeof node.explode !== 'boolean') {
          ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        }

        return null;
      },

      allowReserved(node, ctx) {
        if (node && node.allowReserved && typeof node.allowReserved !== 'boolean') {
          ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        }

        return null;
      }

    };
  }

  OpenAPIEncoding() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIEncoding;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSUVuY29kaW5nLmpzIl0sIm5hbWVzIjpbIlZhbGlkYXRlT3BlbkFQSUVuY29kaW5nIiwicnVsZSIsInZhbGlkYXRvcnMiLCJjb250ZW50VHlwZSIsIm5vZGUiLCJjdHgiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2VIZWxwZXJzIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwic3R5bGUiLCJleHBsb2RlIiwiYWxsb3dSZXNlcnZlZCIsIk9wZW5BUElFbmNvZGluZyIsIm9uRW50ZXIiLCJkZWZpbml0aW9uIiwidmFsaWRhdGVGaWVsZHMiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLHVCQUFOLENBQThCO0FBQzVCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyxzQkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDckIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNELFdBQWIsSUFBNEIsT0FBT0MsSUFBSSxDQUFDRCxXQUFaLEtBQTRCLFFBQTVELEVBQXNFO0FBQ3BFRSxVQUFBQSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0QsT0FOSTs7QUFPTEMsTUFBQUEsS0FBSyxDQUFDTCxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNmLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDSyxLQUFiLElBQXNCLE9BQU9MLElBQUksQ0FBQ0ssS0FBWixLQUFzQixRQUFoRCxFQUEwRDtBQUN4REosVUFBQUEsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RTtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNELE9BWkk7O0FBYUxFLE1BQUFBLE9BQU8sQ0FBQ04sSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDakIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE9BQWIsSUFBd0IsT0FBT04sSUFBSSxDQUFDTSxPQUFaLEtBQXdCLFNBQXBELEVBQStEO0FBQzdETCxVQUFBQSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsOEJBQW5CLENBQWtELFNBQWxELENBQWhCLEVBQThFLE9BQTlFO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0QsT0FsQkk7O0FBbUJMRyxNQUFBQSxhQUFhLENBQUNQLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ3ZCLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDTyxhQUFiLElBQThCLE9BQU9QLElBQUksQ0FBQ08sYUFBWixLQUE4QixTQUFoRSxFQUEyRTtBQUN6RU4sVUFBQUEsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxTQUFsRCxDQUFoQixFQUE4RSxPQUE5RTtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNEOztBQXhCSSxLQUFQO0FBMEJEOztBQUVESSxFQUFBQSxlQUFlLEdBQUc7QUFDaEIsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ1QsSUFBRCxFQUFPVSxVQUFQLEVBQW1CVCxHQUFuQixLQUEyQkEsR0FBRyxDQUFDVSxjQUFKLENBQ2xDLEtBQUtDLE1BRDZCLEVBQ3JCLEtBQUtmLElBRGdCLEVBQ1YsS0FBS0MsVUFESztBQUQvQixLQUFQO0FBS0Q7O0FBeEMyQjs7QUEyQzlCZSxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQix1QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBWYWxpZGF0ZU9wZW5BUElFbmNvZGluZyB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ29hczMtc2NoZW1hL2VuY29kaW5nJztcbiAgfVxuXG4gIGdldCB2YWxpZGF0b3JzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50VHlwZShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5jb250ZW50VHlwZSAmJiB0eXBlb2Ygbm9kZS5jb250ZW50VHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHN0eWxlKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLnN0eWxlICYmIHR5cGVvZiBub2RlLnN0eWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgZXhwbG9kZShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5leHBsb2RlICYmIHR5cGVvZiBub2RlLmV4cGxvZGUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdib29sZWFuJyksICd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGFsbG93UmVzZXJ2ZWQobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuYWxsb3dSZXNlcnZlZCAmJiB0eXBlb2Ygbm9kZS5hbGxvd1Jlc2VydmVkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYm9vbGVhbicpLCAndmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElFbmNvZGluZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIGRlZmluaXRpb24sIGN0eCkgPT4gY3R4LnZhbGlkYXRlRmllbGRzKFxuICAgICAgICB0aGlzLmNvbmZpZywgdGhpcy5ydWxlLCB0aGlzLnZhbGlkYXRvcnMsXG4gICAgICApLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0ZU9wZW5BUElFbmNvZGluZztcbiJdfQ==