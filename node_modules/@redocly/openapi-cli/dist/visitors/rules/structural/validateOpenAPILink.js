"use strict";

class ValidateOpenAPILink {
  static get rule() {
    return 'oas3-schema/link';
  }

  get validators() {
    return {
      operationRef(node, ctx) {
        if (!node || !node.operationRef) return null;
        if (node.operationRef && node.operationId) return ctx.createError(ctx.messageHelpers.mutuallyExclusiveFieldsMessageHelper(['operationRef', 'operationId']), 'key');
        if (typeof node.operationRef !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      operationId(node, ctx) {
        if (!node || !node.operationId) return null;
        if (node.operationRef && node.operationId) return ctx.createError(ctx.messageHelpers.mutuallyExclusiveFieldsMessageHelper(['operationId', 'operationRef']), 'key');
        if (typeof node.operationId !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      parameters(node, ctx) {
        if (!node || !node.parameters) return null;

        if (Object.keys(node.parameters).filter(key => typeof key !== 'string').length > 0) {
          return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('Map[string, any]'), 'value');
        }

        return null;
      },

      description(node, ctx) {
        if (!node || !node.description) return null;

        if (typeof node.description !== 'string') {
          return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        }

        return null;
      }

    };
  }

  OpenAPILink() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPILink;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSUxpbmsuanMiXSwibmFtZXMiOlsiVmFsaWRhdGVPcGVuQVBJTGluayIsInJ1bGUiLCJ2YWxpZGF0b3JzIiwib3BlcmF0aW9uUmVmIiwibm9kZSIsImN0eCIsIm9wZXJhdGlvbklkIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlSGVscGVycyIsIm11dHVhbGx5RXhjbHVzaXZlRmllbGRzTWVzc2FnZUhlbHBlciIsImZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciIsInBhcmFtZXRlcnMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwibGVuZ3RoIiwiZGVzY3JpcHRpb24iLCJPcGVuQVBJTGluayIsIm9uRW50ZXIiLCJkZWZpbml0aW9uIiwidmFsaWRhdGVGaWVsZHMiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLG1CQUFOLENBQTBCO0FBQ3hCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyxrQkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLFlBQVksQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDdEIsWUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDRCxZQUFuQixFQUFpQyxPQUFPLElBQVA7QUFDakMsWUFBSUMsSUFBSSxDQUFDRCxZQUFMLElBQXFCQyxJQUFJLENBQUNFLFdBQTlCLEVBQTJDLE9BQU9ELEdBQUcsQ0FBQ0UsV0FBSixDQUFnQkYsR0FBRyxDQUFDRyxjQUFKLENBQW1CQyxvQ0FBbkIsQ0FBd0QsQ0FBQyxjQUFELEVBQWlCLGFBQWpCLENBQXhELENBQWhCLEVBQTBHLEtBQTFHLENBQVA7QUFDM0MsWUFBSSxPQUFPTCxJQUFJLENBQUNELFlBQVosS0FBNkIsUUFBakMsRUFBMkMsT0FBT0UsR0FBRyxDQUFDRSxXQUFKLENBQWdCRixHQUFHLENBQUNHLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQzNDLGVBQU8sSUFBUDtBQUNELE9BTkk7O0FBT0xKLE1BQUFBLFdBQVcsQ0FBQ0YsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDckIsWUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDRSxXQUFuQixFQUFnQyxPQUFPLElBQVA7QUFDaEMsWUFBSUYsSUFBSSxDQUFDRCxZQUFMLElBQXFCQyxJQUFJLENBQUNFLFdBQTlCLEVBQTJDLE9BQU9ELEdBQUcsQ0FBQ0UsV0FBSixDQUFnQkYsR0FBRyxDQUFDRyxjQUFKLENBQW1CQyxvQ0FBbkIsQ0FBd0QsQ0FBQyxhQUFELEVBQWdCLGNBQWhCLENBQXhELENBQWhCLEVBQTBHLEtBQTFHLENBQVA7QUFDM0MsWUFBSSxPQUFPTCxJQUFJLENBQUNFLFdBQVosS0FBNEIsUUFBaEMsRUFBMEMsT0FBT0QsR0FBRyxDQUFDRSxXQUFKLENBQWdCRixHQUFHLENBQUNHLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQzFDLGVBQU8sSUFBUDtBQUNELE9BWkk7O0FBYUxDLE1BQUFBLFVBQVUsQ0FBQ1AsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDcEIsWUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDTyxVQUFuQixFQUErQixPQUFPLElBQVA7O0FBQy9CLFlBQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxJQUFJLENBQUNPLFVBQWpCLEVBQTZCRyxNQUE3QixDQUFxQ0MsR0FBRCxJQUFTLE9BQU9BLEdBQVAsS0FBZSxRQUE1RCxFQUFzRUMsTUFBdEUsR0FBK0UsQ0FBbkYsRUFBc0Y7QUFDcEYsaUJBQU9YLEdBQUcsQ0FBQ0UsV0FBSixDQUFnQkYsR0FBRyxDQUFDRyxjQUFKLENBQW1CRSw4QkFBbkIsQ0FBa0Qsa0JBQWxELENBQWhCLEVBQXVGLE9BQXZGLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQW5CSTs7QUFvQkxPLE1BQUFBLFdBQVcsQ0FBQ2IsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDckIsWUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDYSxXQUFuQixFQUFnQyxPQUFPLElBQVA7O0FBQ2hDLFlBQUksT0FBT2IsSUFBSSxDQUFDYSxXQUFaLEtBQTRCLFFBQWhDLEVBQTBDO0FBQ3hDLGlCQUFPWixHQUFHLENBQUNFLFdBQUosQ0FBZ0JGLEdBQUcsQ0FBQ0csY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRDs7QUExQkksS0FBUDtBQTRCRDs7QUFFRFEsRUFBQUEsV0FBVyxHQUFHO0FBQ1osV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ2YsSUFBRCxFQUFPZ0IsVUFBUCxFQUFtQmYsR0FBbkIsS0FBMkJBLEdBQUcsQ0FBQ2dCLGNBQUosQ0FDbEMsS0FBS0MsTUFENkIsRUFDckIsS0FBS3JCLElBRGdCLEVBQ1YsS0FBS0MsVUFESztBQUQvQixLQUFQO0FBS0Q7O0FBMUN1Qjs7QUE2QzFCcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsbUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmFsaWRhdGVPcGVuQVBJTGluayB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ29hczMtc2NoZW1hL2xpbmsnO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZXJhdGlvblJlZihub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLm9wZXJhdGlvblJlZikgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChub2RlLm9wZXJhdGlvblJlZiAmJiBub2RlLm9wZXJhdGlvbklkKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5tdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc01lc3NhZ2VIZWxwZXIoWydvcGVyYXRpb25SZWYnLCAnb3BlcmF0aW9uSWQnXSksICdrZXknKTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLm9wZXJhdGlvblJlZiAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBvcGVyYXRpb25JZChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLm9wZXJhdGlvbklkKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKG5vZGUub3BlcmF0aW9uUmVmICYmIG5vZGUub3BlcmF0aW9uSWQpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm11dHVhbGx5RXhjbHVzaXZlRmllbGRzTWVzc2FnZUhlbHBlcihbJ29wZXJhdGlvbklkJywgJ29wZXJhdGlvblJlZiddKSwgJ2tleScpO1xuICAgICAgICBpZiAodHlwZW9mIG5vZGUub3BlcmF0aW9uSWQgIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVycyhub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLnBhcmFtZXRlcnMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMobm9kZS5wYXJhbWV0ZXJzKS5maWx0ZXIoKGtleSkgPT4gdHlwZW9mIGtleSAhPT0gJ3N0cmluZycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ01hcFtzdHJpbmcsIGFueV0nKSwgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb24obm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZSB8fCAhbm9kZS5kZXNjcmlwdGlvbikgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5kZXNjcmlwdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElMaW5rKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4KSA9PiBjdHgudmFsaWRhdGVGaWVsZHMoXG4gICAgICAgIHRoaXMuY29uZmlnLCB0aGlzLnJ1bGUsIHRoaXMudmFsaWRhdG9ycyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRlT3BlbkFQSUxpbms7XG4iXX0=