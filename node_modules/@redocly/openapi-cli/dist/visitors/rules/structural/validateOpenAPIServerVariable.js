"use strict";

class ValidateOpenAPIServerVariable {
  static get rule() {
    return 'oas3-schema/server-variable';
  }

  get validators() {
    return {
      default(node, ctx) {
        if (!node || !node.default) return ctx.createError(ctx.messageHelpers.missingRequiredField('default'), 'key');
        if (typeof node.default !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      description(node, ctx) {
        return node && node.description && typeof node.description !== 'string' ? ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value') : null;
      },

      enum(node, ctx) {
        if (node && node.enum) {
          if (!Array.isArray(node.enum)) return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('array'), 'value');
          if (node.type && node.enum.filter(item => typeof item !== 'string').length !== 0) return ctx.createError('All values of "enum" field must be strings', 'value');
        }

        return null;
      }

    };
  }

  OpenAPIServerVariable() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIServerVariable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSVNlcnZlclZhcmlhYmxlLmpzIl0sIm5hbWVzIjpbIlZhbGlkYXRlT3BlbkFQSVNlcnZlclZhcmlhYmxlIiwicnVsZSIsInZhbGlkYXRvcnMiLCJkZWZhdWx0Iiwibm9kZSIsImN0eCIsImNyZWF0ZUVycm9yIiwibWVzc2FnZUhlbHBlcnMiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZCIsImZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciIsImRlc2NyaXB0aW9uIiwiZW51bSIsIkFycmF5IiwiaXNBcnJheSIsInR5cGUiLCJmaWx0ZXIiLCJpdGVtIiwibGVuZ3RoIiwiT3BlbkFQSVNlcnZlclZhcmlhYmxlIiwib25FbnRlciIsImRlZmluaXRpb24iLCJ2YWxpZGF0ZUZpZWxkcyIsImNvbmZpZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsNkJBQU4sQ0FBb0M7QUFDbEMsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLDZCQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsVUFBSixHQUFpQjtBQUNmLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNqQixZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNELE9BQW5CLEVBQTRCLE9BQU9FLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyxvQkFBbkIsQ0FBd0MsU0FBeEMsQ0FBaEIsRUFBb0UsS0FBcEUsQ0FBUDtBQUM1QixZQUFJLE9BQU9KLElBQUksQ0FBQ0QsT0FBWixLQUF3QixRQUE1QixFQUFzQyxPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDdEMsZUFBTyxJQUFQO0FBQ0QsT0FMSTs7QUFNTEMsTUFBQUEsV0FBVyxDQUFDTixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNyQixlQUFPRCxJQUFJLElBQUlBLElBQUksQ0FBQ00sV0FBYixJQUE0QixPQUFPTixJQUFJLENBQUNNLFdBQVosS0FBNEIsUUFBeEQsR0FDSEwsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQURHLEdBQ3FGLElBRDVGO0FBRUQsT0FUSTs7QUFVTEUsTUFBQUEsSUFBSSxDQUFDUCxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNkLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDTyxJQUFqQixFQUF1QjtBQUNyQixjQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjVCxJQUFJLENBQUNPLElBQW5CLENBQUwsRUFBK0IsT0FBT04sR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxPQUFsRCxDQUFoQixFQUE0RSxPQUE1RSxDQUFQO0FBQy9CLGNBQUlMLElBQUksQ0FBQ1UsSUFBTCxJQUFhVixJQUFJLENBQUNPLElBQUwsQ0FBVUksTUFBVixDQUFrQkMsSUFBRCxJQUFVLE9BQU9BLElBQVAsS0FBZ0IsUUFBM0MsRUFBcURDLE1BQXJELEtBQWdFLENBQWpGLEVBQW9GLE9BQU9aLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQiw0Q0FBaEIsRUFBOEQsT0FBOUQsQ0FBUDtBQUNyRjs7QUFDRCxlQUFPLElBQVA7QUFDRDs7QUFoQkksS0FBUDtBQWtCRDs7QUFFRFksRUFBQUEscUJBQXFCLEdBQUc7QUFDdEIsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ2YsSUFBRCxFQUFPZ0IsVUFBUCxFQUFtQmYsR0FBbkIsS0FBMkJBLEdBQUcsQ0FBQ2dCLGNBQUosQ0FDbEMsS0FBS0MsTUFENkIsRUFDckIsS0FBS3JCLElBRGdCLEVBQ1YsS0FBS0MsVUFESztBQUQvQixLQUFQO0FBS0Q7O0FBaENpQzs7QUFtQ3BDcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsNkJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmFsaWRhdGVPcGVuQVBJU2VydmVyVmFyaWFibGUge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMzLXNjaGVtYS9zZXJ2ZXItdmFyaWFibGUnO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHQobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZSB8fCAhbm9kZS5kZWZhdWx0KSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5taXNzaW5nUmVxdWlyZWRGaWVsZCgnZGVmYXVsdCcpLCAna2V5Jyk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5kZWZhdWx0ICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGRlc2NyaXB0aW9uKG5vZGUsIGN0eCkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLmRlc2NyaXB0aW9uICYmIHR5cGVvZiBub2RlLmRlc2NyaXB0aW9uICE9PSAnc3RyaW5nJ1xuICAgICAgICAgID8gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgZW51bShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5lbnVtKSB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGUuZW51bSkpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYXJyYXknKSwgJ3ZhbHVlJyk7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZSAmJiBub2RlLmVudW0uZmlsdGVyKChpdGVtKSA9PiB0eXBlb2YgaXRlbSAhPT0gJ3N0cmluZycpLmxlbmd0aCAhPT0gMCkgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcignQWxsIHZhbHVlcyBvZiBcImVudW1cIiBmaWVsZCBtdXN0IGJlIHN0cmluZ3MnLCAndmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElTZXJ2ZXJWYXJpYWJsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKG5vZGUsIGRlZmluaXRpb24sIGN0eCkgPT4gY3R4LnZhbGlkYXRlRmllbGRzKFxuICAgICAgICB0aGlzLmNvbmZpZywgdGhpcy5ydWxlLCB0aGlzLnZhbGlkYXRvcnMsXG4gICAgICApLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0ZU9wZW5BUElTZXJ2ZXJWYXJpYWJsZTtcbiJdfQ==