"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _OpenAPIDiscriminator = require("../../../types/OpenAPIDiscriminator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NoRefSiblings {
  static get rule() {
    return 'no-$ref-siblings';
  }

  any() {
    return {
      onEnter: (node, definition, ctx, unresolvedNode) => {
        const errors = [];
        if (!unresolvedNode || typeof unresolvedNode !== 'object') return errors;
        const nodeKeys = Object.keys(unresolvedNode);
        if (nodeKeys.indexOf('$ref') === -1) return errors;

        if (nodeKeys.length > 1) {
          const tempPath = {
            path: ctx.path,
            filePath: ctx.filePath,
            source: ctx.source
          };
          const prevPathItem = ctx.pathStack[ctx.pathStack.length - 1];
          ctx.path = prevPathItem.path;
          ctx.filePath = prevPathItem.file;
          ctx.source = prevPathItem.source;

          for (let i = 0; i < nodeKeys.length; i++) {
            if (nodeKeys[i] !== '$ref' && nodeKeys[i] !== _OpenAPIDiscriminator.MAPPING_DATA_KEY) {
              ctx.path.push(nodeKeys[i]);
              const e = ctx.createError('No siblings are allowed inside object with $ref property.', 'key');
              errors.push(e);
              ctx.path.pop();
            }
          }

          ctx.source = tempPath.source;
          ctx.path = tempPath.path;
          ctx.filePath = tempPath.filePath;
        }

        return errors;
      }
    };
  }

}

module.exports = NoRefSiblings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL25vUmVmU2libGluZ3MuanMiXSwibmFtZXMiOlsiTm9SZWZTaWJsaW5ncyIsInJ1bGUiLCJhbnkiLCJvbkVudGVyIiwibm9kZSIsImRlZmluaXRpb24iLCJjdHgiLCJ1bnJlc29sdmVkTm9kZSIsImVycm9ycyIsIm5vZGVLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4T2YiLCJsZW5ndGgiLCJ0ZW1wUGF0aCIsInBhdGgiLCJmaWxlUGF0aCIsInNvdXJjZSIsInByZXZQYXRoSXRlbSIsInBhdGhTdGFjayIsImZpbGUiLCJpIiwiTUFQUElOR19EQVRBX0tFWSIsInB1c2giLCJlIiwiY3JlYXRlRXJyb3IiLCJwb3AiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsYUFBTixDQUFvQjtBQUNsQixhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sa0JBQVA7QUFDRDs7QUFFREMsRUFBQUEsR0FBRyxHQUFHO0FBQ0osV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQW1CQyxHQUFuQixFQUF3QkMsY0FBeEIsS0FBMkM7QUFDbEQsY0FBTUMsTUFBTSxHQUFHLEVBQWY7QUFFQSxZQUFJLENBQUNELGNBQUQsSUFBbUIsT0FBT0EsY0FBUCxLQUEwQixRQUFqRCxFQUEyRCxPQUFPQyxNQUFQO0FBRTNELGNBQU1DLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlKLGNBQVosQ0FBakI7QUFDQSxZQUFJRSxRQUFRLENBQUNHLE9BQVQsQ0FBaUIsTUFBakIsTUFBNkIsQ0FBQyxDQUFsQyxFQUFxQyxPQUFPSixNQUFQOztBQUVyQyxZQUFJQyxRQUFRLENBQUNJLE1BQVQsR0FBa0IsQ0FBdEIsRUFBeUI7QUFDdkIsZ0JBQU1DLFFBQVEsR0FBRztBQUNmQyxZQUFBQSxJQUFJLEVBQUVULEdBQUcsQ0FBQ1MsSUFESztBQUVmQyxZQUFBQSxRQUFRLEVBQUVWLEdBQUcsQ0FBQ1UsUUFGQztBQUdmQyxZQUFBQSxNQUFNLEVBQUVYLEdBQUcsQ0FBQ1c7QUFIRyxXQUFqQjtBQU1BLGdCQUFNQyxZQUFZLEdBQUdaLEdBQUcsQ0FBQ2EsU0FBSixDQUFjYixHQUFHLENBQUNhLFNBQUosQ0FBY04sTUFBZCxHQUF1QixDQUFyQyxDQUFyQjtBQUVBUCxVQUFBQSxHQUFHLENBQUNTLElBQUosR0FBV0csWUFBWSxDQUFDSCxJQUF4QjtBQUNBVCxVQUFBQSxHQUFHLENBQUNVLFFBQUosR0FBZUUsWUFBWSxDQUFDRSxJQUE1QjtBQUNBZCxVQUFBQSxHQUFHLENBQUNXLE1BQUosR0FBYUMsWUFBWSxDQUFDRCxNQUExQjs7QUFFQSxlQUFLLElBQUlJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdaLFFBQVEsQ0FBQ0ksTUFBN0IsRUFBcUNRLENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsZ0JBQUlaLFFBQVEsQ0FBQ1ksQ0FBRCxDQUFSLEtBQWdCLE1BQWhCLElBQTBCWixRQUFRLENBQUNZLENBQUQsQ0FBUixLQUFnQkMsc0NBQTlDLEVBQWdFO0FBQzlEaEIsY0FBQUEsR0FBRyxDQUFDUyxJQUFKLENBQVNRLElBQVQsQ0FBY2QsUUFBUSxDQUFDWSxDQUFELENBQXRCO0FBQ0Esb0JBQU1HLENBQUMsR0FBR2xCLEdBQUcsQ0FBQ21CLFdBQUosQ0FDUiwyREFEUSxFQUVSLEtBRlEsQ0FBVjtBQUlBakIsY0FBQUEsTUFBTSxDQUFDZSxJQUFQLENBQVlDLENBQVo7QUFDQWxCLGNBQUFBLEdBQUcsQ0FBQ1MsSUFBSixDQUFTVyxHQUFUO0FBQ0Q7QUFDRjs7QUFFRHBCLFVBQUFBLEdBQUcsQ0FBQ1csTUFBSixHQUFhSCxRQUFRLENBQUNHLE1BQXRCO0FBQ0FYLFVBQUFBLEdBQUcsQ0FBQ1MsSUFBSixHQUFXRCxRQUFRLENBQUNDLElBQXBCO0FBQ0FULFVBQUFBLEdBQUcsQ0FBQ1UsUUFBSixHQUFlRixRQUFRLENBQUNFLFFBQXhCO0FBQ0Q7O0FBRUQsZUFBT1IsTUFBUDtBQUNEO0FBeENJLEtBQVA7QUEwQ0Q7O0FBaERpQjs7QUFtRHBCbUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCNUIsYUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgTUFQUElOR19EQVRBX0tFWSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL09wZW5BUElEaXNjcmltaW5hdG9yJztcblxuY2xhc3MgTm9SZWZTaWJsaW5ncyB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ25vLSRyZWYtc2libGluZ3MnO1xuICB9XG5cbiAgYW55KCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4LCB1bnJlc29sdmVkTm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgICAgICBpZiAoIXVucmVzb2x2ZWROb2RlIHx8IHR5cGVvZiB1bnJlc29sdmVkTm9kZSAhPT0gJ29iamVjdCcpIHJldHVybiBlcnJvcnM7XG5cbiAgICAgICAgY29uc3Qgbm9kZUtleXMgPSBPYmplY3Qua2V5cyh1bnJlc29sdmVkTm9kZSk7XG4gICAgICAgIGlmIChub2RlS2V5cy5pbmRleE9mKCckcmVmJykgPT09IC0xKSByZXR1cm4gZXJyb3JzO1xuXG4gICAgICAgIGlmIChub2RlS2V5cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29uc3QgdGVtcFBhdGggPSB7XG4gICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgIGZpbGVQYXRoOiBjdHguZmlsZVBhdGgsXG4gICAgICAgICAgICBzb3VyY2U6IGN0eC5zb3VyY2UsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IHByZXZQYXRoSXRlbSA9IGN0eC5wYXRoU3RhY2tbY3R4LnBhdGhTdGFjay5sZW5ndGggLSAxXTtcblxuICAgICAgICAgIGN0eC5wYXRoID0gcHJldlBhdGhJdGVtLnBhdGg7XG4gICAgICAgICAgY3R4LmZpbGVQYXRoID0gcHJldlBhdGhJdGVtLmZpbGU7XG4gICAgICAgICAgY3R4LnNvdXJjZSA9IHByZXZQYXRoSXRlbS5zb3VyY2U7XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobm9kZUtleXNbaV0gIT09ICckcmVmJyAmJiBub2RlS2V5c1tpXSAhPT0gTUFQUElOR19EQVRBX0tFWSkge1xuICAgICAgICAgICAgICBjdHgucGF0aC5wdXNoKG5vZGVLZXlzW2ldKTtcbiAgICAgICAgICAgICAgY29uc3QgZSA9IGN0eC5jcmVhdGVFcnJvcihcbiAgICAgICAgICAgICAgICAnTm8gc2libGluZ3MgYXJlIGFsbG93ZWQgaW5zaWRlIG9iamVjdCB3aXRoICRyZWYgcHJvcGVydHkuJyxcbiAgICAgICAgICAgICAgICAna2V5JyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgICAgICAgIGN0eC5wYXRoLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGN0eC5zb3VyY2UgPSB0ZW1wUGF0aC5zb3VyY2U7XG4gICAgICAgICAgY3R4LnBhdGggPSB0ZW1wUGF0aC5wYXRoO1xuICAgICAgICAgIGN0eC5maWxlUGF0aCA9IHRlbXBQYXRoLmZpbGVQYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vUmVmU2libGluZ3M7XG4iXX0=