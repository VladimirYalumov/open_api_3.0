"use strict";

class ValidateClientCredentialsOpenAPIFlow {
  static get rule() {
    return 'oas3-schema/client-creds-flow';
  }

  get validators() {
    return {
      tokenUrl(node, ctx) {
        if (!node.tokenUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('tokenUrl'), 'key');
        if (typeof node.tokenUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      refreshUrl(node, ctx) {
        if (node.refreshUrl && typeof node.refreshUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      scopes(node, ctx) {
        const wrongFormatMap = Object.keys(node.scopes).filter(scope => typeof scope !== 'string' || typeof node.scopes[scope] !== 'string').length > 0;
        if (wrongFormatMap) return ctx.createError('The scopes field must be a Map[string, string] in the OpenAPI Flow Object', 'value');
        return null;
      }

    };
  }

  ClientCredentialsOpenAPIFlow() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateClientCredentialsOpenAPIFlow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlQ2xpZW50Q3JlZGVudGlhbHNPcGVuQVBJRmxvdy5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZUNsaWVudENyZWRlbnRpYWxzT3BlbkFQSUZsb3ciLCJydWxlIiwidmFsaWRhdG9ycyIsInRva2VuVXJsIiwibm9kZSIsImN0eCIsImNyZWF0ZUVycm9yIiwibWVzc2FnZUhlbHBlcnMiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZCIsImZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlciIsInJlZnJlc2hVcmwiLCJzY29wZXMiLCJ3cm9uZ0Zvcm1hdE1hcCIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJzY29wZSIsImxlbmd0aCIsIkNsaWVudENyZWRlbnRpYWxzT3BlbkFQSUZsb3ciLCJvbkVudGVyIiwiZGVmaW5pdGlvbiIsInZhbGlkYXRlRmllbGRzIiwiY29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxvQ0FBTixDQUEyQztBQUN6QyxhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sK0JBQVA7QUFDRDs7QUFFRCxNQUFJQyxVQUFKLEdBQWlCO0FBQ2YsV0FBTztBQUNMQyxNQUFBQSxRQUFRLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ2xCLFlBQUksQ0FBQ0QsSUFBSSxDQUFDRCxRQUFWLEVBQW9CLE9BQU9FLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyxvQkFBbkIsQ0FBd0MsVUFBeEMsQ0FBaEIsRUFBcUUsS0FBckUsQ0FBUDtBQUNwQixZQUFJLE9BQU9KLElBQUksQ0FBQ0QsUUFBWixLQUF5QixRQUE3QixFQUF1QyxPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDdkMsZUFBTyxJQUFQO0FBQ0QsT0FMSTs7QUFNTEMsTUFBQUEsVUFBVSxDQUFDTixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNwQixZQUFJRCxJQUFJLENBQUNNLFVBQUwsSUFBbUIsT0FBT04sSUFBSSxDQUFDTSxVQUFaLEtBQTJCLFFBQWxELEVBQTRELE9BQU9MLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CRSw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUM1RCxlQUFPLElBQVA7QUFDRCxPQVRJOztBQVVMRSxNQUFBQSxNQUFNLENBQUNQLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ2hCLGNBQU1PLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlWLElBQUksQ0FBQ08sTUFBakIsRUFDcEJJLE1BRG9CLENBQ1pDLEtBQUQsSUFBVyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLElBQTZCLE9BQU9aLElBQUksQ0FBQ08sTUFBTCxDQUFZSyxLQUFaLENBQVAsS0FBOEIsUUFEekQsRUFFcEJDLE1BRm9CLEdBRVgsQ0FGWjtBQUdBLFlBQUlMLGNBQUosRUFBb0IsT0FBT1AsR0FBRyxDQUFDQyxXQUFKLENBQWdCLDJFQUFoQixFQUE2RixPQUE3RixDQUFQO0FBQ3BCLGVBQU8sSUFBUDtBQUNEOztBQWhCSSxLQUFQO0FBa0JEOztBQUVEWSxFQUFBQSw0QkFBNEIsR0FBRztBQUM3QixXQUFPO0FBQ0xDLE1BQUFBLE9BQU8sRUFBRSxDQUFDZixJQUFELEVBQU9nQixVQUFQLEVBQW1CZixHQUFuQixLQUEyQkEsR0FBRyxDQUFDZ0IsY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLckIsSUFEZ0IsRUFDVixLQUFLQyxVQURLO0FBRC9CLEtBQVA7QUFLRDs7QUFoQ3dDOztBQW1DM0NxQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixvQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBWYWxpZGF0ZUNsaWVudENyZWRlbnRpYWxzT3BlbkFQSUZsb3cge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMzLXNjaGVtYS9jbGllbnQtY3JlZHMtZmxvdyc7XG4gIH1cblxuICBnZXQgdmFsaWRhdG9ycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5Vcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZS50b2tlblVybCkgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMubWlzc2luZ1JlcXVpcmVkRmllbGQoJ3Rva2VuVXJsJyksICdrZXknKTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLnRva2VuVXJsICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hVcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlLnJlZnJlc2hVcmwgJiYgdHlwZW9mIG5vZGUucmVmcmVzaFVybCAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzY29wZXMobm9kZSwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHdyb25nRm9ybWF0TWFwID0gT2JqZWN0LmtleXMobm9kZS5zY29wZXMpXG4gICAgICAgICAgLmZpbHRlcigoc2NvcGUpID0+IHR5cGVvZiBzY29wZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUuc2NvcGVzW3Njb3BlXSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgLmxlbmd0aCA+IDA7XG4gICAgICAgIGlmICh3cm9uZ0Zvcm1hdE1hcCkgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcignVGhlIHNjb3BlcyBmaWVsZCBtdXN0IGJlIGEgTWFwW3N0cmluZywgc3RyaW5nXSBpbiB0aGUgT3BlbkFQSSBGbG93IE9iamVjdCcsICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIENsaWVudENyZWRlbnRpYWxzT3BlbkFQSUZsb3coKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlLCBkZWZpbml0aW9uLCBjdHgpID0+IGN0eC52YWxpZGF0ZUZpZWxkcyhcbiAgICAgICAgdGhpcy5jb25maWcsIHRoaXMucnVsZSwgdGhpcy52YWxpZGF0b3JzLFxuICAgICAgKSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGVDbGllbnRDcmVkZW50aWFsc09wZW5BUElGbG93O1xuIl19