"use strict";

class ValidateAuthorizationCodeOpenAPIFlow {
  static get rule() {
    return 'oas3-schema/auth-code-flow';
  }

  get validators() {
    return {
      authorizationUrl(node, ctx) {
        if (!node.authorizationUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('authorizationUrl'), 'key');
        if (typeof node.authorizationUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      tokenUrl(node, ctx) {
        if (!node.tokenUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('tokenUrl'), 'key');
        if (typeof node.tokenUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      refreshUrl(node, ctx) {
        if (node.refreshUrl && typeof node.refreshUrl !== 'string') return ctx.createError('The refreshUrl must be a string in the OpenAPI Flow Object', 'value');
        return null;
      },

      scopes(node, ctx) {
        const wrongFormatMap = Object.keys(node.scopes).filter(scope => typeof scope !== 'string' || typeof node.scopes[scope] !== 'string').length > 0;
        if (wrongFormatMap) return ctx.createError('The scopes field must be a Map[string, string] in the OpenAPI Flow Object', 'value');
        return null;
      }

    };
  }

  AuthorizationCodeOpenAPIFlow() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateAuthorizationCodeOpenAPIFlow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlQXV0aG9yaXphdGlvbkNvZGVPcGVuQVBJRmxvdy5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZUF1dGhvcml6YXRpb25Db2RlT3BlbkFQSUZsb3ciLCJydWxlIiwidmFsaWRhdG9ycyIsImF1dGhvcml6YXRpb25VcmwiLCJub2RlIiwiY3R4IiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlSGVscGVycyIsIm1pc3NpbmdSZXF1aXJlZEZpZWxkIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwidG9rZW5VcmwiLCJyZWZyZXNoVXJsIiwic2NvcGVzIiwid3JvbmdGb3JtYXRNYXAiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwic2NvcGUiLCJsZW5ndGgiLCJBdXRob3JpemF0aW9uQ29kZU9wZW5BUElGbG93Iiwib25FbnRlciIsImRlZmluaXRpb24iLCJ2YWxpZGF0ZUZpZWxkcyIsImNvbmZpZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsb0NBQU4sQ0FBMkM7QUFDekMsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLDRCQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsVUFBSixHQUFpQjtBQUNmLFdBQU87QUFDTEMsTUFBQUEsZ0JBQWdCLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQzFCLFlBQUksQ0FBQ0QsSUFBSSxDQUFDRCxnQkFBVixFQUE0QixPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsb0JBQW5CLENBQXdDLGtCQUF4QyxDQUFoQixFQUE2RSxLQUE3RSxDQUFQO0FBQzVCLFlBQUksT0FBT0osSUFBSSxDQUFDRCxnQkFBWixLQUFpQyxRQUFyQyxFQUErQyxPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDL0MsZUFBTyxJQUFQO0FBQ0QsT0FMSTs7QUFNTEMsTUFBQUEsUUFBUSxDQUFDTixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNsQixZQUFJLENBQUNELElBQUksQ0FBQ00sUUFBVixFQUFvQixPQUFPTCxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsb0JBQW5CLENBQXdDLFVBQXhDLENBQWhCLEVBQXFFLEtBQXJFLENBQVA7QUFDcEIsWUFBSSxPQUFPSixJQUFJLENBQUNNLFFBQVosS0FBeUIsUUFBN0IsRUFBdUMsT0FBT0wsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQ3ZDLGVBQU8sSUFBUDtBQUNELE9BVkk7O0FBV0xFLE1BQUFBLFVBQVUsQ0FBQ1AsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDcEIsWUFBSUQsSUFBSSxDQUFDTyxVQUFMLElBQW1CLE9BQU9QLElBQUksQ0FBQ08sVUFBWixLQUEyQixRQUFsRCxFQUE0RCxPQUFPTixHQUFHLENBQUNDLFdBQUosQ0FBZ0IsNERBQWhCLEVBQThFLE9BQTlFLENBQVA7QUFDNUQsZUFBTyxJQUFQO0FBQ0QsT0FkSTs7QUFlTE0sTUFBQUEsTUFBTSxDQUFDUixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNoQixjQUFNUSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWCxJQUFJLENBQUNRLE1BQWpCLEVBQ3BCSSxNQURvQixDQUNaQyxLQUFELElBQVcsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QixPQUFPYixJQUFJLENBQUNRLE1BQUwsQ0FBWUssS0FBWixDQUFQLEtBQThCLFFBRHpELEVBRXBCQyxNQUZvQixHQUVYLENBRlo7QUFHQSxZQUFJTCxjQUFKLEVBQW9CLE9BQU9SLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQiwyRUFBaEIsRUFBNkYsT0FBN0YsQ0FBUDtBQUNwQixlQUFPLElBQVA7QUFDRDs7QUFyQkksS0FBUDtBQXVCRDs7QUFFRGEsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ2hCLElBQUQsRUFBT2lCLFVBQVAsRUFBbUJoQixHQUFuQixLQUEyQkEsR0FBRyxDQUFDaUIsY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLdEIsSUFEZ0IsRUFDVixLQUFLQyxVQURLO0FBRC9CLEtBQVA7QUFLRDs7QUFyQ3dDOztBQXdDM0NzQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixvQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBWYWxpZGF0ZUF1dGhvcml6YXRpb25Db2RlT3BlbkFQSUZsb3cge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMzLXNjaGVtYS9hdXRoLWNvZGUtZmxvdyc7XG4gIH1cblxuICBnZXQgdmFsaWRhdG9ycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0aG9yaXphdGlvblVybChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlLmF1dGhvcml6YXRpb25VcmwpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm1pc3NpbmdSZXF1aXJlZEZpZWxkKCdhdXRob3JpemF0aW9uVXJsJyksICdrZXknKTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLmF1dGhvcml6YXRpb25VcmwgIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgdG9rZW5Vcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZS50b2tlblVybCkgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMubWlzc2luZ1JlcXVpcmVkRmllbGQoJ3Rva2VuVXJsJyksICdrZXknKTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLnRva2VuVXJsICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hVcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlLnJlZnJlc2hVcmwgJiYgdHlwZW9mIG5vZGUucmVmcmVzaFVybCAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoJ1RoZSByZWZyZXNoVXJsIG11c3QgYmUgYSBzdHJpbmcgaW4gdGhlIE9wZW5BUEkgRmxvdyBPYmplY3QnLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgc2NvcGVzKG5vZGUsIGN0eCkge1xuICAgICAgICBjb25zdCB3cm9uZ0Zvcm1hdE1hcCA9IE9iamVjdC5rZXlzKG5vZGUuc2NvcGVzKVxuICAgICAgICAgIC5maWx0ZXIoKHNjb3BlKSA9PiB0eXBlb2Ygc2NvcGUgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlLnNjb3Blc1tzY29wZV0gIT09ICdzdHJpbmcnKVxuICAgICAgICAgIC5sZW5ndGggPiAwO1xuICAgICAgICBpZiAod3JvbmdGb3JtYXRNYXApIHJldHVybiBjdHguY3JlYXRlRXJyb3IoJ1RoZSBzY29wZXMgZmllbGQgbXVzdCBiZSBhIE1hcFtzdHJpbmcsIHN0cmluZ10gaW4gdGhlIE9wZW5BUEkgRmxvdyBPYmplY3QnLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBBdXRob3JpemF0aW9uQ29kZU9wZW5BUElGbG93KCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4KSA9PiBjdHgudmFsaWRhdGVGaWVsZHMoXG4gICAgICAgIHRoaXMuY29uZmlnLCB0aGlzLnJ1bGUsIHRoaXMudmFsaWRhdG9ycyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRlQXV0aG9yaXphdGlvbkNvZGVPcGVuQVBJRmxvdztcbiJdfQ==