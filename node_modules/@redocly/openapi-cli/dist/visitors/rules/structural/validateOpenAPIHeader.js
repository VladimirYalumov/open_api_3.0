"use strict";

class ValidateOpenAPIHeader {
  static get rule() {
    return 'oas3-schema/header';
  }

  get validators() {
    return {
      description(node, ctx) {
        if (node && node.description && typeof node.description !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      required(node, ctx) {
        if (node && node.required && typeof node.required !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');

        if (node && node.in && node.in === 'path' && !(node.required || node.required !== true)) {
          return ctx.createError('If the parameter location is "path", this property is REQUIRED and its value MUST be true.', 'value');
        }

        return null;
      },

      deprecated(node, ctx) {
        if (node && node.deprecated && typeof node.deprecated !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        return null;
      },

      allowEmptyValue(node, ctx) {
        if (node && node.allowEmptyValue && typeof node.allowEmptyValue !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        return null;
      },

      explode(node, ctx) {
        if (node && node.explode && typeof node.explode !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        return null;
      },

      allowReserved(node, ctx) {
        if (node && node.allowReserved && typeof node.allowReserved !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        return null;
      },

      example(node, ctx) {
        if (node.example && node.examples) return ctx.createError(ctx.messageHelpers.mutuallyExclusiveFieldsMessageHelper(['example', 'examples']), 'key');
        return null;
      },

      examples(node, ctx) {
        if (node.example && node.examples) return ctx.createError(ctx.messageHelpers.mutuallyExclusiveFieldsMessageHelper(['examples', 'example']), 'key');
        return null;
      }

    };
  }

  OpenAPIHeader() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSUhlYWRlci5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZU9wZW5BUElIZWFkZXIiLCJydWxlIiwidmFsaWRhdG9ycyIsImRlc2NyaXB0aW9uIiwibm9kZSIsImN0eCIsImNyZWF0ZUVycm9yIiwibWVzc2FnZUhlbHBlcnMiLCJmaWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIiLCJyZXF1aXJlZCIsImluIiwiZGVwcmVjYXRlZCIsImFsbG93RW1wdHlWYWx1ZSIsImV4cGxvZGUiLCJhbGxvd1Jlc2VydmVkIiwiZXhhbXBsZSIsImV4YW1wbGVzIiwibXV0dWFsbHlFeGNsdXNpdmVGaWVsZHNNZXNzYWdlSGVscGVyIiwiT3BlbkFQSUhlYWRlciIsIm9uRW50ZXIiLCJkZWZpbml0aW9uIiwidmFsaWRhdGVGaWVsZHMiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU1BLHFCQUFOLENBQTRCO0FBQzFCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyxvQkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDckIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNELFdBQWIsSUFBNEIsT0FBT0MsSUFBSSxDQUFDRCxXQUFaLEtBQTRCLFFBQTVELEVBQXNFLE9BQU9FLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUN0RSxlQUFPLElBQVA7QUFDRCxPQUpJOztBQUtMQyxNQUFBQSxRQUFRLENBQUNMLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ2xCLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDSyxR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d0QsQ0FBQyxVQUFELEVBQWEsU0FBYixDQUF4RCxDQUFoQixFQUFrRyxLQUFsRyxDQUFQO0FBQ25DLGVBQU8sSUFBUDtBQUNEOztBQW5DSSxLQUFQO0FBcUNEOztBQUVEQyxFQUFBQSxhQUFhLEdBQUc7QUFDZCxXQUFPO0FBQ0xDLE1BQUFBLE9BQU8sRUFBRSxDQUFDZixJQUFELEVBQU9nQixVQUFQLEVBQW1CZixHQUFuQixLQUEyQkEsR0FBRyxDQUFDZ0IsY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLckIsSUFEZ0IsRUFDVixLQUFLQyxVQURLO0FBRC9CLEtBQVA7QUFLRDs7QUFuRHlCOztBQXNENUJxQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixxQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNsYXNzIFZhbGlkYXRlT3BlbkFQSUhlYWRlciB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ29hczMtc2NoZW1hL2hlYWRlcic7XG4gIH1cblxuICBnZXQgdmFsaWRhdG9ycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb24obm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZGVzY3JpcHRpb24gJiYgdHlwZW9mIG5vZGUuZGVzY3JpcHRpb24gIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUucmVxdWlyZWQgJiYgdHlwZW9mIG5vZGUucmVxdWlyZWQgIT09ICdib29sZWFuJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdib29sZWFuJyksICd2YWx1ZScpO1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmluICYmIG5vZGUuaW4gPT09ICdwYXRoJyAmJiAhKG5vZGUucmVxdWlyZWQgfHwgbm9kZS5yZXF1aXJlZCAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKCdJZiB0aGUgcGFyYW1ldGVyIGxvY2F0aW9uIGlzIFwicGF0aFwiLCB0aGlzIHByb3BlcnR5IGlzIFJFUVVJUkVEIGFuZCBpdHMgdmFsdWUgTVVTVCBiZSB0cnVlLicsICd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGRlcHJlY2F0ZWQobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZGVwcmVjYXRlZCAmJiB0eXBlb2Ygbm9kZS5kZXByZWNhdGVkICE9PSAnYm9vbGVhbicpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYm9vbGVhbicpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgYWxsb3dFbXB0eVZhbHVlKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmFsbG93RW1wdHlWYWx1ZSAmJiB0eXBlb2Ygbm9kZS5hbGxvd0VtcHR5VmFsdWUgIT09ICdib29sZWFuJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdib29sZWFuJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBleHBsb2RlKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmV4cGxvZGUgJiYgdHlwZW9mIG5vZGUuZXhwbG9kZSAhPT0gJ2Jvb2xlYW4nKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ2Jvb2xlYW4nKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGFsbG93UmVzZXJ2ZWQobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuYWxsb3dSZXNlcnZlZCAmJiB0eXBlb2Ygbm9kZS5hbGxvd1Jlc2VydmVkICE9PSAnYm9vbGVhbicpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYm9vbGVhbicpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgZXhhbXBsZShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUuZXhhbXBsZSAmJiBub2RlLmV4YW1wbGVzKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5tdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc01lc3NhZ2VIZWxwZXIoWydleGFtcGxlJywgJ2V4YW1wbGVzJ10pLCAna2V5Jyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGV4YW1wbGVzKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZS5leGFtcGxlICYmIG5vZGUuZXhhbXBsZXMpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm11dHVhbGx5RXhjbHVzaXZlRmllbGRzTWVzc2FnZUhlbHBlcihbJ2V4YW1wbGVzJywgJ2V4YW1wbGUnXSksICdrZXknKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBPcGVuQVBJSGVhZGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4KSA9PiBjdHgudmFsaWRhdGVGaWVsZHMoXG4gICAgICAgIHRoaXMuY29uZmlnLCB0aGlzLnJ1bGUsIHRoaXMudmFsaWRhdG9ycyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRlT3BlbkFQSUhlYWRlcjtcbiJdfQ==