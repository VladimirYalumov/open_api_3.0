"use strict";

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _default = require("../error/default");

var _OpenAPISchema = _interopRequireDefault(require("../types/OpenAPISchema"));

var _OpenAPIDiscriminator = require("../types/OpenAPIDiscriminator");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-case-declarations */

/* eslint-disable no-param-reassign */

/* eslint-disable class-methods-use-this */
const getComponentName = (refString, components, componentType, node, ctx) => {
  const errors = [];
  refString = refString.replace('#/', '/');

  const itemNameBase = _path.default.basename(refString, _path.default.extname(refString));

  const pathParts = _path.default.dirname(refString).split('/');

  const componentsGroup = components[componentType];
  if (!componentsGroup) return {
    name: itemNameBase,
    errors
  };
  let name = itemNameBase;
  let i = pathParts.length - 1;

  while (componentsGroup[name] && !(0, _lodash.default)(componentsGroup[name], node) && i >= 0) {
    const prevName = name;
    name = `${pathParts[i]}_${itemNameBase}`;
    errors.push(ctx.createError(`Two schemas are referenced with the same name but different content. Renamed ${prevName} to ${name}`, 'key'));
    i--;
  }

  if (i >= 0) return {
    name,
    errors
  };
  let serialId = 0;

  while (componentsGroup[name] && !(0, _lodash.default)(componentsGroup[name], node)) {
    serialId++;
    name = `${name}-${serialId}`;
  }

  return {
    name,
    errors
  };
};

class Bundler {
  constructor(config) {
    this.config = config;
    this.nameConflictsEnabled = this.config.nameConflicts !== 'off';

    if (this.nameConflictsEnabled) {
      this.nameConflictsSeverity = (0, _default.getMsgLevelFromString)(this.config.nameConflicts || '');
    }

    this.components = {};
    this.newRefNodes = new Map();
  }

  static get rule() {
    return 'bundler';
  }

  defNameToType(definitionName) {
    switch (definitionName) {
      case 'OpenAPISchema':
        return 'schemas';

      case 'OpenAPIParameter':
        return 'parameters';

      case 'OpenAPIResponse':
        return 'responses';

      case 'OpenAPIExample':
        return 'examples';

      case 'OpenAPIRequestBody':
        return 'requestBodies';

      case 'OpenAPIHeader':
        return 'headers';

      case 'OpenAPISecuritySchema':
        return 'securitySchemes';

      case 'OpenAPILink':
        return 'links';

      case 'OpenAPICallback':
        return 'callbacks';

      default:
        return null;
    }
  }

  includeImplicitDiscriminator(pointer, schemas, ctx, {
    traverseNode,
    visited
  }) {
    const $ref = `#/${pointer.join('/')}`;
    const errors = [];

    for (const [name, schema] of Object.entries(schemas || {})) {
      if (schema.allOf && schema.allOf.find(s => s.$ref === $ref)) {
        const existingSchema = this.components.schemas && this.components.schemas[name];

        if (existingSchema && !(0, _lodash.default)(existingSchema, schema)) {
          errors.push(ctx.createError(`Implicitly mapped discriminator schema "${name}" conflicts with existing schema. Skipping.`, 'key'));
        }

        this.components.schemas = this.components.schemas || {};
        this.components.schemas[name] = schema;
        ctx.pathStack.push({
          path: ctx.path,
          file: ctx.filePath,
          document: ctx.document,
          source: ctx.source
        });
        ctx.path = ['components', 'schemas', name];
        traverseNode(schema, _OpenAPISchema.default, ctx, visited);
        ctx.path = ctx.pathStack.pop().path;
      }
    }

    return errors;
  }

  any() {
    return {
      onExit: (node, definition, ctx, unresolvedNode, {
        traverseNode,
        visited
      }) => {
        let errors = [];

        if (node.discriminator && !node.oneOf && !node.anyOf && !node.mapping) {
          errors = this.includeImplicitDiscriminator(ctx.path, ctx.document.components && ctx.document.components.schemas, ctx, {
            traverseNode,
            visited
          });
        }

        if (unresolvedNode && node !== unresolvedNode && (0, _utils.isRef)(unresolvedNode)) {
          const componentType = this.defNameToType(definition.name);

          if (!componentType) {
            delete unresolvedNode.$ref;
            Object.assign(unresolvedNode, node);
          } else if (!this.newRefNodes.has(unresolvedNode)) {
            // eslint-disable-next-line prefer-const
            const {
              name,
              errors: nameErrors
            } = getComponentName(unresolvedNode.$ref, this.components, componentType, node, ctx);
            errors.push(...nameErrors);
            const newRef = `#/components/${componentType}/${name}`;

            if (!this.components[componentType]) {
              this.components[componentType] = {};
            }

            this.components[componentType][name] = node; // we can't replace nodes in-place as non-idempotent
            // nodes will be visited again and will fail bundling
            // so we save it and replace at the end

            this.newRefNodes.set(unresolvedNode, newRef);
          }
        }

        errors.forEach(e => {
          e.severity = this.nameConflictsSeverity;
        });

        if (!this.nameConflictsEnabled) {
          errors = [];
        }

        return errors;
      }
    };
  }

  OpenAPIRoot() {
    return {
      onExit: (node, definition, ctx) => {
        if (!node.components) {
          node.components = {};
        }

        if (!this.config.ignoreErrors && ctx.result.some(e => e.severity === _default.messageLevels.ERROR)) {
          ctx.bundlingResult = null;
          return null;
        }

        for (const [unresolvedNode, newRef] of this.newRefNodes.entries()) {
          if (unresolvedNode[_OpenAPIDiscriminator.MAPPING_DATA_KEY]) {
            // FIXME: too hack
            const {
              mapping,
              key
            } = unresolvedNode[_OpenAPIDiscriminator.MAPPING_DATA_KEY];
            mapping[key] = newRef;
          } else {
            unresolvedNode.$ref = newRef;
          }
        }

        Object.keys(this.components).forEach(component => {
          node.components[component] = node.components[component] ? node.components[component] : {};
          Object.assign(node.components[component], this.components[component]);
        });
        let outputFile;

        if (this.config.output) {
          outputFile = this.config.output;
          const nameParts = outputFile.split('.');
          const ext = nameParts[nameParts.length - 1];

          const outputPath = _path.default.resolve(outputFile);

          const outputDir = _path.default.dirname(outputPath);

          _fs.default.mkdirSync(outputDir, {
            recursive: true
          });

          let fileData = null;

          switch (ext) {
            case 'json':
              fileData = JSON.stringify(node, null, 2);
              break;

            case 'yaml':
            case 'yml':
            default:
              fileData = _jsYaml.default.safeDump(node);
              break;
          }

          _fs.default.writeFileSync(`${outputPath}`, fileData);
        } else if (this.config.outputObject) {
          ctx.bundlingResult = node;
        } else {
          // default output to stdout, if smbd wants to pipe it
          process.stdout.write(_jsYaml.default.safeDump(node));
          process.stdout.write('\n');
        }

        return null;
      }
    };
  }

}

module.exports = Bundler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,