"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = startPreviewServer;

var _handlebars = require("handlebars");

var _chalk = _interopRequireDefault(require("chalk"));

var portfinder = _interopRequireWildcard(require("portfinder"));

var _fs = require("fs");

var path = _interopRequireWildcard(require("path"));

var _server = require("./server");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { watch } from 'chokidar';
function getPageHTML(htmlTemplate, redocOptions = {}, wsPort) {
  const template = (0, _handlebars.compile)((0, _fs.readFileSync)(htmlTemplate, 'utf-8'));
  return template({
    redocHead: `
  <script>
    window.__REDOC_EXPORT = '${redocOptions.licenseKey ? 'RedoclyAPIReference' : 'Redoc'}';
    window.__OPENAPI_CLI_WS_PORT = ${wsPort};
  </script>
  <script src="/simplewebsocket.min.js"></script>
  <script src="/hot.js"></script>
  <script src="${redocOptions.licenseKey ? 'https://cdn.jsdelivr.net/npm/@redocly/api-reference@latest/dist/redocly-api-reference.min.js' : 'https://cdn.jsdelivr.net/npm/redoc@latest/bundles/redoc.standalone.js'}"></script>
`,
    redocHTML: `
  <div id="redoc"></div>
  <script>
    var container = document.getElementById('redoc');
    ${redocOptions.licenseKey ? "window[window.__REDOC_EXPORT].setPublicPath('https://cdn.jsdelivr.net/npm/@redocly/api-reference@latest/dist/');" : ''}
    window[window.__REDOC_EXPORT].init("openapi.json", ${JSON.stringify(redocOptions)}, container)
  </script>`
  });
}

async function startPreviewServer(port, {
  getBundle,
  getOptions,
  htmlTemplate = path.join(__dirname, 'default.hbs')
}) {
  const handler = async (request, response) => {
    console.time(_chalk.default.dim(`GET ${request.url}`));

    if (request.url === '/') {
      (0, _server.respondWithGzip)(getPageHTML(htmlTemplate, getOptions(), wsPort), request, response, {
        'Content-Type': 'text/html'
      });
    } else if (request.url === '/openapi.json') {
      (0, _server.respondWithGzip)(JSON.stringify((await getBundle())), request, response, {
        'Content-Type': 'application/json'
      });
    } else {
      const filePath = {
        '/hot.js': path.join(__dirname, 'hot.js'),
        '/simplewebsocket.min.js': require.resolve('simple-websocket/simplewebsocket.min.js')
      }[request.url] || path.resolve(path.dirname(htmlTemplate), `.${request.url}`);
      const extname = String(path.extname(filePath)).toLowerCase();
      const contentType = _server.mimeTypes[extname] || 'application/octet-stream';

      try {
        (0, _server.respondWithGzip)((await _fs.promises.readFile(filePath, 'utf-8')), request, response, {
          'Content-Type': contentType
        });
      } catch (e) {
        if (e.code === 'ENOENT') {
          (0, _server.respondWithGzip)('404 Not Found', request, response, {
            'Content-Type': 'text/html'
          }, 404);
        } else {
          (0, _server.respondWithGzip)(`Something went wrong: ${e.code}...\n`, request, response, {}, 500);
        }
      }
    }

    console.timeEnd(_chalk.default.dim(`GET ${request.url}`));
  };

  let wsPort = await portfinder.getPortPromise({
    port: 32201
  });
  const server = (0, _server.startHttpServer)(port, handler);
  server.on('listening', () => {
    process.stdout.write(`\n  ðŸ”Ž  Preview server running at ${_chalk.default.blue(`http://127.0.0.1:${port}\n`)}`);
  });
  return (0, _server.startWsServer)(wsPort);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,