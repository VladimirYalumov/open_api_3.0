"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.respondWithGzip = respondWithGzip;
exports.startHttpServer = startHttpServer;
exports.startWsServer = startWsServer;
exports.mimeTypes = void 0;

var http = _interopRequireWildcard(require("http"));

var zlib = _interopRequireWildcard(require("zlib"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SocketServer = require('simple-websocket/server');

const mimeTypes = {
  '.html': 'text/html',
  '.js': 'text/javascript',
  '.css': 'text/css',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.wav': 'audio/wav',
  '.mp4': 'video/mp4',
  '.woff': 'application/font-woff',
  '.ttf': 'application/font-ttf',
  '.eot': 'application/vnd.ms-fontobject',
  '.otf': 'application/font-otf',
  '.wasm': 'application/wasm'
}; // credits: https://stackoverflow.com/a/9238214/1749888

exports.mimeTypes = mimeTypes;

function respondWithGzip(contents, request, response, headers = {}, code = 200) {
  let compressedStream;
  const acceptEncoding = request.headers['accept-encoding'] || '';

  if (acceptEncoding.match(/\bdeflate\b/)) {
    response.writeHead(code, { ...headers,
      'content-encoding': 'deflate'
    });
    compressedStream = zlib.createDeflate();
  } else if (acceptEncoding.match(/\bgzip\b/)) {
    response.writeHead(code, { ...headers,
      'content-encoding': 'gzip'
    });
    compressedStream = zlib.createGzip();
  } else {
    response.writeHead(code, headers);

    if (typeof contents === 'string') {
      response.write(contents);
      response.end();
    } else {
      contents.pipe(response);
    }

    return;
  }

  if (typeof contents === 'string') {
    compressedStream.write(contents);
    compressedStream.pipe(response);
    compressedStream.end();
  } else {
    contents.pipe(compressedStream).pipe(response);
  }
}

function startHttpServer(port, handler) {
  return http.createServer(handler).listen(port);
}

function startWsServer(port) {
  const socketServer = new SocketServer({
    port,
    clientTracking: true
  });
  socketServer.on('connection', socket => {
    socket.on('data', data => {
      const message = JSON.parse(data);

      switch (message.type) {
        case 'ping':
          socket.send('{"type": "pong"}');
          break;

        default: // nope

      }
    });
  });

  socketServer.broadcast = message => {
    // eslint-disable-next-line no-underscore-dangle
    socketServer._server.clients.forEach(client => {
      if (client.readyState === 1) {
        // OPEN
        client.send(message);
      }
    });
  };

  return socketServer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmV2aWV3LWRvY3Mvc2VydmVyLmpzIl0sIm5hbWVzIjpbIlNvY2tldFNlcnZlciIsInJlcXVpcmUiLCJtaW1lVHlwZXMiLCJyZXNwb25kV2l0aEd6aXAiLCJjb250ZW50cyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJjb2RlIiwiY29tcHJlc3NlZFN0cmVhbSIsImFjY2VwdEVuY29kaW5nIiwibWF0Y2giLCJ3cml0ZUhlYWQiLCJ6bGliIiwiY3JlYXRlRGVmbGF0ZSIsImNyZWF0ZUd6aXAiLCJ3cml0ZSIsImVuZCIsInBpcGUiLCJzdGFydEh0dHBTZXJ2ZXIiLCJwb3J0IiwiaGFuZGxlciIsImh0dHAiLCJjcmVhdGVTZXJ2ZXIiLCJsaXN0ZW4iLCJzdGFydFdzU2VydmVyIiwic29ja2V0U2VydmVyIiwiY2xpZW50VHJhY2tpbmciLCJvbiIsInNvY2tldCIsImRhdGEiLCJtZXNzYWdlIiwiSlNPTiIsInBhcnNlIiwidHlwZSIsInNlbmQiLCJicm9hZGNhc3QiLCJfc2VydmVyIiwiY2xpZW50cyIsImZvckVhY2giLCJjbGllbnQiLCJyZWFkeVN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLHlCQUFELENBQTVCOztBQUVPLE1BQU1DLFNBQVMsR0FBRztBQUN2QixXQUFTLFdBRGM7QUFFdkIsU0FBTyxpQkFGZ0I7QUFHdkIsVUFBUSxVQUhlO0FBSXZCLFdBQVMsa0JBSmM7QUFLdkIsVUFBUSxXQUxlO0FBTXZCLFVBQVEsV0FOZTtBQU92QixVQUFRLFdBUGU7QUFRdkIsVUFBUSxlQVJlO0FBU3ZCLFVBQVEsV0FUZTtBQVV2QixVQUFRLFdBVmU7QUFXdkIsV0FBUyx1QkFYYztBQVl2QixVQUFRLHNCQVplO0FBYXZCLFVBQVEsK0JBYmU7QUFjdkIsVUFBUSxzQkFkZTtBQWV2QixXQUFTO0FBZmMsQ0FBbEIsQyxDQWtCUDs7OztBQUNPLFNB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LFFBQUFBLE1BQU0sQ0FBQ0wsSUFBUCxDQUFZSixPQUFaO0FBQ0Q7QUFDRixLQUpEO0FBS0QsR0FQRDs7QUFTQSxTQUFPTCxZQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0ICogYXMgemxpYiBmcm9tICd6bGliJztcblxuY29uc3QgU29ja2V0U2VydmVyID0gcmVxdWlyZSgnc2ltcGxlLXdlYnNvY2tldC9zZXJ2ZXInKTtcblxuZXhwb3J0IGNvbnN0IG1pbWVUeXBlcyA9IHtcbiAgJy5odG1sJzogJ3RleHQvaHRtbCcsXG4gICcuanMnOiAndGV4dC9qYXZhc2NyaXB0JyxcbiAgJy5jc3MnOiAndGV4dC9jc3MnLFxuICAnLmpzb24nOiAnYXBwbGljYXRpb24vanNvbicsXG4gICcucG5nJzogJ2ltYWdlL3BuZycsXG4gICcuanBnJzogJ2ltYWdlL2pwZycsXG4gICcuZ2lmJzogJ2ltYWdlL2dpZicsXG4gICcuc3ZnJzogJ2ltYWdlL3N2Zyt4bWwnLFxuICAnLndhdic6ICdhdWRpby93YXYnLFxuICAnLm1wNCc6ICd2aWRlby9tcDQnLFxuICAnLndvZmYnOiAnYXBwbGljYXRpb24vZm9udC13b2ZmJyxcbiAgJy50dGYnOiAnYXBwbGljYXRpb24vZm9udC10dGYnLFxuICAnLmVvdCc6ICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCcsXG4gICcub3RmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtb3RmJyxcbiAgJy53YXNtJzogJ2FwcGxpY2F0aW9uL3dhc20nLFxufTtcblxuLy8gY3JlZGl0czogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzkyMzgyMTQvMTc0OTg4OFxuZXhwb3J0IGZ1bmN0aW9uIHJlc3BvbmRXaXRoR3ppcChjb250ZW50cywgcmVxdWVzdCwgcmVzcG9uc2UsIGhlYWRlcnMgPSB7fSwgY29kZSA9IDIwMCkge1xuICBsZXQgY29tcHJlc3NlZFN0cmVhbTtcbiAgY29uc3QgYWNjZXB0RW5jb2RpbmcgPSByZXF1ZXN0LmhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddIHx8ICcnO1xuICBpZiAoYWNjZXB0RW5jb2RpbmcubWF0Y2goL1xcYmRlZmxhdGVcXGIvKSkge1xuICAgIHJlc3BvbnNlLndyaXRlSGVhZChjb2RlLCB7IC4uLmhlYWRlcnMsICdjb250ZW50LWVuY29kaW5nJzogJ2RlZmxhdGUnIH0pO1xuICAgIGNvbXByZXNzZWRTdHJlYW0gPSB6bGliLmNyZWF0ZURlZmxhdGUoKTtcbiAgfSBlbHNlIGlmIChhY2NlcHRFbmNvZGluZy5tYXRjaCgvXFxiZ3ppcFxcYi8pKSB7XG4gICAgcmVzcG9uc2Uud3JpdGVIZWFkKGNvZGUsIHsgLi4uaGVhZGVycywgJ2NvbnRlbnQtZW5jb2RpbmcnOiAnZ3ppcCcgfSk7XG4gICAgY29tcHJlc3NlZFN0cmVhbSA9IHpsaWIuY3JlYXRlR3ppcCgpO1xuICB9IGVsc2Uge1xuICAgIHJlc3BvbnNlLndyaXRlSGVhZChjb2RlLCBoZWFkZXJzKTtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnRzID09PSAnc3RyaW5nJykge1xuICAgICAgcmVzcG9uc2Uud3JpdGUoY29udGVudHMpO1xuICAgICAgcmVzcG9uc2UuZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRzLnBpcGUocmVzcG9uc2UpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnRlbnRzID09PSAnc3RyaW5nJykge1xuICAgIGNvbXByZXNzZWRTdHJlYW0ud3JpdGUoY29udGVudHMpO1xuICAgIGNvbXByZXNzZWRTdHJlYW0ucGlwZShyZXNwb25zZSk7XG4gICAgY29tcHJlc3NlZFN0cmVhbS5lbmQoKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50cy5waXBlKGNvbXByZXNzZWRTdHJlYW0pLnBpcGUocmVzcG9uc2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEh0dHBTZXJ2ZXIocG9ydCwgaGFuZGxlcikge1xuICByZXR1cm4gaHR0cC5jcmVhdGVTZXJ2ZXIoaGFuZGxlcikubGlzdGVuKHBvcnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXc1NlcnZlcihwb3J0KSB7XG4gIGNvbnN0IHNvY2tldFNlcnZlciA9IG5ldyBTb2NrZXRTZXJ2ZXIoeyBwb3J0LCBjbGllbnRUcmFja2luZzogdHJ1ZSB9KTtcblxuICBzb2NrZXRTZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XG4gICAgc29ja2V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncGluZyc6XG4gICAgICAgICAgc29ja2V0LnNlbmQoJ3tcInR5cGVcIjogXCJwb25nXCJ9Jyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gbm9wZVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBzb2NrZXRTZXJ2ZXIuYnJvYWRjYXN0ID0gKG1lc3NhZ2UpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICBzb2NrZXRTZXJ2ZXIuX3NlcnZlci5jbGllbnRzLmZvckVhY2goKGNsaWVudCkgPT4ge1xuICAgICAgaWYgKGNsaWVudC5yZWFkeVN0YXRlID09PSAxKSB7IC8vIE9QRU5cbiAgICAgICAgY2xpZW50LnNlbmQobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHNvY2tldFNlcnZlcjtcbn1cbiJdfQ==