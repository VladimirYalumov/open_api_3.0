"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _loader = _interopRequireWildcard(require("./loader"));

var _utils = _interopRequireDefault(require("./visitors/utils"));

var _resolveDefinition = require("./resolveDefinition");

var _error = require("./error");

var _resolver = require("./resolver");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const validateFieldsRaw = (node, ctx, config, ruleName, validators) => {
  const result = [];
  const vals = Object.keys(validators);

  for (let i = 0; i < vals.length; i += 1) {
    if ((0, _utils.default)(config, vals[i])) {
      if (validators[vals[i]]) {
        ctx.path.push(vals[i]);
        const validate = validators[vals[i]].bind({
          rule: ruleName,
          config
        });
        const res = validate(node, ctx, config);

        if (res) {
          if (Array.isArray(res)) result.push(...res);else result.push(res);
        }

        ctx.path.pop();
      }
    }
  }

  return result;
};

const getRule = (ctx, ruleName) => {
  const result = ctx.allRules.filter(r => r.constructor.rule === ruleName);
  return result ? result[0] : null;
};

function createContext(node, sourceFile, filePath, config) {
  const [enabledRules, allRules] = (0, _loader.default)(config);
  return {
    document: node,
    filePath: _path.default.resolve(filePath),
    path: [],
    cache: {},
    visited: [],
    result: [],
    definitionStack: [],
    definitions: (0, _resolveDefinition.loadDefinitions)(config),
    pathStack: [],
    source: sourceFile,
    enableCodeframe: !!(config && (config.codeframes === 'on' || config.codeframes === true)),
    customRules: [...(0, _loader.loadRulesetExtension)(config, 'transformingVisitors'), ...enabledRules, ...(0, _loader.loadRulesetExtension)(config, 'rulesExtensions')],
    allRules,
    config,
    messageHelpers: _error.messageHelpers,
    validateFieldsRaw,
    getRule,
    resolveNode: _resolver.resolveNodeNoSideEffects,
    fileDependencies: new Set(),
    resolveCache: {}
  };
}

var _default = createContext;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbInZhbGlkYXRlRmllbGRzUmF3Iiwibm9kZSIsImN0eCIsImNvbmZpZyIsInJ1bGVOYW1lIiwidmFsaWRhdG9ycyIsInJlc3VsdCIsInZhbHMiLCJPYmplY3QiLCJrZXlzIiwiaSIsImxlbmd0aCIsInBhdGgiLCJwdXNoIiwidmFsaWRhdGUiLCJiaW5kIiwicnVsZSIsInJlcyIsIkFycmF5IiwiaXNBcnJheSIsInBvcCIsImdldFJ1bGUiLCJhbGxSdWxlcyIsImZpbHRlciIsInIiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZUNvbnRleHQiLCJzb3VyY2VGaWxlIiwiZmlsZVBhdGgiLCJlbmFibGVkUnVsZXMiLCJkb2N1bWVudCIsInJlc29sdmUiLCJjYWNoZSIsInZpc2l0ZWQiLCJkZWZpbml0aW9uU3RhY2siLCJkZWZpbml0aW9ucyIsInBhdGhTdGFjayIsInNvdXJjZSIsImVuYWJsZUNvZGVmcmFtZSIsImNvZGVmcmFtZXMiLCJjdXN0b21SdWxlcyIsIm1lc3NhZ2VIZWxwZXJzIiwicmVzb2x2ZU5vZGUiLCJyZXNvbHZlTm9kZU5vU2lkZUVmZmVjdHMiLCJmaWxlRGVwZW5kZW5jaWVzIiwiU2V0IiwicmVzb2x2ZUNhY2hlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVlDLE1BQVosRUFBb0JDLFFBQXBCLEVBQThCQyxVQUE5QixLQUE2QztBQUNyRSxRQUFNQyxNQUFNLEdBQUcsRUFBZjtBQUVBLFFBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlKLFVBQVosQ0FBYjs7QUFDQSxPQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILElBQUksQ0FBQ0ksTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztB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YSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgbG9hZFJ1bGVzZXQsIHsgbG9hZFJ1bGVzZXRFeHRlbnNpb24gfSBmcm9tICcuL2xvYWRlcic7XG5pbXBvcnQgaXNSdWxlRW5hYmxlZCBmcm9tICcuL3Zpc2l0b3JzL3V0aWxzJztcbmltcG9ydCB7IGxvYWREZWZpbml0aW9ucyB9IGZyb20gJy4vcmVzb2x2ZURlZmluaXRpb24nO1xuaW1wb3J0IHsgbWVzc2FnZUhlbHBlcnMgfSBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IHJlc29sdmVOb2RlTm9TaWRlRWZmZWN0cyB9IGZyb20gJy4vcmVzb2x2ZXInO1xuXG5jb25zdCB2YWxpZGF0ZUZpZWxkc1JhdyA9IChub2RlLCBjdHgsIGNvbmZpZywgcnVsZU5hbWUsIHZhbGlkYXRvcnMpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgY29uc3QgdmFscyA9IE9iamVjdC5rZXlzKHZhbGlkYXRvcnMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaXNSdWxlRW5hYmxlZChjb25maWcsIHZhbHNbaV0pKSB7XG4gICAgICBpZiAodmFsaWRhdG9yc1t2YWxzW2ldXSkge1xuICAgICAgICBjdHgucGF0aC5wdXNoKHZhbHNbaV0pO1xuICAgICAgICBjb25zdCB2YWxpZGF0ZSA9IHZhbGlkYXRvcnNbdmFsc1tpXV0uYmluZCh7IHJ1bGU6IHJ1bGVOYW1lLCBjb25maWcgfSk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHZhbGlkYXRlKG5vZGUsIGN0eCwgY29uZmlnKTtcbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJlc3VsdC5wdXNoKC4uLnJlcyk7XG4gICAgICAgICAgZWxzZSByZXN1bHQucHVzaChyZXMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5wYXRoLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgZ2V0UnVsZSA9IChjdHgsIHJ1bGVOYW1lKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGN0eC5hbGxSdWxlcy5maWx0ZXIoKHIpID0+IHIuY29uc3RydWN0b3IucnVsZSA9PT0gcnVsZU5hbWUpO1xuICByZXR1cm4gcmVzdWx0ID8gcmVzdWx0WzBdIDogbnVsbDtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQobm9kZSwgc291cmNlRmlsZSwgZmlsZVBhdGgsIGNvbmZpZykge1xuICBjb25zdCBbZW5hYmxlZFJ1bGVzLCBhbGxSdWxlc10gPSBsb2FkUnVsZXNldChjb25maWcpO1xuICByZXR1cm4ge1xuICAgIGRvY3VtZW50OiBub2RlLFxuICAgIGZpbGVQYXRoOiBwYXRoLnJlc29sdmUoZmlsZVBhdGgpLFxuICAgIHBhdGg6IFtdLFxuICAgIGNhY2hlOiB7fSxcbiAgICB2aXNpdGVkOiBbXSxcbiAgICByZXN1bHQ6IFtdLFxuICAgIGRlZmluaXRpb25TdGFjazogW10sXG4gICAgZGVmaW5pdGlvbnM6IGxvYWREZWZpbml0aW9ucyhjb25maWcpLFxuICAgIHBhdGhTdGFjazogW10sXG4gICAgc291cmNlOiBzb3VyY2VGaWxlLFxuICAgIGVuYWJsZUNvZGVmcmFtZTogISEoY29uZmlnICYmIChjb25maWcuY29kZWZyYW1lcyA9PT0gJ29uJyB8fCBjb25maWcuY29kZWZyYW1lcyA9PT0gdHJ1ZSkpLFxuICAgIGN1c3RvbVJ1bGVzOiBbLi4ubG9hZFJ1bGVzZXRFeHRlbnNpb24oY29uZmlnLCAndHJhbnNmb3JtaW5nVmlzaXRvcnMnKSwgLi4uZW5hYmxlZFJ1bGVzLCAuLi5sb2FkUnVsZXNldEV4dGVuc2lvbihjb25maWcsICdydWxlc0V4dGVuc2lvbnMnKV0sXG4gICAgYWxsUnVsZXMsXG4gICAgY29uZmlnLFxuICAgIG1lc3NhZ2VIZWxwZXJzLFxuICAgIHZhbGlkYXRlRmllbGRzUmF3LFxuICAgIGdldFJ1bGUsXG4gICAgcmVzb2x2ZU5vZGU6IHJlc29sdmVOb2RlTm9TaWRlRWZmZWN0cyxcblxuICAgIGZpbGVEZXBlbmRlbmNpZXM6IG5ldyBTZXQoKSxcblxuICAgIHJlc29sdmVDYWNoZToge30sXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbnRleHQ7XG4iXX0=