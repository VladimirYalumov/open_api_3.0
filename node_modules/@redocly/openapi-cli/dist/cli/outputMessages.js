"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outputMessages = exports.prettyPrintShort = exports.printValidationHeader = exports.prettyPrint = void 0;

var _path = _interopRequireDefault(require("path"));

var _chalk = _interopRequireDefault(require("chalk"));

var _utils = require("../utils");

var _default = require("../error/default");

var _groupMessages = require("./groupMessages");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const colorizeMessageHeader = (msg, longestPath) => {
  const msgHeader = `${_path.default.relative(process.cwd(), msg.file)}:${msg.location.startLine}:${msg.location.startCol}`;

  switch (msg.severity) {
    case _default.messageLevels.ERROR:
      return (0, _utils.outputBgRed)((0, _utils.outputBgRed)(msgHeader.padEnd(longestPath + 2 - 20)));

    case _default.messageLevels.WARNING:
      return (0, _utils.outputBgYellow)((0, _utils.outputRed)(msgHeader.padEnd(longestPath + 2 - 20)));

    case _default.messageLevels.INFO:
      return (0, _utils.outputBgLightBlue)((0, _utils.outputRed)(msgHeader.padEnd(longestPath + 2 - 20)));

    default:
      return msgHeader;
  }
};

const colorizeRuleName = (error, severity) => {
  switch (severity) {
    case _default.messageLevels.ERROR:
      return (0, _utils.outputRed)(error);

    case _default.messageLevels.WARNING:
      return (0, _utils.outputYellow)(error);

    case _default.messageLevels.INFO:
      return (0, _utils.outputBgLightBlue)(error);

    default:
      return error;
  }
};

const pathImproveReadability = msgPath => msgPath.map(el => el[0] === '/' ? (0, _utils.outputGrey)('[\'') + (0, _utils.outputLightBlue)(el) + (0, _utils.outputGrey)('\']') : (0, _utils.outputGrey)(el));

const prettifyReferencedFrom = row => `${(0, _utils.outputLightBlue)(`${row.file}:${row.startLine}`)} ${(0, _utils.outputGrey)(`#/${pathImproveReadability(row.path).join((0, _utils.outputGrey)('/'))}`)}`;

const renderReferencedFrom = (referencedFromPlaces, severity) => {
  if (referencedFromPlaces.length === 0) return '';
  return `This ${severity.toLowerCase()} is referenced from:\n${referencedFromPlaces.map((row, id) => `${id + 1}) ${prettifyReferencedFrom(row)}`).join('\n')}`;
};

const getMsgSeverity = msg => {
  switch (msg.severity) {
    case _default.messageLevels.WARNING:
      return 'Warning';

    case _default.messageLevels.ERROR:
    default:
      return 'Error';
  }
};

const prettyPrint = (i, error) => {
  const {
    possibleAlternate
  } = error;
  const message = `[${i}] ${colorizeMessageHeader(error)} ${(0, _utils.outputGrey)(`at #/${(0, _utils.outputGrey)(pathImproveReadability(error.path).join((0, _utils.outputGrey)('/')))}`)}` + `\n${error.message}\n` + `${possibleAlternate && possibleAlternate.possibleAlternate ? `\nDid you mean: ${(0, _utils.outputLightBlue)(possibleAlternate.possibleAlternate)} ?\n` : ''}` + `${error.enableCodeframe ? `\n${error.codeFrame}\n\n` : ''}` + `${error.fromRule ? `${getMsgSeverity(error)} was generated by ${_chalk.default.red(error.fromRule)} rule.\n\n` : ''}` + `${renderReferencedFrom(error.referencedFromPlaces, getMsgSeverity(error))}` + '\n\n';
  return message;
};

exports.prettyPrint = prettyPrint;

const printValidationHeader = _filePath => {// nope for now [Roman]
  // well, at least I've tried. Not a designer, for sure [Sergey]
};

exports.printValidationHeader = printValidationHeader;

const prettyPrintShort = (i, error, longestPath, longestRuleName) => {
  const message = `${`${error.location.startLine}:${error.location.startCol}`.padEnd(longestPath)} ${colorizeRuleName(error.fromRule.padEnd(longestRuleName + 2), error.severity)} ${error.message}\n`;
  return message;
};

exports.prettyPrintShort = prettyPrintShort;

const outputMessages = (result, cmdObj) => {
  const errorsGrouped = (0, _groupMessages.groupErrors)(result);
  const groupedByFile = (0, _groupMessages.groupByFiles)(errorsGrouped);
  const totalErrors = errorsGrouped.filter(msg => msg.severity === _default.messageLevels.ERROR).length;
  const totalWarnings = errorsGrouped.filter(msg => msg.severity === _default.messageLevels.WARNING).length;

  if (cmdObj.short && errorsGrouped.length !== 0) {
    const posLength = errorsGrouped.map(msg => `${msg.location.startLine}:${msg.location.startCol}`).sort((e, o) => e.length > o.length).pop().length;
    const longestRuleName = errorsGrouped.map(msg => msg.fromRule).sort((e, o) => e.length > o.length).pop().length;
    Object.keys(groupedByFile).forEach(fileName => {
      process.stderr.write(`${(0, _utils.outputUnderline)(`${_path.default.relative(process.cwd(), fileName)}:\n`)}`);
      groupedByFile[fileName].sort((a, b) => a.severity < b.severity).forEach((entry, id) => process.stderr.write(prettyPrintShort(id + 1, entry, posLength, longestRuleName)));
      process.stderr.write('\n');
    });
  } else {
    if (errorsGrouped.length > 0) process.stderr.write('\n\n');
    errorsGrouped.sort((a, b) => a.severity < b.severity).forEach((entry, id) => process.stderr.write(prettyPrint(id + 1, entry)));
  }

  return {
    totalErrors,
    totalWarnings
  };
};

exports.outputMessages = outputMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,