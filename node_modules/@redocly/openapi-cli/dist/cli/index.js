#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _commander = _interopRequireDefault(require("commander"));

var _fs = _interopRequireDefault(require("fs"));

var _path = require("path");

var chockidar = _interopRequireWildcard(require("chokidar"));

var _validate = require("../validate");

var _bundle = require("../bundle");

var _utils = require("../utils");

var _outputMessages = require("./outputMessages");

var _config = require("../config");

var _previewDocs = _interopRequireDefault(require("../preview-docs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const validateFile = (filePath, options, cmdObj) => {
  let result;

  if (!_fs.default.existsSync(filePath) && (0, _utils.isFullyQualifiedUrl)(filePath)) {
    process.stdout.write('Will validate from URL\n');
    result = (0, _validate.validateFromUrl)(filePath, options);
  } else {
    result = (0, _validate.validateFromFile)(filePath, options);
  }

  const resultStats = (0, _outputMessages.outputMessages)(result, cmdObj);
  process.stdout.write(`${_chalk.default.blueBright(filePath)} results. Errors: ${resultStats.totalErrors}, warnings: ${resultStats.totalWarnings}\n`);
  return {
    errors: resultStats.totalErrors,
    warnings: resultStats.totalWarnings
  };
};

const cli = () => {
  const f = _fs.default.readFileSync(`${__dirname}/../package.json`, 'utf-8');

  const {
    version
  } = JSON.parse(f);

  _commander.default.version(version, '-v, --version', 'Output current version of the OpenAPI CLI.');

  _commander.default.command('bundle [entryPoints...]').description('Create a bundle using <entryPoint> as a root document.').option('-o, --output <outputName>', 'Filename or folder for the bundle.').option('--short', 'Reduce output in case of bundling errors.').option('--ext <ext>', 'Output extension: json, yaml or yml').option('-f, --force', 'Produce bundle output file even if validation errors were encountered').action((entryPoints, cmdObj) => {
    if (cmdObj.ext && ['yaml', 'yml', 'json'].indexOf(cmdObj.ext) === -1) {
      process.stdout.write('Unsupported value for --ext option. Supported values are: yaml, yml or json');
      process.exit(1);
    }

    const config = (0, _config.getConfig)({}); // eslint-disable-next-line no-param-reassign

    entryPoints = (0, _config.getFallbackEntryPointsOrExit)(entryPoints, config);
    const isOutputDir = cmdObj.output && !(0, _path.extname)(cmdObj.output);
    const ext = cmdObj.ext || (0, _path.extname)(cmdObj.output || '').substring(1) || 'yaml';
    const dir = isOutputDir ? cmdObj.output : (0, _path.dirname)(cmdObj.output || '');
    const results = {
      errors: 0,
      warnings: 0
    };
    entryPoints.forEach(entryPoint => {
      let output;

      if (cmdObj.output) {
        const fileName = isOutputDir ? (0, _path.basename)(entryPoint, (0, _path.extname)(entryPoint)) : (0, _path.basename)(cmdObj.output, `.${ext}`);
        output = (0, _path.join)(dir, `${fileName}.${ext}`);
      }

      const bundlingStatus = (0, _bundle.bundleToFile)(entryPoint, output, cmdObj.force);
      const resultStats = (0, _outputMessages.outputMessages)(bundlingStatus, cmdObj);

      if (resultStats.totalErrors === 0) {
        // we do not want to output anything to stdout if it's being piped.
        if (output) {
          process.stdout.write(`Created a bundle for ${entryPoint} at ${output}\n`);
        }
      } else {
        if (cmdObj.force) {
          process.stderr.write(`Created a bundle for ${entryPoint} at ${output}. Errors ignored because of --force\n`);
        } else {
          process.stderr.write(`Errors encountered while bundling ${entryPoint}: bundle not created (use --force to ignore errors)\n`);
        }

        results.errors += resultStats.totalErrors;
        results.warnings += resultStats.totalWarnings;
      }
    });
    process.exit(results.errors === 0 || cmdObj.force ? 0 : 1);
  });

  _commander.default.command('validate [entryPoints...]').description('Validate given OpenAPI 3 definition file.').option('--short', 'Reduce output to required minimun').option('--no-frame', 'Print no codeframes with errors.').option('--config <path>', 'Specify custom yaml or json config').action((entryPoints, cmdObj) => {
    const options = {};
    const results = {
      errors: 0,
      warnings: 0
    };
    const config = (0, _config.getConfig)({}); // eslint-disable-next-line no-param-reassign

    entryPoints = (0, _config.getFallbackEntryPointsOrExit)(entryPoints, config);
    options.codeframes = cmdObj.frame;
    if (cmdObj.config) options.configPath = cmdObj.config;

    for (let i = 0; i < entryPoints.length; i++) {
      (0, _outputMessages.printValidationHeader)(entryPoints[i]);
      const msgs = validateFile(entryPoints[i], options, cmdObj);
      results.errors += msgs.errors;
      results.warnings += msgs.warnings;
    }

    if (entryPoints.length > 1) {
      process.stdout.write(`Total results. Errors: ${results.errors}, warnings: ${results.warnings}\n`);
    }

    process.exit(results.errors > 0 ? 1 : 0);
  });

  function myParseInt(value) {
    return parseInt(value, 10);
  }

  _commander.default.command('preview-docs [entryPoint]').description('Preview API Reference docs for the specified entrypoint OAS definition').option('-p, --port <value>', 'Preview port', myParseInt, 8080).action(async (entryPoint, cmdObj) => {
    const output = 'dist/openapi.yaml';
    let config = (0, _config.getConfig)({});

    if (!entryPoint) {
      // eslint-disable-next-line no-param-reassign, prefer-destructuring
      entryPoint = (0, _config.getFallbackEntryPointsOrExit)([], config)[0];
    }

    let cachedBundle;
    const deps = new Set();

    async function getBundle() {
      return cachedBundle;
    }

    function updateBundle() {
      cachedBundle = new Promise(resolve => {
        process.stdout.write('\nBundling...\n\n');
        const {
          bundle: openapiBundle,
          result,
          fileDependencies
        } = (0, _bundle.bundle)(entryPoint, output, {
          lint: {
            codeframes: false
          }
        });
        const removed = [...deps].filter(x => !fileDependencies.has(x));
        watcher.unwatch(removed);
        watcher.add([...fileDependencies]);
        deps.clear();
        fileDependencies.forEach(deps.add, deps);
        const resultStats = (0, _outputMessages.outputMessages)(result, {
          short: true
        });

        if (resultStats.totalErrors === 0) {
          process.stdout.write(resultStats.totalErrors === 0 ? `Created a bundle for ${entryPoint} ${resultStats.totalWarnings > 0 ? 'with warnings' : 'successfully'}\n` : _chalk.default.yellow(`Created a bundle for ${entryPoint} with errors. Docs may be broken or not accurate\n`));
        }

        resolve(openapiBundle);
      });
    }

    setImmediate(() => updateBundle()); // initial cache

    const hotClients = await (0, _previewDocs.default)(cmdObj.port, {
      getBundle,
      getOptions: () => config.referenceDocs
    });
    const watcher = chockidar.watch([entryPoint, config.configPath], {
      disableGlobbing: true,
      ignoreInitial: true
    });
    const debouncedUpdatedeBundle = (0, _utils.debounce)(async () => {
      updateBundle();
      await cachedBundle;
      hotClients.broadcast('{"type": "reload", "bundle": true}');
    }, 2000);

    const changeHandler = async (type, file) => {
      process.stdout.write(`${_chalk.default.green('watch')} ${type} ${_chalk.default.blue(file)}\n`);

      if (file === config.configPath) {
        config = (0, _config.getConfig)({
          configPath: file
        });
        hotClients.broadcast(JSON.stringify({
          type: 'reload'
        }));
        return;
      }

      debouncedUpdatedeBundle();
    };

    watcher.on('change', changeHandler.bind(undefined, 'changed'));
    watcher.on('add', changeHandler.bind(undefined, 'added'));
    watcher.on('unlink', changeHandler.bind(undefined, 'removed'));
    watcher.on('ready', () => {
      process.stdout.write(`\n  ðŸ‘€  Watching ${_chalk.default.blue(entryPoint)} and all related resources for changes\n`);
    });
  });

  _commander.default.on('command:*', () => {
    process.stderr.write(`\nUnknown command ${_commander.default.args.join(' ')}\n\n`);

    _commander.default.outputHelp();
  });

  if (process.argv.length === 2) process.argv.push('-h');

  _commander.default.parse(process.argv);
};

var _default = cli;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,