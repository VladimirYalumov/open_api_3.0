"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupByFiles = exports.groupErrors = void 0;

var _lodash = _interopRequireDefault(require("lodash.isequal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const errorBelongsToGroup = (error, group) => error.message === group.message && error.path.join('/') === group.path.join('/') && error.severity === group.severity && error.location.startIndex === group.location.startIndex && error.location.endIndex === group.location.endIndex && error.location.possibleAlternate === group.location.possibleAlternate;

const errorAlreadyInGroup = (error, group) => group.referencedFromPlaces.some(place => (0, _lodash.default)(place, error.referencedFrom));

const groupFromError = error => ({
  message: error.message,
  location: error.location,
  path: error.path,
  codeFrame: error.codeFrame,
  value: error.value,
  file: error.file,
  severity: error.severity,
  enableCodeframe: error.enableCodeframe,
  target: error.target,
  possibleAlternate: error.possibleAlternate,
  fromRule: error.fromRule,
  referencedFromPlaces: error.referencedFrom ? [error.referencedFrom] : []
});

const addErrorToGroup = (error, group) => {
  if (error.referencedFrom && !errorAlreadyInGroup(error, group)) {
    group.referencedFromPlaces.push(error.referencedFrom);
  }

  return true;
};

const groupErrors = errors => {
  const groups = [];

  for (let i = 0; i < errors.length; i += 1) {
    let assigned = false;

    for (let j = 0; j < groups.length; j += 1) {
      if (errorBelongsToGroup(errors[i], groups[j])) {
        assigned = addErrorToGroup(errors[i], groups[j]);
        break;
      }
    }

    if (!assigned) groups.push(groupFromError(errors[i]));
  }

  return groups;
};

exports.groupErrors = groupErrors;

const groupByFiles = result => {
  const fileGroups = {};
  result.forEach(row => {
    if (fileGroups[row.file]) {
      fileGroups[row.file].push(row);
    } else {
      fileGroups[row.file] = [row];
    }
  });
  return fileGroups;
};

exports.groupByFiles = groupByFiles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvZ3JvdXBNZXNzYWdlcy5qcyJdLCJuYW1lcyI6WyJlcnJvckJlbG9uZ3NUb0dyb3VwIiwiZXJyb3IiLCJncm91cCIsIm1lc3NhZ2UiLCJwYXRoIiwiam9pbiIsInNldmVyaXR5IiwibG9jYXRpb24iLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJwb3NzaWJsZUFsdGVybmF0ZSIsImVycm9yQWxyZWFkeUluR3JvdXAiLCJyZWZlcmVuY2VkRnJvbVBsYWNlcyIsInNvbWUiLCJwbGFjZSIsInJlZmVyZW5jZWRGcm9tIiwiZ3JvdXBGcm9tRXJyb3IiLCJjb2RlRnJhbWUiLCJ2YWx1ZSIsImZpbGUiLCJlbmFibGVDb2RlZnJhbWUiLCJ0YXJnZXQiLCJmcm9tUnVsZSIsImFkZEVycm9yVG9Hcm91cCIsInB1c2giLCJncm91cEVycm9ycyIsImVycm9ycyIsImdyb3VwcyIsImkiLCJsZW5ndGgiLCJhc3NpZ25lZCIsImoiLCJncm91cEJ5RmlsZXMiLCJyZXN1bHQiLCJmaWxlR3JvdXBzIiwiZm9yRWFjaCIsInJvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsTUFBTUEsbUJBQW1CLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxLQUFSLEtBQWtCRCxLQUFLLENBQUNFLE9BQU4sS0FBa0JELEtBQUssQ0FBQ0MsT0FBeEIsSUFDdkNGLEtBQUssQ0FBQ0csSUFBTixDQUFXQyxJQUFYLENBQWdCLEdBQWhCLE1BQXlCSCxLQUFLLENBQUNFLElBQU4sQ0FBV0MsSUFBWCxDQUFnQixHQUFoQixDQURjLElBRXZDSixLQUFLLENBQUNLLFFBQU4sS0FBbUJKLEtBQUssQ0FBQ0ksUUFGYyxJQUd2Q0wsS0FBSyxDQUFDTSxRQUFOLENBQWVDLFVBQWYsS0FBOEJOLEtBQUssQ0FBQ0ssUUFBTixDQUFlQyxVQUhOLElBSXZDUCxLQUFLLENBQUNNLFFBQU4sQ0FBZUUsUUFBZixLQUE0QlAsS0FBSyxDQUFDSyxRQUFOLENBQWVFLFFBSkosSUFLdkNSLEtBQUssQ0FBQ00sUUFBTixDQUFlRyxpQkFBZixLQUFxQ1IsS0FBSyxDQUFDSyxRQUFOLENBQWVHLGlCQUwzRDs7QUFPQSxNQUFNQyxtQkFBbUIsR0FBRyxDQUFDVixLQUFELEVBQVFDLEtBQVIsS0FBa0JBLEtBQUssQ0FBQ1Usb0JBQU4sQ0FBMkJDLElBQTNCLENBQzNDQyxLQUFELElBQVcscUJBQVFBLEtBQVIsRUFBZWIsS0FBSyxDQUFDYyxjQUFyQixDQURpQyxDQUE5Qzs7QUFJQSxNQUFNQyxjQUFjLEdBQUlmLEtBQUQsS0FBWTtBQUNqQ0UsRUFBQUEsT0FBTyxFQUFFRixLQUFLLENBQUNFLE9BRGtCO0FBRWpDSSxFQUFBQSxRQUFRLEVBQUVOLEtBQUssQ0FBQ00sUUFGaUI7QUFHakNILEVBQUFBLElBQUksRUFBRUgsS0FBSyxDQUFDRyxJQUhxQjtBQUlqQ2EsRUFBQUEsU0FBUyxFQUFFaEIsS0FBSyxDQUFDZ0IsU0FKZ0I7QUFLakNDLEVBQUFBLEtBQUssRUFBRWpCLEtBQUssQ0FBQ2lCLEtBTG9CO0FBTWpDQyxFQUFBQSxJQUFJLEVBQUVsQixLQUFLLENBQUNrQixJQU5xQjtBQU9qQ2IsRUFBQUEsUUFBUSxFQUFFTCxLQUFLLENBQUNLLFFBUGlCO0FBUWpDYyxFQUFBQSxlQUFlLEVBQUVuQixLQUFLLENBQUNtQixlQVJVO0FBU2pDQyxFQUFBQSxNQUFNLEVBQUVwQixLQUFLLENBQUNvQixNQVRtQjtBQVVqQ1gsRUFBQUEsaUJBQWlCLEVBQUVULEtBQUssQ0FBQ1MsaUJBVlE7QUFXakNZLEVBQUFBLFFBQVEsRUFBRXJCLEtBQUssQ0FBQ3FCLFFBWGlCO0FBWWpDVixFQUFBQSxvQkFBb0IsRUFBRVgsS0FBSyxDQUFDYyxjQUFOLEdBQXVCLENBQUNkLEtBQUssQ0FBQ2MsY0FBUCxDQUF2QixHQUFnRDtBQVpyQyxDQUFaLENBQXZCOztBQWVBLE1BQU1RLGVBQWUsR0FBRyxDQUFDdEIsS0FBRCxFQUFRQyxLQUFSLEtBQWtCO0FBQ3hDLE1BQUlELEtBQUssQ0FBQ2MsY0FBTixJQUF3QixDQUFDSixtQkFBbUIsQ0FBQ1YsS0FBRCxFQUFRQyxLQUFSLENBQWhELEVBQWdFO0FBQzlEQSxJQUFBQSxLQUFLLENBQUNVLG9CQUFOLENBQTJCWSxJQUEzQixDQUFnQ3ZCLEtBQUssQ0FBQ2MsY0FBdEM7QUFDRDs7QUFDRCxTQUFPLElBQVA7QUFDRCxDQUxEOztBQVFPLE1BQU1VLFdBQVcsR0FBSUMsTUFBRCxJQUFZO0FBQ3JDLFFBQU1DLE1BQU0sR0FBRyxFQUFmOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUEzQixFQUFtQ0QsQ0FBQyxJQUFJLENBQXhDLEVBQTJDO0FBQ3pDLFFBQUlFLFFBQVEsR0FBRyxLQUFmOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osTUFBTSxDQUFDRSxNQUEzQixFQUFtQ0UsQ0FBQyxJQUFJLENBQXhDLEVBQTJDO0FBQ3pDLFVBQUkvQixtQkFBbUIsQ0FBQzBCLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFQLEVBQVlELE1BQU0sQ0FBQ0ksQ0FBRCxDQUFsQixDQUF2QixFQUErQztBQUM3Q0QsUUFBQUEsUUFBUSxHQUFHUCxlQUFlLENBQUNHLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFQLEVBQVlELE1BQU0sQ0FBQ0ksQ0FBRCxDQUFsQixDQUExQjtBQUNBO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJLENBQUNELFFBQUwsRUFBZUgsTUFBTSxDQUFDSCxJQUFQLENBQVlSLGNBQWMsQ0FBQ1UsTUFBTSxDQUFDRSxDQUFELENBQVAsQ0FBMUI7QUFDaEI7O0FBQ0QsU0FBT0QsTUFBUDtBQUNELENBYk07Ozs7QUFlQSxNQUFNSyxZQUFZLEdBQUlDLE1BQUQsSUFBWTtBQUN0QyxRQUFNQyxVQUFVLEdBQUcsRUFBbkI7QUFDQUQsRUFBQUEsTUFBTSxDQUFDRSxPQUFQLENBQWdCQyxHQUFELElBQVM7QUFDdEIsUUFBSUYsVUFBVSxDQUFDRSxHQUFHLENBQUNqQixJQUFMLENBQWQsRUFBMEI7QUFDeEJlLE1BQUFBLFVBQVUsQ0FBQ0UsR0FBRyxDQUFDakIsSUFBTCxDQUFWLENBQXFCSyxJQUFyQixDQUEwQlksR0FBMUI7QUFDRCxLQUZELE1BRU87QUFDTEYsTUFBQUEsVUFBVSxDQUFDRSxHQUFHLENBQUNqQixJQUFMLENBQVYsR0FBdUIsQ0FBQ2lCLEdBQUQsQ0FBdkI7QUFDRDtBQUNGLEdBTkQ7QUFPQSxTQUFPRixVQUFQO0FBQ0QsQ0FWTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC5pc2VxdWFsJztcblxuY29uc3QgZXJyb3JCZWxvbmdzVG9Hcm91cCA9IChlcnJvciwgZ3JvdXApID0+IGVycm9yLm1lc3NhZ2UgPT09IGdyb3VwLm1lc3NhZ2VcbiAgICAmJiBlcnJvci5wYXRoLmpvaW4oJy8nKSA9PT0gZ3JvdXAucGF0aC5qb2luKCcvJylcbiAgICAmJiBlcnJvci5zZXZlcml0eSA9PT0gZ3JvdXAuc2V2ZXJpdHlcbiAgICAmJiBlcnJvci5sb2NhdGlvbi5zdGFydEluZGV4ID09PSBncm91cC5sb2NhdGlvbi5zdGFydEluZGV4XG4gICAgJiYgZXJyb3IubG9jYXRpb24uZW5kSW5kZXggPT09IGdyb3VwLmxvY2F0aW9uLmVuZEluZGV4XG4gICAgJiYgZXJyb3IubG9jYXRpb24ucG9zc2libGVBbHRlcm5hdGUgPT09IGdyb3VwLmxvY2F0aW9uLnBvc3NpYmxlQWx0ZXJuYXRlO1xuXG5jb25zdCBlcnJvckFscmVhZHlJbkdyb3VwID0gKGVycm9yLCBncm91cCkgPT4gZ3JvdXAucmVmZXJlbmNlZEZyb21QbGFjZXMuc29tZShcbiAgKHBsYWNlKSA9PiBpc0VxdWFsKHBsYWNlLCBlcnJvci5yZWZlcmVuY2VkRnJvbSksXG4pO1xuXG5jb25zdCBncm91cEZyb21FcnJvciA9IChlcnJvcikgPT4gKHtcbiAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgbG9jYXRpb246IGVycm9yLmxvY2F0aW9uLFxuICBwYXRoOiBlcnJvci5wYXRoLFxuICBjb2RlRnJhbWU6IGVycm9yLmNvZGVGcmFtZSxcbiAgdmFsdWU6IGVycm9yLnZhbHVlLFxuICBmaWxlOiBlcnJvci5maWxlLFxuICBzZXZlcml0eTogZXJyb3Iuc2V2ZXJpdHksXG4gIGVuYWJsZUNvZGVmcmFtZTogZXJyb3IuZW5hYmxlQ29kZWZyYW1lLFxuICB0YXJnZXQ6IGVycm9yLnRhcmdldCxcbiAgcG9zc2libGVBbHRlcm5hdGU6IGVycm9yLnBvc3NpYmxlQWx0ZXJuYXRlLFxuICBmcm9tUnVsZTogZXJyb3IuZnJvbVJ1bGUsXG4gIHJlZmVyZW5jZWRGcm9tUGxhY2VzOiBlcnJvci5yZWZlcmVuY2VkRnJvbSA/IFtlcnJvci5yZWZlcmVuY2VkRnJvbV0gOiBbXSxcbn0pO1xuXG5jb25zdCBhZGRFcnJvclRvR3JvdXAgPSAoZXJyb3IsIGdyb3VwKSA9PiB7XG4gIGlmIChlcnJvci5yZWZlcmVuY2VkRnJvbSAmJiAhZXJyb3JBbHJlYWR5SW5Hcm91cChlcnJvciwgZ3JvdXApKSB7XG4gICAgZ3JvdXAucmVmZXJlbmNlZEZyb21QbGFjZXMucHVzaChlcnJvci5yZWZlcmVuY2VkRnJvbSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbmV4cG9ydCBjb25zdCBncm91cEVycm9ycyA9IChlcnJvcnMpID0+IHtcbiAgY29uc3QgZ3JvdXBzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXJyb3JzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IGFzc2lnbmVkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmIChlcnJvckJlbG9uZ3NUb0dyb3VwKGVycm9yc1tpXSwgZ3JvdXBzW2pdKSkge1xuICAgICAgICBhc3NpZ25lZCA9IGFkZEVycm9yVG9Hcm91cChlcnJvcnNbaV0sIGdyb3Vwc1tqXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFzc2lnbmVkKSBncm91cHMucHVzaChncm91cEZyb21FcnJvcihlcnJvcnNbaV0pKTtcbiAgfVxuICByZXR1cm4gZ3JvdXBzO1xufTtcblxuZXhwb3J0IGNvbnN0IGdyb3VwQnlGaWxlcyA9IChyZXN1bHQpID0+IHtcbiAgY29uc3QgZmlsZUdyb3VwcyA9IHt9O1xuICByZXN1bHQuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgaWYgKGZpbGVHcm91cHNbcm93LmZpbGVdKSB7XG4gICAgICBmaWxlR3JvdXBzW3Jvdy5maWxlXS5wdXNoKHJvdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbGVHcm91cHNbcm93LmZpbGVdID0gW3Jvd107XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZpbGVHcm91cHM7XG59O1xuIl19