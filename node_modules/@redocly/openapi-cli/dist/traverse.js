"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _resolver = _interopRequireWildcard(require("./resolver"));

var _resolveDefinition = _interopRequireDefault(require("./resolveDefinition"));

var _resolveType = _interopRequireDefault(require("./resolveType"));

var _scalarsResolver = _interopRequireDefault(require("./scalarsResolver"));

var _default2 = require("./error/default");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-underscore-dangle */

/* eslint-disable no-case-declarations */
function traverseChildren(resolvedNode, definition, ctx, visited) {
  let nodeChildren;
  const errors = [];

  switch (typeof definition.properties) {
    case 'function':
      nodeChildren = definition.properties(resolvedNode);
      const childrenNames = Object.keys(nodeChildren);
      const resolvedNodeKeys = Object.keys(resolvedNode);

      for (let i = 0; i < childrenNames.length; i += 1) {
        const child = childrenNames[i];
        let childResult = [];

        if (resolvedNodeKeys.includes(child)) {
          ctx.path.push(child);

          if (resolvedNode[child]) {
            childResult = traverseNode(resolvedNode[child], nodeChildren[child], ctx, visited);
          }

          if (childResult) errors.push(...childResult);
          ctx.path.pop();
        }
      }

      break;

    case 'object':
      const props = Object.keys(definition.properties);

      for (let i = 0; i < props.length; i += 1) {
        const p = props[i];
        let propResult = [];
        ctx.path.push(p);

        if (typeof definition.properties[p] === 'function') {
          if (resolvedNode[p]) {
            propResult = traverseNode(resolvedNode[p], definition.properties[p](), ctx, visited);
          }
        } else if (resolvedNode[p]) {
          propResult = traverseNode(resolvedNode[p], definition.properties[p], ctx, visited);
        }

        if (propResult) errors.push(...propResult);
        ctx.path.pop();
      }

      break;

    default: // do nothing

  }

  return errors;
}

function onNodeEnter(node, ctx) {
  const {
    node: resolvedNode,
    onStack
  } = (0, _resolver.default)(node, ctx);
  return {
    resolvedNode,
    onStack
  };
}

function onNodeExit(nodeContext, ctx) {
  if (nodeContext.onStack) {
    (0, _resolver.popPath)(ctx);
  }
}

const nestedIncludes = (c, s) => {
  const res = s.find(el => el === s) !== undefined;
  return res;
};

function traverseNode(node, definition, ctx, visited = []) {
  if (!node || !definition) return [];
  const nodeContext = onNodeEnter(node, ctx);
  const isRecursive = nestedIncludes(ctx.path, visited);
  const errors = [];
  const currentPath = `${_path.default.relative(process.cwd(), ctx.filePath)}::${ctx.path.join('/')}`;
  const localVisited = Array.from(visited);
  localVisited.push(currentPath);
  const resolvedDefinition = (0, _resolveDefinition.default)(definition, ctx, nodeContext.resolvedNode);
  ctx.definitionStack.push(resolvedDefinition);
  (0, _scalarsResolver.default)(nodeContext.resolvedNode, definition, ctx);

  if (definition.customResolveFields) {
    definition.customResolveFields(nodeContext.resolvedNode, ctx, visited);
  }

  if (Array.isArray(nodeContext.resolvedNode)) {
    nodeContext.resolvedNode.forEach((nodeChild, i) => {
      ctx.path.push(i);
      const arrayResult = traverseNode(nodeChild, resolvedDefinition, ctx, localVisited);
      if (arrayResult) errors.push(...arrayResult);
      ctx.path.pop();
    });
  } else {
    ctx.validateFields = ctx.validateFieldsRaw.bind(null, nodeContext.resolvedNode, ctx);
    runRuleOnRuleset(nodeContext, 'onEnter', ctx, resolvedDefinition, node, errors, localVisited);
    const newNode = !isRecursive && (!resolvedDefinition.isIdempotent || !ctx.visited.includes(currentPath));

    if (newNode) {
      if (!ctx.visited.includes(currentPath)) ctx.visited.push(currentPath);
      const errorsChildren = traverseChildren(nodeContext.resolvedNode, resolvedDefinition, ctx, localVisited);
      errors.push(...errorsChildren);
    } else {
      // Will use cached result if we have already traversed this nodes children
      const cachedResult = ctx.cache[currentPath] ? ctx.cache[currentPath].map(r => (0, _default2.fromError)(r, ctx)) : [];
      ctx.result.push(...cachedResult);
    }

    runRuleOnRuleset(nodeContext, 'onExit', ctx, resolvedDefinition, node, errors);
    if (newNode) ctx.cache[currentPath] = errors;
  }

  onNodeExit(nodeContext, ctx);
  ctx.definitionStack.pop();
  return errors;
}

function runRuleOnRuleset(nodeContext, ruleName, ctx, definition, node, errors, visited) {
  for (let i = 0; i < ctx.customRules.length; i += 1) {
    ctx.validateFieldsHelper = ctx.validateFields.bind(null, ctx.customRules[i]._config, ctx.customRules[i].constructor.rule);
    ctx.createError = _default2.createErrorFlat.bind(null, nodeContext.resolvedNode, ctx, ctx.customRules[i].constructor.rule, ctx.customRules[i].config ? ctx.customRules[i].config.level : ctx.customRules[i]._config.level);
    const errorsOnEnterForType = ctx.customRules[i][definition.name] && ctx.customRules[i][definition.name]()[ruleName] ? ctx.customRules[i][definition.name]()[ruleName](nodeContext.resolvedNode, definition, ctx, node, {
      traverseNode,
      visited,
      resolveType: _resolveType.default
    }) : [];
    const errorsOnEnterGeneric = ctx.customRules[i].any && ctx.customRules[i].any()[ruleName] ? ctx.customRules[i].any()[ruleName](nodeContext.resolvedNode, definition, ctx, node, {
      traverseNode,
      visited,
      resolveType: _resolveType.default
    }) : [];

    if (Array.isArray(errorsOnEnterForType)) {
      ctx.result.push(...errorsOnEnterForType);
      errors.push(...errorsOnEnterForType);
    }

    if (Array.isArray(errorsOnEnterGeneric)) {
      ctx.result.push(...errorsOnEnterGeneric);
      errors.push(...errorsOnEnterGeneric);
    }
  }
}

var _default = traverseNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90cmF2ZXJzZS5qcyJdLCJuYW1lcyI6WyJ0cmF2ZXJzZUNoaWxkcmVuIiwicmVzb2x2ZWROb2RlIiwiZGVmaW5pdGlvbiIsImN0eCIsInZpc2l0ZWQiLCJub2RlQ2hpbGRyZW4iLCJlcnJvcnMiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW5OYW1lcyIsIk9iamVjdCIsImtleXMiLCJyZXNvbHZlZE5vZGVLZXlzIiwiaSIsImxlbmd0aCIsImNoaWxkIiwiY2hpbGRSZXN1bHQiLCJpbmNsdWRlcyIsInBhdGgiLCJwdXNoIiwidHJhdmVyc2VOb2RlIiwicG9wIiwicHJvcHMiLCJwIiwicHJvcFJlc3VsdCIsIm9uTm9kZUVudGVyIiwibm9kZSIsIm9uU3RhY2siLCJvbk5vZGVFeGl0Iiwibm9kZUNvbnRleHQiLCJuZXN0ZWRJbmNsdWRlcyIsImMiLCJzIiwicmVzIiwiZmluZCIsImVsIiwidW5kZWZpbmVkIiwiaXNSZWN1cnNpdmUiLCJjdXJyZW50UGF0aCIsInJlbGF0aXZlIiwicHJvY2VzcyIsImN3ZCIsImZpbGVQYXRoIiwiam9pbiIsImxvY2FsVmlzaXRlZCIsIkFycmF5IiwiZnJvbSIsInJlc29sdmVkRGVmaW5pdGlvbiIsImRlZmluaXRpb25TdGFjayIsImN1c3RvbVJlc29sdmVGaWVsZHMiLCJpc0FycmF5IiwiZm9yRWFjaCIsIm5vZGVDaGlsZCIsImFycmF5UmVzdWx0IiwidmFsaWRhdGVGaWVsZHMiLCJ2YWxpZGF0ZUZpZWxkc1JhdyIsImJpbmQiLCJydW5SdWxlT25SdWxlc2V0IiwibmV3Tm9kZSIsImlzSWRlbXBvdGVudCIsImVycm9yc0NoaWxkcmVuIiwiY2FjaGVkUmVzdWx0IiwiY2FjaGUiLCJtYXAiLCJyIiwicmVzdWx0IiwicnVsZU5hbWUiLCJjdXN0b21SdWxlcyIsInZhbGlkYXRlRmllbGRzSGVscGVyIiwiX2NvbmZpZyIsImNvbnN0cnVjdG9yIiwicnVsZSIsImNyZWF0ZUVycm9yIiwiY3JlYXRlRXJyb3JGbGF0IiwiY29uZmlnIiwibGV2ZWwiLCJlcnJvcnNPbkVudGVyRm9yVHlwZSIsIm5hbWUiLCJyZXNvbHZlVHlwZSIsImVycm9yc09uRW50ZXJHZW5lcmljIiwiYW55Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7O0FBVEE7O0FBQ0E7QUFVQSxTQUFTQSxnQkFBVCxDQUEwQkMsWUFBMUIsRUFBd0NDLFVBQXhDLEVBQW9EQyxHQUFwRCxFQUF5REMsT0FBekQsRUFBa0U7QUFDaEUsTUFBSUMsWUFBSjtBQUNBLFFBQU1DLE1BQU0sR0FBRyxFQUFmOztBQUNBLFVBQVEsT0FBT0osVUFBVSxDQUFDSyxVQUExQjtBQUNFLFNBQUssVUFBTDtBQUNFRixNQUFBQSxZQUFZLEdBQUdILFVBQVUsQ0FBQ0ssVUFBWCxDQUFzQk4sWUFBdEIsQ0FBZjtBQUNBLFlBQU1PLGFBQWEsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFlBQVosQ0FBdEI7QUFDQSxZQUFNTSxnQkFBZ0IsR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlULFlBQVosQ0FBekI7O0FBQ0EsV0FBSyxJQUFJVyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixhQUFhLENBQUNLLE1BQWxDLEVBQTBDRCxDQUFDLElBQUksQ0FBL0MsRUFBa0Q7QUFDaEQsY0FBTUUsS0FBSyxHQUFHTixhQUFhLENBQUNJLENBQUQsQ0FBM0I7QUFDQSxZQUFJRyxXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsWUFBSUosZ0JBQWdCLENBQUNLLFFBQWpCLENBQTBCRixLQUExQixDQUFKLEVBQXNDO0FBQ3BDWCxVQUFBQSxHQUFHLENBQUNjLElBQUosQ0FBU0MsSUFBVCxDQUFjSixLQUFkOztBQUNBLGNBQUliLFlBQVksQ0FBQ2EsS0FBRCxDQUFoQixFQUF5QjtBQUN2QkMsWUFBQUEsV0FBVyxHQUFHSSxZQUFZLENBQUNsQixZQUFZLENBQUNhLEtBQUQsQ0FBYixFQUFzQlQsWUFBWSxDQUFDUyxLQUFELENBQWxDLEVBQTJDWCxH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QUFXLENBQUMzQixZQUEvQyxFQUE2REMsVUFBN0QsRUFBeUVDLEdBQXpFLEVBQThFc0IsSUFBOUUsRUFBb0Y7QUFDcEZOLE1BQUFBLFlBRG9GO0FBQ3RFZixNQUFBQSxPQURzRTtBQUM3RHlFLE1BQUFBLFdBQVcsRUFBWEE7QUFENkQsS0FBcEYsQ0FEeUIsR0FHdEIsRUFIUDs7QUFNQSxRQUFJakMsS0FBSyxDQUFDSyxPQUFOLENBQWMwQixvQkFBZCxDQUFKLEVBQXlDO0FBQ3ZDeEUsTUFBQUEsR0FBRyxDQUFDNkQsTUFBSixDQUFXOUMsSUFBWCxDQUFnQixHQUFHeUQsb0JBQW5CO0FBQ0FyRSxNQUFBQSxNQUFNLENBQUNZLElBQVAsQ0FBWSxHQUFHeUQsb0JBQWY7QUFDRDs7QUFFRCxRQUFJL0IsS0FBSyxDQUFDSyxPQUFOLENBQWM2QixvQkFBZCxDQUFKLEVBQXlDO0FBQ3ZDM0UsTUFBQUEsR0FBRyxDQUFDNkQsTUFBSixDQUFXOUMsSUFBWCxDQUFnQixHQUFHNEQsb0JBQW5CO0FBQ0F4RSxNQUFBQSxNQUFNLENBQUNZLElBQVAsQ0FBWSxHQUFHNEQsb0JBQWY7QUFDRDtBQUNGO0FBQ0Y7O2VBRWMzRCxZIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNhc2UtZGVjbGFyYXRpb25zICovXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHJlc29sdmVOb2RlLCB7IHBvcFBhdGggfSBmcm9tICcuL3Jlc29sdmVyJztcbmltcG9ydCByZXNvbHZlRGVmaW5pdGlvbiBmcm9tICcuL3Jlc29sdmVEZWZpbml0aW9uJztcbmltcG9ydCByZXNvbHZlVHlwZSBmcm9tICcuL3Jlc29sdmVUeXBlJztcbmltcG9ydCByZXNvbHZlU2NhbGFycyBmcm9tICcuL3NjYWxhcnNSZXNvbHZlcic7XG5cbmltcG9ydCB7IGZyb21FcnJvciwgY3JlYXRlRXJyb3JGbGF0IH0gZnJvbSAnLi9lcnJvci9kZWZhdWx0JztcblxuZnVuY3Rpb24gdHJhdmVyc2VDaGlsZHJlbihyZXNvbHZlZE5vZGUsIGRlZmluaXRpb24sIGN0eCwgdmlzaXRlZCkge1xuICBsZXQgbm9kZUNoaWxkcmVuO1xuICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgc3dpdGNoICh0eXBlb2YgZGVmaW5pdGlvbi5wcm9wZXJ0aWVzKSB7XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgbm9kZUNoaWxkcmVuID0gZGVmaW5pdGlvbi5wcm9wZXJ0aWVzKHJlc29sdmVkTm9kZSk7XG4gICAgICBjb25zdCBjaGlsZHJlbk5hbWVzID0gT2JqZWN0LmtleXMobm9kZUNoaWxkcmVuKTtcbiAgICAgIGNvbnN0IHJlc29sdmVkTm9kZUtleXMgPSBPYmplY3Qua2V5cyhyZXNvbHZlZE5vZGUpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbk5hbWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5OYW1lc1tpXTtcbiAgICAgICAgbGV0IGNoaWxkUmVzdWx0ID0gW107XG4gICAgICAgIGlmIChyZXNvbHZlZE5vZGVLZXlzLmluY2x1ZGVzKGNoaWxkKSkge1xuICAgICAgICAgIGN0eC5wYXRoLnB1c2goY2hpbGQpO1xuICAgICAgICAgIGlmIChyZXNvbHZlZE5vZGVbY2hpbGRdKSB7XG4gICAgICAgICAgICBjaGlsZFJlc3VsdCA9IHRyYXZlcnNlTm9kZShyZXNvbHZlZE5vZGVbY2hpbGRdLCBub2RlQ2hpbGRyZW5bY2hpbGRdLCBjdHgsIHZpc2l0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGRSZXN1bHQpIGVycm9ycy5wdXNoKC4uLmNoaWxkUmVzdWx0KTtcbiAgICAgICAgICBjdHgucGF0aC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyhkZWZpbml0aW9uLnByb3BlcnRpZXMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBwID0gcHJvcHNbaV07XG4gICAgICAgIGxldCBwcm9wUmVzdWx0ID0gW107XG4gICAgICAgIGN0eC5wYXRoLnB1c2gocCk7XG4gICAgICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbi5wcm9wZXJ0aWVzW3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHJlc29sdmVkTm9kZVtwXSkge1xuICAgICAgICAgICAgcHJvcFJlc3VsdCA9IHRyYXZlcnNlTm9kZShyZXNvbHZlZE5vZGVbcF0sIGRlZmluaXRpb24ucHJvcGVydGllc1twXSgpLCBjdHgsIHZpc2l0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlZE5vZGVbcF0pIHtcbiAgICAgICAgICBwcm9wUmVzdWx0ID0gdHJhdmVyc2VOb2RlKHJlc29sdmVkTm9kZVtwXSwgZGVmaW5pdGlvbi5wcm9wZXJ0aWVzW3BdLCBjdHgsIHZpc2l0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wUmVzdWx0KSBlcnJvcnMucHVzaCguLi5wcm9wUmVzdWx0KTtcbiAgICAgICAgY3R4LnBhdGgucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuICByZXR1cm4gZXJyb3JzO1xufVxuXG5mdW5jdGlvbiBvbk5vZGVFbnRlcihub2RlLCBjdHgpIHtcbiAgY29uc3Qge1xuICAgIG5vZGU6IHJlc29sdmVkTm9kZSwgb25TdGFjayxcbiAgfSA9IHJlc29sdmVOb2RlKG5vZGUsIGN0eCk7XG5cbiAgcmV0dXJuIHtcbiAgICByZXNvbHZlZE5vZGUsXG4gICAgb25TdGFjayxcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25Ob2RlRXhpdChub2RlQ29udGV4dCwgY3R4KSB7XG4gIGlmIChub2RlQ29udGV4dC5vblN0YWNrKSB7XG4gICAgcG9wUGF0aChjdHgpO1xuICB9XG59XG5cbmNvbnN0IG5lc3RlZEluY2x1ZGVzID0gKGMsIHMpID0+IHtcbiAgY29uc3QgcmVzID0gcy5maW5kKChlbCkgPT4gZWwgPT09IHMpICE9PSB1bmRlZmluZWQ7XG4gIHJldHVybiByZXM7XG59O1xuXG5cbmZ1bmN0aW9uIHRyYXZlcnNlTm9kZShub2RlLCBkZWZpbml0aW9uLCBjdHgsIHZpc2l0ZWQgPSBbXSkge1xuICBpZiAoIW5vZGUgfHwgIWRlZmluaXRpb24pIHJldHVybiBbXTtcblxuICBjb25zdCBub2RlQ29udGV4dCA9IG9uTm9kZUVudGVyKG5vZGUsIGN0eCk7XG4gIGNvbnN0IGlzUmVjdXJzaXZlID0gbmVzdGVkSW5jbHVkZXMoY3R4LnBhdGgsIHZpc2l0ZWQpO1xuICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgY29uc3QgY3VycmVudFBhdGggPSBgJHtwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIGN0eC5maWxlUGF0aCl9Ojoke2N0eC5wYXRoLmpvaW4oJy8nKX1gO1xuXG4gIGNvbnN0IGxvY2FsVmlzaXRlZCA9IEFycmF5LmZyb20odmlzaXRlZCk7XG4gIGxvY2FsVmlzaXRlZC5wdXNoKGN1cnJlbnRQYXRoKTtcblxuICBjb25zdCByZXNvbHZlZERlZmluaXRpb24gPSByZXNvbHZlRGVmaW5pdGlvbihkZWZpbml0aW9uLCBjdHgsIG5vZGVDb250ZXh0LnJlc29sdmVkTm9kZSk7XG5cbiAgY3R4LmRlZmluaXRpb25TdGFjay5wdXNoKHJlc29sdmVkRGVmaW5pdGlvbik7XG4gIHJlc29sdmVTY2FsYXJzKG5vZGVDb250ZXh0LnJlc29sdmVkTm9kZSwgZGVmaW5pdGlvbiwgY3R4KTtcblxuICBpZiAoZGVmaW5pdGlvbi5jdXN0b21SZXNvbHZlRmllbGRzKSB7XG4gICAgZGVmaW5pdGlvbi5jdXN0b21SZXNvbHZlRmllbGRzKG5vZGVDb250ZXh0LnJlc29sdmVkTm9kZSwgY3R4LCB2aXNpdGVkKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGVDb250ZXh0LnJlc29sdmVkTm9kZSkpIHtcbiAgICBub2RlQ29udGV4dC5yZXNvbHZlZE5vZGUuZm9yRWFjaCgobm9kZUNoaWxkLCBpKSA9PiB7XG4gICAgICBjdHgucGF0aC5wdXNoKGkpO1xuICAgICAgY29uc3QgYXJyYXlSZXN1bHQgPSB0cmF2ZXJzZU5vZGUobm9kZUNoaWxkLCByZXNvbHZlZERlZmluaXRpb24sIGN0eCwgbG9jYWxWaXNpdGVkKTtcbiAgICAgIGlmIChhcnJheVJlc3VsdCkgZXJyb3JzLnB1c2goLi4uYXJyYXlSZXN1bHQpO1xuICAgICAgY3R4LnBhdGgucG9wKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LnZhbGlkYXRlRmllbGRzID0gY3R4LnZhbGlkYXRlRmllbGRzUmF3LmJpbmQoXG4gICAgICBudWxsLCBub2RlQ29udGV4dC5yZXNvbHZlZE5vZGUsIGN0eCxcbiAgICApO1xuICAgIHJ1blJ1bGVPblJ1bGVzZXQobm9kZUNvbnRleHQsICdvbkVudGVyJywgY3R4LCByZXNvbHZlZERlZmluaXRpb24sIG5vZGUsIGVycm9ycywgbG9jYWxWaXNpdGVkKTtcblxuICAgIGNvbnN0IG5ld05vZGUgPSAhaXNSZWN1cnNpdmVcbiAgICAgICYmICghcmVzb2x2ZWREZWZpbml0aW9uLmlzSWRlbXBvdGVudCB8fCAhY3R4LnZpc2l0ZWQuaW5jbHVkZXMoY3VycmVudFBhdGgpKTtcbiAgICBpZiAobmV3Tm9kZSkge1xuICAgICAgaWYgKCFjdHgudmlzaXRlZC5pbmNsdWRlcyhjdXJyZW50UGF0aCkpIGN0eC52aXNpdGVkLnB1c2goY3VycmVudFBhdGgpO1xuXG4gICAgICBjb25zdCBlcnJvcnNDaGlsZHJlbiA9IHRyYXZlcnNlQ2hpbGRyZW4oXG4gICAgICAgIG5vZGVDb250ZXh0LnJlc29sdmVkTm9kZSwgcmVzb2x2ZWREZWZpbml0aW9uLCBjdHgsIGxvY2FsVmlzaXRlZCxcbiAgICAgICk7XG4gICAgICBlcnJvcnMucHVzaCguLi5lcnJvcnNDaGlsZHJlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdpbGwgdXNlIGNhY2hlZCByZXN1bHQgaWYgd2UgaGF2ZSBhbHJlYWR5IHRyYXZlcnNlZCB0aGlzIG5vZGVzIGNoaWxkcmVuXG4gICAgICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjdHguY2FjaGVbY3VycmVudFBhdGhdXG4gICAgICAgID8gY3R4LmNhY2hlW2N1cnJlbnRQYXRoXS5tYXAoKHIpID0+IGZyb21FcnJvcihyLCBjdHgpKVxuICAgICAgICA6IFtdO1xuXG4gICAgICBjdHgucmVzdWx0LnB1c2goLi4uY2FjaGVkUmVzdWx0KTtcbiAgICB9XG5cbiAgICBydW5SdWxlT25SdWxlc2V0KG5vZGVDb250ZXh0LCAnb25FeGl0JywgY3R4LCByZXNvbHZlZERlZmluaXRpb24sIG5vZGUsIGVycm9ycyk7XG4gICAgaWYgKG5ld05vZGUpIGN0eC5jYWNoZVtjdXJyZW50UGF0aF0gPSBlcnJvcnM7XG4gIH1cbiAgb25Ob2RlRXhpdChub2RlQ29udGV4dCwgY3R4KTtcbiAgY3R4LmRlZmluaXRpb25TdGFjay5wb3AoKTtcbiAgcmV0dXJuIGVycm9ycztcbn1cblxuZnVuY3Rpb24gcnVuUnVsZU9uUnVsZXNldChub2RlQ29udGV4dCwgcnVsZU5hbWUsIGN0eCwgZGVmaW5pdGlvbiwgbm9kZSwgZXJyb3JzLCB2aXNpdGVkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY3R4LmN1c3RvbVJ1bGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY3R4LnZhbGlkYXRlRmllbGRzSGVscGVyID0gY3R4LnZhbGlkYXRlRmllbGRzLmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgY3R4LmN1c3RvbVJ1bGVzW2ldLl9jb25maWcsXG4gICAgICBjdHguY3VzdG9tUnVsZXNbaV0uY29uc3RydWN0b3IucnVsZSxcbiAgICApO1xuXG4gICAgY3R4LmNyZWF0ZUVycm9yID0gY3JlYXRlRXJyb3JGbGF0LmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgbm9kZUNvbnRleHQucmVzb2x2ZWROb2RlLFxuICAgICAgY3R4LFxuICAgICAgY3R4LmN1c3RvbVJ1bGVzW2ldLmNvbnN0cnVjdG9yLnJ1bGUsXG4gICAgICBjdHguY3VzdG9tUnVsZXNbaV0uY29uZmlnXG4gICAgICAgID8gY3R4LmN1c3RvbVJ1bGVzW2ldLmNvbmZpZy5sZXZlbCA6IGN0eC5jdXN0b21SdWxlc1tpXS5fY29uZmlnLmxldmVsLFxuICAgICk7XG5cbiAgICBjb25zdCBlcnJvcnNPbkVudGVyRm9yVHlwZSA9IGN0eC5jdXN0b21SdWxlc1tpXVtkZWZpbml0aW9uLm5hbWVdXG4gICAgICAmJiBjdHguY3VzdG9tUnVsZXNbaV1bZGVmaW5pdGlvbi5uYW1lXSgpW3J1bGVOYW1lXVxuICAgICAgPyBjdHguY3VzdG9tUnVsZXNbaV1bZGVmaW5pdGlvbi5uYW1lXSgpW3J1bGVOYW1lXShcbiAgICAgICAgbm9kZUNvbnRleHQucmVzb2x2ZWROb2RlLCBkZWZpbml0aW9uLCBjdHgsIG5vZGUsIHsgdHJhdmVyc2VOb2RlLCB2aXNpdGVkLCByZXNvbHZlVHlwZSB9LFxuICAgICAgKSA6IFtdO1xuXG4gICAgY29uc3QgZXJyb3JzT25FbnRlckdlbmVyaWMgPSBjdHguY3VzdG9tUnVsZXNbaV0uYW55ICYmIGN0eC5jdXN0b21SdWxlc1tpXS5hbnkoKVtydWxlTmFtZV1cbiAgICAgID8gY3R4LmN1c3RvbVJ1bGVzW2ldLmFueSgpW3J1bGVOYW1lXShub2RlQ29udGV4dC5yZXNvbHZlZE5vZGUsIGRlZmluaXRpb24sIGN0eCwgbm9kZSwge1xuICAgICAgICB0cmF2ZXJzZU5vZGUsIHZpc2l0ZWQsIHJlc29sdmVUeXBlLFxuICAgICAgfSkgOiBbXTtcblxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXJyb3JzT25FbnRlckZvclR5cGUpKSB7XG4gICAgICBjdHgucmVzdWx0LnB1c2goLi4uZXJyb3JzT25FbnRlckZvclR5cGUpO1xuICAgICAgZXJyb3JzLnB1c2goLi4uZXJyb3JzT25FbnRlckZvclR5cGUpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGVycm9yc09uRW50ZXJHZW5lcmljKSkge1xuICAgICAgY3R4LnJlc3VsdC5wdXNoKC4uLmVycm9yc09uRW50ZXJHZW5lcmljKTtcbiAgICAgIGVycm9ycy5wdXNoKC4uLmVycm9yc09uRW50ZXJHZW5lcmljKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhdmVyc2VOb2RlO1xuIl19