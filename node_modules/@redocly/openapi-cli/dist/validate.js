"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateFromFile = exports.validateFromUrl = exports.validate = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _types = require("./types");

var _error = require("./error");

var _utils = require("./utils");

var _config = require("./config");

var _traverse = _interopRequireDefault(require("./traverse"));

var _context = _interopRequireDefault(require("./context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-param-reassign */
const validate = (yamlData, filePath, options = {}) => {
  let document;

  try {
    document = _jsYaml.default.safeLoad(yamlData);
  } catch (ex) {
    return [(0, _error.createYAMLParseError)(ex, {}, filePath, yamlData, true)];
  }

  if (!document.openapi && !document.$ref) return [];
  const config = (0, _config.getLintConfig)(options);
  config.rules.bundler = 'off';
  const ctx = (0, _context.default)(document, yamlData, filePath, config);
  ctx.getRule = ctx.getRule.bind(null, ctx);
  (0, _traverse.default)(document, _types.OpenAPIRoot, ctx);
  const filtered = ctx.result.filter(msg => {
    for (let j = 0; j < ctx.customRules.length; j++) {
      if (msg.fromRule === ctx.customRules[j]) {
        if (ctx.customRules[j].config.excludePaths) {
          const fullPath = `${msg.file}#/${msg.path.join('/')}`;
          return ctx.customRules[j].config.excludePaths.indexOf(fullPath) === -1;
        }

        return true;
      }
    }

    return true;
  });
  return filtered;
};

exports.validate = validate;

const validateFromUrl = (link, options) => {
  const doc = (0, _utils.getFileSync)(link);
  options.sourceUrl = true;
  const validationResult = validate(doc, link, options);
  return validationResult;
};

exports.validateFromUrl = validateFromUrl;

const validateFromFile = (fName, options) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const doc = _fs.default.readFileSync(resolvedFileName, 'utf-8');

  const validationResult = validate(doc, resolvedFileName, options);
  return validationResult;
};

exports.validateFromFile = validateFromFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0ZS5qcyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsInlhbWxEYXRhIiwiZmlsZVBhdGgiLCJvcHRpb25zIiwiZG9jdW1lbnQiLCJ5YW1sIiwic2FmZUxvYWQiLCJleCIsIm9wZW5hcGkiLCIkcmVmIiwiY29uZmlnIiwicnVsZXMiLCJidW5kbGVyIiwiY3R4IiwiZ2V0UnVsZSIsImJpbmQiLCJPcGVuQVBJUm9vdCIsImZpbHRlcmVkIiwicmVzdWx0IiwiZmlsdGVyIiwibXNnIiwiaiIsImN1c3RvbVJ1bGVzIiwibGVuZ3RoIiwiZnJvbVJ1bGUiLCJleGNsdWRlUGF0aHMiLCJmdWxsUGF0aCIsImZpbGUiLCJwYXRoIiwiam9pbiIsImluZGV4T2YiLCJ2YWxpZGF0ZUZyb21VcmwiLCJsaW5rIiwiZG9jIiwic291cmNlVXJsIiwidmFsaWRhdGlvblJlc3VsdCIsInZhbGlkYXRlRnJvbUZpbGUiLCJmTmFtZSIsInJlc29sdmVkRmlsZU5hbWUiLCJmcyIsInJlYWRGaWxlU3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBWkE7QUFjTyxNQUFNQSxRQUFRLEdBQUcsQ0FBQ0MsUUFBRCxFQUFXQyxRQUFYLEVBQXFCQyxPQUFPLEdBQUcsRUFBL0IsS0FBc0M7QUFDNUQsTUFBSUMsUUFBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLFFBQVEsR0FBR0MsZ0JBQUtDLFFBQUwsQ0FBY0wsUUFBZCxDQUFYO0FBQ0QsR0FGRCxDQUVFLE9BQU9NLEVBQVAsRUFBVztBQUNYLFdBQU8sQ0FBQyxpQ0FBcUJBLEVBQXJCLEVBQXlCLEVBQXpCLEVBQTZCTCxRQUE3QixFQUF1Q0QsUUFBdkMsRUFBaUQsSUFBakQsQ0FBRCxDQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDRyxRQUFRLENBQUNJLE9BQVYsSUFBcUIsQ0FBQ0osUUFBUSxDQUFDSyxJQUFuQyxFQUF5QyxPQUFPLEVBQVA7QUFFekMsUUFBTUMsTUFBTSxHQUFHLDJCQUFjUCxPQUFkLENBQWY7QUFDQU8sRUFBQUEsTUFBTSxDQUFDQyxLQUFQLENBQWFDLE9BQWIsR0FBdUIsS0FBdkI7QUFFQSxRQUFNQyxHQUFHLEdBQUcsc0JBQWNULFFBQWQsRUFBd0JILFFBQXhCLEVBQWtDQyxRQUFsQyxFQUE0Q1EsTUFBNUMsQ0FBWjtBQUVBRyxFQUFBQSxHQUFHLENBQUNDLE9BQUosR0FBY0QsR0FBRyxDQUFDQyxPQUFKLENBQVlDLElBQVosQ0FBaUIsSUFBakIsRUFBdUJGLEdBQXZCLENBQWQ7QUFFQSx5QkFBYVQsUUFBYixFQUF1Qlksa0JBQXZCLEVBQW9DSCxHQUFwQztBQUVBLFFBQU1JLFFBQVEsR0FBR0osR0FBRyxDQUFDSyxNQUFKLENBQVdDLE1BQVgsQ0FBbUJDLEdBQUQsSUFBUztBQUMxQyxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdSLEdBQUcsQ0FBQ1MsV0FBSixDQUFnQkMsTUFBcEMsRUFBNENGLENBQUMsRUFBN0MsRUFBaUQ7QUFDL0MsVUFBSUQsR0FBRyxDQUFDSSxRQUFKLEtBQWlCWCxHQUFHLENBQUNTLFdBQUosQ0FBZ0JELENBQWhCLENBQXJCLEVBQXlDO0FBQ3ZDLFlBQUlSLEdBQUcsQ0FBQ1MsV0FBSixDQUFnQkQsQ0FBaEIsRUFBbUJYLE1BQW5CLENBQTBCZSxZQUE5QixFQUE0QztBQUMxQyxnQkFBTUMsUUFBUSxHQUFJLEdBQUVOLEdBQUcsQ0FBQ08sSUFBSyxLQUFJUCxHQUFHLENBQUNRLElBQUosQ0FBU0MsSUFBVCxDQUFjLEdBQWQsQ0FBbUIsRUFBcEQ7QUFDQSxpQkFBT2hCLEdBQUcsQ0FBQ1MsV0FBSixDQUFnQkQsQ0FBaEIsRUFBbUJYLE1BQW5CLENBQTBCZSxZQUExQixDQUF1Q0ssT0FBdkMsQ0FBK0NKLFFBQS9DLE1BQTZELENBQUMsQ0FBckU7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRDtBQUNGOztBQUNELFdBQU8sSUFBUDtBQUNELEdBWGdCLENBQWpCO0FBYUEsU0FBT1QsUUFBUDtBQUNELENBaENNOzs7O0FBa0NBLE1BQU1jLGVBQWUsR0FBRyxDQUFDQyxJQUFELEVBQU83QixPQUFQLEtBQW1CO0FBQ2hELFFBQU04QixHQUFHLEdBQUcsd0JBQVlELElBQVosQ0FBWjtBQUNBN0IsRUFBQUEsT0FBTyxDQUFDK0IsU0FBUixHQUFvQixJQUFwQjtBQUNBLFFBQU1DLGdCQUFnQixHQUFHbkMsUUFBUSxDQUFDaUMsR0FBRCxFQUFNRCxJQUFOLEVBQVk3QixPQUFaLENBQWpDO0FBQ0EsU0FBT2dDLGdCQUFQO0FBQ0QsQ0FMTTs7OztBQU9BLE1BQU1DLGdCQUFnQixHQUFHLENBQUNDLEtBQUQsRUFBUWxDLE9BQVIsS0FBb0I7QUFDbEQsUUFBTW1DLGdCQUFnQixHQUFHRCxLQUF6QixDQURrRCxDQUNsQjs7QUFDaEMsUUFBTUosR0FBRyxHQUFHTSxZQUFHQyxZQUFILENBQWdCRixnQkFBaEIsRUFBa0MsT0FBbEMsQ0FBWjs7QUFDQSxRQUFNSCxnQkFBZ0IsR0FBR25DLFFBQVEsQ0FBQ2lDLEdBQUQsRUFBTUssZ0JBQU4sRUFBd0JuQyxPQUF4QixDQUFqQztBQUNBLFNBQU9nQyxnQkFBUDtBQUNELENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuXG5pbXBvcnQgeyBPcGVuQVBJUm9vdCB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgeyBjcmVhdGVZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuXG5pbXBvcnQgeyBnZXRGaWxlU3luYyB9IGZyb20gJy4vdXRpbHMnO1xuXG5pbXBvcnQgeyBnZXRMaW50Q29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHRyYXZlcnNlTm9kZSBmcm9tICcuL3RyYXZlcnNlJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJy4vY29udGV4dCc7XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZSA9ICh5YW1sRGF0YSwgZmlsZVBhdGgsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgZG9jdW1lbnQ7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQgPSB5YW1sLnNhZmVMb2FkKHlhbWxEYXRhKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICByZXR1cm4gW2NyZWF0ZVlBTUxQYXJzZUVycm9yKGV4LCB7fSwgZmlsZVBhdGgsIHlhbWxEYXRhLCB0cnVlKV07XG4gIH1cbiAgaWYgKCFkb2N1bWVudC5vcGVuYXBpICYmICFkb2N1bWVudC4kcmVmKSByZXR1cm4gW107XG5cbiAgY29uc3QgY29uZmlnID0gZ2V0TGludENvbmZpZyhvcHRpb25zKTtcbiAgY29uZmlnLnJ1bGVzLmJ1bmRsZXIgPSAnb2ZmJztcblxuICBjb25zdCBjdHggPSBjcmVhdGVDb250ZXh0KGRvY3VtZW50LCB5YW1sRGF0YSwgZmlsZVBhdGgsIGNvbmZpZyk7XG5cbiAgY3R4LmdldFJ1bGUgPSBjdHguZ2V0UnVsZS5iaW5kKG51bGwsIGN0eCk7XG5cbiAgdHJhdmVyc2VOb2RlKGRvY3VtZW50LCBPcGVuQVBJUm9vdCwgY3R4KTtcblxuICBjb25zdCBmaWx0ZXJlZCA9IGN0eC5yZXN1bHQuZmlsdGVyKChtc2cpID0+IHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN0eC5jdXN0b21SdWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKG1zZy5mcm9tUnVsZSA9PT0gY3R4LmN1c3RvbVJ1bGVzW2pdKSB7XG4gICAgICAgIGlmIChjdHguY3VzdG9tUnVsZXNbal0uY29uZmlnLmV4Y2x1ZGVQYXRocykge1xuICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gYCR7bXNnLmZpbGV9Iy8ke21zZy5wYXRoLmpvaW4oJy8nKX1gO1xuICAgICAgICAgIHJldHVybiBjdHguY3VzdG9tUnVsZXNbal0uY29uZmlnLmV4Y2x1ZGVQYXRocy5pbmRleE9mKGZ1bGxQYXRoKSA9PT0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gZmlsdGVyZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVGcm9tVXJsID0gKGxpbmssIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZG9jID0gZ2V0RmlsZVN5bmMobGluayk7XG4gIG9wdGlvbnMuc291cmNlVXJsID0gdHJ1ZTtcbiAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHZhbGlkYXRlKGRvYywgbGluaywgb3B0aW9ucyk7XG4gIHJldHVybiB2YWxpZGF0aW9uUmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRnJvbUZpbGUgPSAoZk5hbWUsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcmVzb2x2ZWRGaWxlTmFtZSA9IGZOYW1lOyAvLyBwYXRoLnJlc29sdmUoZk5hbWUpO1xuICBjb25zdCBkb2MgPSBmcy5yZWFkRmlsZVN5bmMocmVzb2x2ZWRGaWxlTmFtZSwgJ3V0Zi04Jyk7XG4gIGNvbnN0IHZhbGlkYXRpb25SZXN1bHQgPSB2YWxpZGF0ZShkb2MsIHJlc29sdmVkRmlsZU5hbWUsIG9wdGlvbnMpO1xuICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdDtcbn07XG4iXX0=