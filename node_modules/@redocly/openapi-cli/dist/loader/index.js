"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadRulesetExtension = loadRulesetExtension;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-underscore-dangle */
const get = (p, o) => p.reduce((xs, x) => xs && xs[x] ? xs[x] : null, o);

function getObjByPathOrParent(json, JSONPath) {
  const value = get(JSONPath.split('.'), json);

  switch (typeof value) {
    case 'string':
      return {
        level: value
      };

    case 'object':
    default:
      return {
        level: 4,
        ...value
      };
  }
}

function loadRuleset(config) {
  const ruleSet = [];
  const allRules = [];
  const configCopy = { ...config,
    rulesPath: config.rulesPath ? config.rulesPath : `${__dirname}/../visitors`
  };

  let rulesDirectory = _path.default.resolve(configCopy.rulesPath);

  if (!_fs.default.existsSync(rulesDirectory)) {
    rulesDirectory = `${__dirname}/../visitors`;
  }

  const ruleSetDirContents = _fs.default.readdirSync(rulesDirectory).map(fName => `${rulesDirectory}/${fName}`);

  const files = ruleSetDirContents.filter(fName => _fs.default.lstatSync(fName).isFile());
  const dirs = ruleSetDirContents.filter(fName => !_fs.default.lstatSync(fName).isFile() && fName.indexOf('utils') === -1);
  files.forEach(file => {
    const Rule = require(file);

    const ruleConfig = getObjByPathOrParent(configCopy.rules, Rule.rule) || {
      level: 4
    };
    const ruleInstance = new Rule(ruleConfig);

    if (ruleConfig.level !== 'off') {
      if (!ruleInstance.config) {
        ruleInstance.config = ruleConfig;
      }

      ruleInstance._config = ruleConfig;
      ruleSet.push(ruleInstance);
    }

    allRules.push(ruleInstance);
  });
  dirs.forEach(dir => {
    const [nestedRules, allNestedRules] = loadRuleset({ ...configCopy,
      rulesPath: dir
    });
    ruleSet.push(...nestedRules);
    allRules.push(...allNestedRules);
  });
  return [ruleSet, allRules];
}

function loadRulesetExtension(config, rulesetName) {
  const additionalRules = [];
  const configCopy = { ...config,
    rulesPath: config.rulesPath ? config.rulesPath : `${__dirname}/../visitors`
  };
  config[rulesetName].forEach(Rule => {
    const ruleConfig = getObjByPathOrParent(configCopy.rules, Rule.rule) || {
      level: 4
    };

    if (ruleConfig.level !== 'off') {
      const ruleInstance = new Rule(ruleConfig);

      if (!ruleInstance.config) {
        ruleInstance.config = ruleConfig;
      }

      ruleInstance._config = ruleConfig;
      additionalRules.push(ruleInstance);
    }
  });
  return additionalRules;
}

var _default = loadRuleset;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,